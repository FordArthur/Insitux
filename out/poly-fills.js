"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pi = exports.sign = exports.ceil = exports.floor = exports.round = exports.sqrt = exports.tan = exports.cos = exports.sin = exports.max = exports.min = exports.abs = exports.getTimeMs = exports.objKeys = exports.range = exports.randInt = exports.randNum = exports.padEnd = exports.trim = exports.reverse = exports.sortBy = exports.push = exports.concat = exports.flat = exports.ends = exports.starts = exports.has = exports.subIdx = exports.sub = exports.strIdx = exports.substr = exports.isArray = exports.isNum = exports.slen = exports.len = exports.splice = exports.slice = exports.toNum = void 0;
const toNum = (x) => Number(x);
exports.toNum = toNum;
const slice = (arr, start, end) => arr.slice(start, end);
exports.slice = slice;
const splice = (arr, start, numDel) => arr.splice(start, numDel);
exports.splice = splice;
const len = (arr) => arr.length;
exports.len = len;
const slen = (str) => str.length;
exports.slen = slen;
const isNum = (x) => !Number.isNaN(Number(x));
exports.isNum = isNum;
const isArray = (x) => Array.isArray(x);
exports.isArray = isArray;
const substr = (str, start, length) => str.substring(start, length ? start + length : str.length);
exports.substr = substr;
const strIdx = (str, idx) => str[idx];
exports.strIdx = strIdx;
const sub = (x, s) => x.includes(s);
exports.sub = sub;
const subIdx = (x, s) => x.indexOf(s);
exports.subIdx = subIdx;
const has = (x, y) => x.includes(y);
exports.has = has;
const starts = (str, x) => str.startsWith(x);
exports.starts = starts;
const ends = (str, x) => str.endsWith(x);
exports.ends = ends;
const flat = (arr) => arr.flat(); //e.g. [[0], [1], []] => [0, 1]
exports.flat = flat;
const concat = (a, b) => a.concat(b);
exports.concat = concat;
const push = (arr, add) => arr.push(...add);
exports.push = push;
const sortBy = (arr, by) => arr.sort(by);
exports.sortBy = sortBy;
const reverse = (arr) => arr.reverse();
exports.reverse = reverse;
const trim = (str) => str.trim();
exports.trim = trim;
const padEnd = (str, by) => str.padEnd(by);
exports.padEnd = padEnd;
const randNum = (a, b) => a + Math.random() * (b - a);
exports.randNum = randNum;
const randInt = (a, b) => Math.floor(exports.randNum(a, b));
exports.randInt = randInt;
const range = (len) => [...Array(len).keys()];
exports.range = range;
const objKeys = (x) => Object.keys(x);
exports.objKeys = objKeys;
const getTimeMs = () => new Date().getTime();
exports.getTimeMs = getTimeMs;
exports.abs = Math.abs;
exports.min = Math.min;
exports.max = Math.max;
exports.sin = Math.sin;
exports.cos = Math.cos;
exports.tan = Math.tan;
exports.sqrt = Math.sqrt;
exports.round = Math.round;
exports.floor = Math.floor;
exports.ceil = Math.ceil;
exports.sign = Math.sign;
exports.pi = Math.PI;
//# sourceMappingURL=poly-fills.js.map