{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict };\r\n\r\nexport type ErrCtx = { sourceId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called when Insitux cannot find a function and assumes it is external.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exp\"; value: number } //Marks the start of an expression as head for potential partial closures\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: { minArity: 2, maxArity: 3, params: [[\"str\", \"vec\"]], returns: [\"num\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3, params: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [[], \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"vec\", \"dict\", \"str\"], \"str\"],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts-with?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends-with?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\r\nimport { assertUnreachable, InvokeError } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  sourceId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      } else if (emitComments) {\r\n        tokens[len(tokens) - 1].text += c;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      if (emitComments) {\r\n        tokens.push({\r\n          typ: \"rem\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps) {\r\n          if (c === \"[\") {\r\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n          } else if (c === \"{\") {\r\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseAll(tokens: Token[], params: string[]) {\r\n  const args: ParserIns[][] = [];\r\n  while (true) {\r\n    const arg = parseArg(tokens, params);\r\n    if (!len(arg)) {\r\n      break;\r\n    }\r\n    args.push(arg);\r\n  }\r\n  return args;\r\n}\r\n\r\nfunction parseForm(\r\n  tokens: Token[],\r\n  params: string[],\r\n  inPartial = true,\r\n): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string, eCtx = errCtx) => [\r\n    <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n  ];\r\n  if (op === \"catch\") {\r\n    if (tokens[0].typ !== \"(\") {\r\n      return err(\"argument 1 must be expression\");\r\n    }\r\n    const body = parseArg(tokens, params);\r\n    const when = flat(parseAll(tokens, params));\r\n    if (!len(body) || !len(when)) {\r\n      return err(\"must provide at least 2 arguments\");\r\n    }\r\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const ins: Ins[] = [];\r\n    while (true) {\r\n      const defIns = parseArg(tokens, params);\r\n      if (len(ins) && !len(defIns)) {\r\n        return ins;\r\n      }\r\n      const val = parseArg(tokens, params);\r\n      if (!len(ins) && (!len(defIns) || !len(val))) {\r\n        return err(`must provide at least one declaration name and value`);\r\n      } else if (!len(val)) {\r\n        return err(`must provide a value after each declaration name`);\r\n      }\r\n      const def = defIns[0];\r\n      if (def.typ !== \"ref\") {\r\n        return [\r\n          <ParserIns>{\r\n            typ: \"err\",\r\n            value: `${op} declaration name must be a symbol`,\r\n            errCtx: def.errCtx,\r\n          },\r\n        ];\r\n      }\r\n      push(ins, val);\r\n      ins.push({ typ: op, value: def.value, errCtx });\r\n    }\r\n  } else if (op === \"var!\" || op === \"let!\") {\r\n    const ins: Ins[] = [];\r\n    //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n    const defIns = parseArg(tokens, params);\r\n    if (!len(defIns)) {\r\n      return err(`must provide declaration name`);\r\n    }\r\n    const def = defIns[0];\r\n    if (def.typ !== \"ref\") {\r\n      return err(\"declaration name must be symbol\");\r\n    }\r\n    const func = parseArg(tokens, params);\r\n    if (!len(func)) {\r\n      return err(\"must provide an operation\");\r\n    }\r\n    const args = parseAll(tokens, params);\r\n    ins.push({ typ: \"ref\", value: def.value, errCtx });\r\n    push(ins, flat(args));\r\n    push(ins, func);\r\n    ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n    ins.push({ typ: op === \"var!\" ? \"var\" : \"let\", value: def.value, errCtx });\r\n    return ins;\r\n  } else if (op === \"if\" || op === \"if!\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if!\") {\r\n      ins.push({ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx });\r\n      ins.push({ typ: \"exe\", value: 1, errCtx });\r\n    }\r\n    if (op === \"if\" || op === \"if!\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        const extraneousBranch = parseArg(tokens, params);\r\n        if (len(extraneousBranch)) {\r\n          return err(\r\n            \"too many branches; delete this branch\",\r\n            extraneousBranch[0].errCtx,\r\n          );\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n      }\r\n    } else {\r\n      const body = flat(parseAll(tokens, params));\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n    const args = parseAll(tokens, params);\r\n    let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: falseVal, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"match\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const args = parseAll(tokens, params);\r\n    const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n    if (!len(args)) {\r\n      return err(\"must provide at least one case\");\r\n    }\r\n    let insCount =\r\n      args.reduce(\r\n        (acc, a) => acc + len(a) + 1,\r\n        len(otherwise) ? len(otherwise) - 2 : 0,\r\n      ) + 2;\r\n    const ins: ParserIns[] = cond;\r\n    while (len(args) > 1) {\r\n      const a = args.shift()!;\r\n      const when = args.shift()!;\r\n      push(ins, a);\r\n      ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n      push(ins, when);\r\n      insCount -= len(a) + len(when) + 2;\r\n      ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n    }\r\n    if (len(otherwise)) {\r\n      push(ins, otherwise);\r\n    } else {\r\n      ins.push({ typ: \"pop\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  //Head is a expression or parameter\r\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    if (inPartial) {\r\n      headIns.push({ typ: \"exp\", value: len(ins), errCtx });\r\n    }\r\n    push(headIns, ins);\r\n  }\r\n  const parsedArgs = parseAll(tokens, params);\r\n  const [body, nArgs] = [flat(parsedArgs), len(parsedArgs)];\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n\r\n  //Operation arity check, optionally disabled for partial closures\r\n  if (ops[op] && !inPartial) {\r\n    const errors = arityCheck(op, nArgs, errCtx);\r\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\r\n    if (!errors) {\r\n      //Upgrade some math and logic functions to their fast counterparts\r\n      if (nArgs === 2 && ops[`fast${op}`]) {\r\n        op = `fast${op}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (len(headIns)) {\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  } else {\r\n    const value: Val =\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op };\r\n    headIns.push({ typ: \"val\", value, errCtx });\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  }\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction spliceParams(tokens: Token[]) {\r\n  const firstNonParam = tokens.findIndex(\r\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\r\n  );\r\n  return splice(tokens, 0, firstNonParam);\r\n}\r\n\r\nfunction parseArg(\r\n  tokens: Token[],\r\n  params: string[],\r\n  inPartial = false,\r\n): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  //Upon closure\r\n  const isClosure =\r\n    typ === \"sym\" && sub(\"#@\", text) && len(tokens) && tokens[0].typ === \"(\";\r\n  const isParamClosure = typ === \"(\" && len(tokens) && tokens[0].text === \"fn\";\r\n  if (isClosure || isParamClosure) {\r\n    const texts = tokens.map(t => t.text);\r\n    const fnIns = isParamClosure ? tokens.shift() : undefined;\r\n    const paramTokens = spliceParams(tokens);\r\n    if (isParamClosure) {\r\n      if (tokens[0].typ === \")\") {\r\n        return [\r\n          {\r\n            typ: \"err\",\r\n            value: `fn requires a body, not just parameters`,\r\n            errCtx: fnIns!.errCtx,\r\n          },\r\n        ];\r\n      }\r\n      tokens.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      tokens.unshift({ typ: \"(\", text: \"(\", errCtx });\r\n    }\r\n    const body = parseArg(\r\n      tokens,\r\n      isParamClosure ? paramTokens.map(t => t.text) : params,\r\n      text === \"@\",\r\n    );\r\n    const errors = body.filter(t => t.typ === \"err\");\r\n    if (len(errors)) {\r\n      return errors;\r\n    }\r\n    if (isParamClosure) {\r\n      body.forEach(ins => {\r\n        if (ins.typ === \"npa\") {\r\n          ins.typ = \"upa\";\r\n        }\r\n      });\r\n    }\r\n    const value: [string, Ins[]] = [\r\n      (isParamClosure ? \"(\" : text) +\r\n        slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\r\n      <Ins[]>body,\r\n    ];\r\n    return [{ typ: text === \"@\" ? \"par\" : \"clo\", value, errCtx }];\r\n  }\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(params, text)) {\r\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params, inPartial);\r\n    case \")\":\r\n    case \"rem\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): [\"func\", Func] | [\"err\", InvokeError] {\r\n  const err = (m: string, eCtx = errCtx) =>\r\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\r\n  const params = spliceParams(tokens);\r\n  //In the case of e.g. (function (+))\r\n  if (name === \"(\") {\r\n    return err(\"nameless function\");\r\n  }\r\n  //In the case of e.g. (function)\r\n  if (!len(params) && !len(tokens)) {\r\n    return err(\"empty function body\");\r\n  }\r\n  if (len(tokens) && tokens[0].typ === \")\") {\r\n    if (len(params)) {\r\n      //In the case of e.g. (function f %) or (function x y z)\r\n      tokens.unshift(params.pop()!);\r\n    } else {\r\n      //In the case of e.g. (function name)\r\n      return err(\"empty function body\");\r\n    }\r\n  }\r\n  //In the case of e.g. (function entry x y z)\r\n  if (len(params) && !len(tokens)) {\r\n    tokens.push(params.pop()!);\r\n  }\r\n  const ins: ParserIns[] = [];\r\n  while (len(tokens)) {\r\n    push(\r\n      ins,\r\n      parseArg(\r\n        tokens,\r\n        params.map(p => p.text),\r\n      ),\r\n    );\r\n  }\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const x = ins[i];\r\n    if (x.typ === \"err\") {\r\n      return err(x.value, x.errCtx);\r\n    }\r\n  }\r\n  return [\"func\", { name, ins: <Ins[]>ins }];\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"exp\":\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const errors = insErrorDetect(ins.value[1]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  sourceId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, sourceId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      sourceId: sourceId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  funcsAndErrors.forEach(fae => {\r\n    if (fae[0] === \"err\") {\r\n      errors.push(fae[1]);\r\n    } else {\r\n      okFuncs.push(fae[1]);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key} not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation ${name} does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 3\",\r\n    code: `(((fn (fn 1))))`,\r\n    out: `1`,\r\n  },\r\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(push % %1 (inc (or (% %1) 0))) list {}))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type-errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    sourceId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        print(str, withNewLine) {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      \"testing\",\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return val.v.name;\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n","export const insituxVersion = 20211202;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { Operation, ExternalHandler } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet lets: { [key: string]: Val }[] = [];\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(\r\n      op,\r\n      args.map(a => [a.t]),\r\n      errCtx,\r\n    );\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n        ctx.print(stringify(args), op === \"print\");\r\n        _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return;\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[1].v;\r\n        _num(round(<number>args[0].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")) ||\r\n          (op === \"wild?\" && args[0].t === \"wild\"),\r\n      );\r\n      return;\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        } else {\r\n          const arr = args[0].v.split(\"\");\r\n          arr[num(args[2])] = args[1].v;\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = slice(args[0].v);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      const array = asArray(args.shift()!);\r\n      if (op !== \"reduce\") {\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        _vec(filtered);\r\n        return;\r\n      }\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, end = len(args); i < end; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      const src = asArray(args[0]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (mapped[0][1].t === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[0])\r\n          .split(len(args) > 1 ? str(args[1]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(\r\n        asArray(args[0])\r\n          .map(val2str)\r\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\r\n      );\r\n      return;\r\n    case \"starts-with?\":\r\n    case \"ends-with?\":\r\n      _boo((op === \"starts-with?\" ? starts : ends)(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const sourceId = `${errCtx.sourceId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), sourceId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  const monoArityError = [\r\n    {\r\n      e: \"Arity\",\r\n      m: `${typeNames[op.t]} as op requires one sole argument`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets[len(lets) - 1]) {\r\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dictionary as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"npa\":\r\n      case \"upa\":\r\n        {\r\n          const paramIdx = ins.value;\r\n          if (paramIdx === -1) {\r\n            _vec(args);\r\n          } else if (len(args) <= paramIdx) {\r\n            _nul();\r\n          } else {\r\n            stack.push(args[paramIdx]);\r\n          }\r\n        }\r\n        break;\r\n      case \"ref\":\r\n        {\r\n          const name = ins.value;\r\n          if (ops[name]) {\r\n            _fun(name);\r\n          } else if (starts(name, \"$\")) {\r\n            const valAndErr = ctx.get(substr(name, 1));\r\n            if (valAndErr.kind === \"err\") {\r\n              return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n            }\r\n            stack.push(valAndErr.value);\r\n          } else if (name in ctx.env.vars) {\r\n            stack.push(ctx.env.vars[name]);\r\n          } else if (name in lets[len(lets) - 1]) {\r\n            stack.push(lets[len(lets) - 1][name]);\r\n          } else if (name in ctx.env.funcs) {\r\n            _fun(name);\r\n          } else {\r\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n          }\r\n        }\r\n        break;\r\n      case \"exe\":\r\n        {\r\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\r\n          const nArgs = ins.value;\r\n          const params = splice(stack, len(stack) - nArgs, nArgs);\r\n          const errors = closure(params);\r\n          if (errors) {\r\n            //Find next catch statement\r\n            const nextCat = slice(func.ins, i).findIndex(\r\n              ins => ins.typ === \"cat\",\r\n            );\r\n            if (nextCat !== -1) {\r\n              i += nextCat;\r\n              lets[len(lets) - 1][\"errors\"] = {\r\n                t: \"vec\",\r\n                v: errorsToDict(errors),\r\n              };\r\n              break;\r\n            }\r\n            return errors;\r\n          }\r\n          if (recurArgs) {\r\n            lets[len(lets) - 1] = {};\r\n            i = -1;\r\n            const nArgs = ins.value;\r\n            args = recurArgs;\r\n            recurArgs = undefined;\r\n            --ctx.recurBudget;\r\n            if (!ctx.recurBudget) {\r\n              return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\":\r\n      case \"par\":\r\n        {\r\n          const name = ins.value[0];\r\n          let cins = ins.value[1];\r\n          const isCapture = ({ typ, value }: Ins, i: number) =>\r\n            (typ === \"ref\" &&\r\n              !cins.find(i => i.typ === \"let\" && i.value === value)) ||\r\n            typ === \"npa\" ||\r\n            (typ === \"val\" && i + 1 !== len(cins) && cins[i + 1].typ === \"exe\");\r\n          const derefFunc: Func = {\r\n            name: \"\",\r\n            ins: cins\r\n              .map((ins, i) => {\r\n                if (i + 1 === len(cins)) {\r\n                  return ins;\r\n                }\r\n                const possibleLet =\r\n                  ins.typ === \"val\" &&\r\n                  ins.value.t === \"str\" &&\r\n                  cins[i + 1].typ === \"exe\" &&\r\n                  lets[len(lets) - 1][ins.value.v];\r\n                return possibleLet\r\n                  ? <Ins>{ typ: \"val\", value: possibleLet }\r\n                  : ins;\r\n              })\r\n              .filter(isCapture),\r\n          };\r\n          const errors = exeFunc(ctx, derefFunc, args, true);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const numIns = len(derefFunc.ins);\r\n          const captures = splice(stack, len(stack) - numIns, numIns);\r\n          cins = cins.map((ins, i) =>\r\n            isCapture(ins, i)\r\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\r\n              : ins,\r\n          );\r\n          //Rewrite partial closure to #(... func [args] args)\r\n          if (ins.typ === \"par\") {\r\n            const { value: exeNumArgs, errCtx } = cins.pop()!;\r\n            //If has expression as head\r\n            if (len(cins) > 0 && cins[len(cins) - 1].typ === \"exe\") {\r\n              const headStartIdx = cins.findIndex(i => i.typ === \"exp\");\r\n              const head = splice(cins, headStartIdx, len(cins) - headStartIdx);\r\n              push(head, cins);\r\n              cins = head;\r\n            } else {\r\n              cins.unshift(cins.pop()!);\r\n            }\r\n            cins.push({ typ: \"upa\", value: -1, errCtx });\r\n            cins.push({\r\n              typ: \"val\",\r\n              value: <Val>{ t: \"str\", v: \"...\" },\r\n              errCtx,\r\n            });\r\n            cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\r\n          }\r\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\r\n        }\r\n        break;\r\n      case \"exp\":\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, sourceId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\n/**\r\n * Registers a new operation in Insitux, usable by all contexts.\r\n */\r\nexport function addOperation(\r\n  name: string,\r\n  definition: Operation,\r\n  handler: ExternalHandler,\r\n) {\r\n  if (ops[name] && !externalOps[name]) {\r\n    throw \"Redefining internal operations is disallowed.\";\r\n  }\r\n  ops[name] = { ...definition, external: true };\r\n  externalOps[name] = handler;\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param sourceId A unique ID used in immediate or future invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  const errors = parseAndExe(ctx, code, sourceId);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, lets] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n): InvokeResult | undefined {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  const errors = exeFunc(ctx, ctx.env.funcs[funcName], params);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  const value = stack.pop()!;\r\n  [stack, lets] = [[], []];\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"while\"] : [];\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(ctx: Ctx, code: string): InvokeOutput {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const valOrErrs = invoke(ctx, code, uuid, true);\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, sourceId } }) => {\r\n    const invocation = invocations.get(sourceId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","xor","rem","vec","dict","params","map","for","reduce","filter","remove","find","count","repeat","rand","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","recur","typeNames","null","bool","ref","func","clo","wild","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","nullVal","falseVal","parseAll","tokens","arg","parseArg","spliceParams","firstNonParam","typ","text","inPartial","shift","isClosure","isParamClosure","texts","fnIns","paramTokens","unshift","body","errors","forEach","ins","head","err","eCtx","when","defIns","def","cond","ifT","ifF","extraneousBranch","insCount","acc","as","otherwise","pop","headIns","parsedArgs","nArgs","parseForm","insErrorDetect","fins","stack","lim","badMatch","okTypes","headIs","badArg","parse","code","sourceId","stringError","makeCollsOps","emitComments","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","l","c","nextCh","n","isWhite","isDigit","ch","isParen","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","funcsAndErrors","segments","isFunc","entries","described","name","funcise","token","segment","named","p","syntaxise","okFuncs","fae","f","state","kind","set","exe","output","out","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","externalOps","recurArgs","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","getExe","ctx","checkArity","monoArityError","external","valOrErr","tErr","violations","sum","every","closure","arrays","lims","divisors","loopBudget","argIdxs","d","shortest","array","isRemove","isFind","isCount","filtered","reduction","toRepeat","result","rangeBudget","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","newKey","inClosure","stackLen","tooManyLoops","paramIdx","nextCat","cins","isCapture","derefFunc","possibleLet","numIns","captures","exeNumArgs","headStartIdx","parsed","printResult","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}