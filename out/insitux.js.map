{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = (arr: unknown[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;","export type Val =\n  | { t: \"vec\"; v: Val[] }\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\n  | { t: \"null\"; v: undefined }\n  | { t: \"bool\"; v: boolean }\n  | { t: \"num\"; v: number }\n  | { t: \"clo\"; v: Func }\n  | { t: \"dict\"; v: Dict };\n\nexport type ErrCtx = { sourceId: string; line: number; col: number };\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\nexport type ValAndErr =\n  | { kind: \"val\"; value: Val }\n  | { kind: \"err\"; err: string };\n\nexport type Dict = {\n  keys: Val[];\n  vals: Val[];\n};\n\nexport type Func = {\n  name: string;\n  ins: Ins[];\n};\nexport type Funcs = { [key: string]: Func };\nexport type Env = {\n  funcs: Funcs;\n  vars: { [key: string]: Val };\n};\n\nexport type Ctx = {\n  set: (key: string, val: Val) => Promise<string | undefined>;\n  get: (key: string) => Promise<ValAndErr>;\n  exe: (name: string, args: Val[]) => Promise<ValAndErr>;\n  env: Env;\n  loopBudget: number;\n  rangeBudget: number;\n  callBudget: number;\n  recurBudget: number;\n};\n\nexport type Ins = { errCtx: ErrCtx } & (\n  | { typ: \"val\"; value: Val }\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\"; value: number } //number of instructions\n  | { typ: \"ret\"; value: boolean } //Return, with value?\n  | { typ: \"rec\"; value: number } //Recur, number of args\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\n);\n\nexport const ops: {\n  [name: string]: {\n    minArity?: number;\n    maxArity?: number;\n    exactArity?: number;\n    numeric?: true | \"in only\";\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\n    returns?: Val[\"t\"][];\n  };\n} = {\n  print: { returns: [\"null\"] },\n  \"print-str\": { returns: [\"null\"] },\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\n  \"=\": { minArity: 2 },\n  \"!=\": { minArity: 2 },\n  \"+\": { minArity: 2, numeric: true },\n  \"-\": { minArity: 1, numeric: true },\n  \"*\": { minArity: 2, numeric: true },\n  \"/\": { minArity: 2, numeric: true },\n  \"//\": { minArity: 2, numeric: true },\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\n  \"<\": { minArity: 2, numeric: true },\n  \">\": { minArity: 2, numeric: true },\n  \"<=\": { minArity: 2, numeric: true },\n  \">=\": { minArity: 2, numeric: true },\n  \"fast=\": { exactArity: 2 },\n  \"fast!=\": { exactArity: 2 },\n  \"fast+\": { exactArity: 2, numeric: true },\n  \"fast-\": { exactArity: 2, numeric: true },\n  \"fast*\": { exactArity: 2, numeric: true },\n  \"fast/\": { exactArity: 2, numeric: true },\n  \"fast//\": { exactArity: 2, numeric: true },\n  \"fast<\": { exactArity: 2, numeric: true },\n  \"fast>\": { exactArity: 2, numeric: true },\n  \"fast<=\": { exactArity: 2, numeric: true },\n  \"fast>=\": { exactArity: 2, numeric: true },\n  inc: { exactArity: 1, numeric: true },\n  dec: { exactArity: 1, numeric: true },\n  min: { minArity: 2, numeric: true },\n  max: { minArity: 2, numeric: true },\n  abs: { exactArity: 1, numeric: true },\n  sqrt: { exactArity: 1, numeric: true },\n  round: { minArity: 1, maxArity: 2, numeric: true },\n  floor: { exactArity: 1, numeric: true },\n  ceil: { exactArity: 1, numeric: true },\n  logn: { exactArity: 1, numeric: true },\n  log2: { exactArity: 1, numeric: true },\n  log10: { exactArity: 1, numeric: true },\n  and: { minArity: 1 },\n  or: { minArity: 1 },\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\n  rem: { minArity: 2, numeric: true },\n  sin: { exactArity: 1, numeric: true },\n  cos: { exactArity: 1, numeric: true },\n  tan: { exactArity: 1, numeric: true },\n  vec: { returns: [\"vec\"] },\n  dict: { returns: [\"dict\"] },\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\n  \"to-num\": {\n    exactArity: 1,\n    types: [[\"str\", \"num\"]],\n    returns: [\"num\", \"null\"],\n  },\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]], returns: [\"key\"] },\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]], returns: [\"num\"] },\n  map: { minArity: 2, returns: [\"vec\"] },\n  for: { minArity: 2, returns: [\"vec\"] },\n  reduce: { minArity: 2, maxArity: 3 },\n  filter: { minArity: 2, returns: [\"vec\"] },\n  remove: { minArity: 2, returns: [\"vec\"] },\n  find: { minArity: 2 },\n  count: { minArity: 2, returns: [\"num\"] },\n  str: { returns: [\"str\"] },\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\n  while: {},\n  \"..\": { minArity: 2 },\n  \"...\": { minArity: 2 },\n  into: {\n    exactArity: 2,\n    types: [\n      [\"vec\", \"dict\"],\n      [\"vec\", \"dict\"],\n    ],\n    returns: [\"vec\", \"dict\"],\n  },\n  push: {\n    minArity: 2,\n    maxArity: 3,\n    types: [[\"vec\", \"dict\"]],\n    returns: [\"vec\", \"dict\"],\n  },\n  sect: {\n    minArity: 1,\n    maxArity: 3,\n    types: [[\"vec\", \"str\"], \"num\", \"num\"],\n    returns: [\"vec\", \"str\"],\n  },\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"], returns: [\"vec\"] },\n  keys: { exactArity: 1, types: [\"dict\"] },\n  vals: { exactArity: 1, types: [\"dict\"] },\n  do: { minArity: 1 },\n  val: { minArity: 1 },\n  range: { minArity: 1, maxArity: 3, numeric: true },\n  \"empty?\": {\n    exactArity: 1,\n    types: [[\"str\", \"vec\", \"dict\"]],\n    returns: [\"bool\"],\n  },\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"], returns: [\"vec\"] },\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"], returns: [\"str\"] },\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"lower-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"upper-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  trim: { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"trim-start\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"trim-end\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"], returns: [\"str\"] },\n  time: { exactArity: 0, returns: [\"num\"] },\n  version: { exactArity: 0, returns: [\"num\"] },\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"], returns: [\"str\"] },\n  symbols: { exactArity: 0, returns: [\"vec\"] },\n  eval: { exactArity: 1, types: [\"str\"] },\n  reset: { exactArity: 0 },\n};\n\nexport const typeNames = {\n  null: \"null\",\n  str: \"string\",\n  num: \"number\",\n  bool: \"boolean\",\n  key: \"keyword\",\n  ref: \"reference\",\n  vec: \"vector\",\n  dict: \"dictionary\",\n  func: \"function\",\n  clo: \"closure\",\n};\n\nexport const assertUnreachable = (_x: never): never => <never>0;\n","import { isEqual } from \"./checks\";\nimport { len, slice, splice } from \"./poly-fills\";\nimport { Dict, InvokeError, Val } from \"./types\";\n\nexport const num = ({ v }: Val) => v as number;\nexport const str = ({ v }: Val) => v as string;\nexport const vec = ({ v }: Val) => v as Val[];\nexport const dic = ({ v }: Val) => v as Dict;\n\nexport const stringify = (vals: Val[]) =>\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\n\nexport const val2str = (val: Val): string => {\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\n  if (val.t === \"clo\") {\n    return `#${val.v.name}`;\n  } else if (val.t === \"vec\") {\n    return `[${val.v.map(quoted).join(\" \")}]`;\n  } else if (val.t === \"dict\") {\n    const { keys, vals } = val.v;\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\n    return `{${entries.join(\", \")}}`;\n  } else if (val.t === \"null\") {\n    return \"null\";\n  }\n  return `${val.v}`;\n};\n\nexport const asArray = (val: Val): Val[] =>\n  val.t === \"vec\"\n    ? slice(val.v)\n    : val.t === \"str\"\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\n    : val.t === \"dict\"\n    ? val.v.keys.map((k, i) => ({\n        t: \"vec\",\n        v: [k, val.v.vals[i]],\n      }))\n    : [];\n\nexport const toDict = (args: Val[]): Val => {\n  if (len(args) % 2 === 1) {\n    args.pop();\n  }\n  const keys = args.filter((_, i) => i % 2 === 0);\n  const vals = args.filter((_, i) => i % 2 === 1);\n  const ddKeys: Val[] = [],\n    ddVals: Val[] = [];\n  keys.forEach((key, i) => {\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\n    if (existingIdx === -1) {\n      ddKeys.push(key);\n      ddVals.push(vals[i]);\n    } else {\n      ddVals[existingIdx] = vals[i];\n    }\n  });\n  return {\n    t: \"dict\",\n    v: { keys: ddKeys, vals: ddVals },\n  };\n};\n\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\n  const idx = keys.findIndex(k => isEqual(k, key));\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\n};\n\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    nVals[idx] = val;\n  } else {\n    nKeys.push(key);\n    nVals.push(val);\n  }\n  return <Dict>{ keys: nKeys, vals: nVals };\n};\n\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    splice(nKeys, idx, 1);\n    splice(nVals, idx, 1);\n  }\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\n};\n\nexport function errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}","import { has, isArray, len } from \"./poly-fills\";\nimport { ErrCtx, Func, InvokeError, ops, typeNames, Val } from \"./types\";\nimport { assertUnreachable } from \"./types\";\nimport { dic, str, vec } from \"./val\";\n\nexport const asBoo = (val: Val) =>\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\n\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\n\nexport const isEqual = (a: Val, b: Val) => {\n  if (a.t !== b.t) {\n    return false;\n  }\n  switch (a.t) {\n    case \"null\":\n      return true;\n    case \"bool\":\n      return a.v === b.v;\n    case \"num\":\n      return a.v === b.v;\n    case \"vec\":\n      return isVecEqual(a.v, vec(b));\n    case \"dict\": {\n      const bd = dic(b);\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\n    }\n    case \"str\":\n    case \"ref\":\n    case \"key\":\n    case \"func\":\n      return str(a) === str(b);\n    case \"clo\":\n      return (<Func>a.v).name === (<Func>b.v).name;\n  }\n  return assertUnreachable(a);\n};\n\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\n  const { exactArity, maxArity, minArity } = ops[op];\n  const aErr = (msg: string, amount: number) => [\n    <InvokeError>{\n      e: \"Arity\",\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\n      errCtx,\n    },\n  ];\n  if (exactArity !== undefined) {\n    if (nArg !== exactArity) {\n      return aErr(`exactly ${exactArity}`, exactArity);\n    }\n  } else {\n    if (minArity && !maxArity && nArg < minArity) {\n      return aErr(`at least ${minArity}`, minArity);\n    } else if (!minArity && maxArity && nArg > maxArity) {\n      return aErr(`at most ${maxArity}`, maxArity);\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\n    }\n  }\n}\n\nexport function typeCheck(\n  op: string,\n  args: Val[\"t\"][][],\n  errCtx: ErrCtx,\n  optimistic = false,\n): InvokeError[] | undefined {\n  const { types, numeric: onlyNum } = ops[op];\n  const nArg = len(args);\n  if (onlyNum) {\n    const nonNumArgIdx = args.findIndex(\n      a =>\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\n    );\n    if (nonNumArgIdx === -1) {\n      return;\n    }\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\n    return [\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\n    ];\n  }\n  if (!types) {\n    return;\n  }\n  const typeViolations = types\n    .map((need, i) => {\n      if (i >= nArg || !args[i]) {\n        return false;\n      }\n      const argTypes = args[i]!;\n      if (isArray(need)) {\n        if (\n          optimistic\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\n            : len(argTypes) === 1 && has(need, argTypes[0])\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        const needs = need.map(t => typeNames[t]).join(\", \");\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\n      } else {\n        if (\n          optimistic\n            ? !len(argTypes) || has(argTypes, need)\n            : len(argTypes) === 1 && need === argTypes[0]\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\n      }\n    })\n    .filter(r => !!r);\n  return len(typeViolations)\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\n    : undefined;\n}\n\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\n  e: \"Type\",\n  m,\n  errCtx,\n});\n\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\nimport * as pf from \"./poly-fills\";\nconst { concat, has, flat, push, slice, splice } = pf;\nconst { slen, starts, sub, substr, strIdx } = pf;\nconst { isNum, len, toNum } = pf;\nimport { ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\nimport { assertUnreachable, InvokeError } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype NamedTokens = {\n  name: string;\n  tokens: Token[];\n  errCtx: ErrCtx;\n};\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\nconst nullVal: Val = { t: \"null\", v: undefined };\n\nexport function tokenise(\n  code: string,\n  sourceId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const digits = \"0123456789\";\n  let inString = false,\n    isEscaped = false,\n    inStringAt = [0, 0],\n    inSymbol = false,\n    inNumber = false,\n    inComment = false,\n    line = 1,\n    col = 0;\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (inComment) {\n      if (c === \"\\n\") {\n        inComment = false;\n        ++line;\n        col = 0;\n      } else if (emitComments) {\n        tokens[len(tokens) - 1].text += c;\n      }\n      continue;\n    }\n    if (isEscaped) {\n      isEscaped = false;\n      if (inString) {\n        tokens[len(tokens) - 1].text +=\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\n      }\n      continue;\n    }\n    if (c === \"\\\\\") {\n      isEscaped = true;\n      continue;\n    }\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({\n          typ: \"str\",\n          text: \"\",\n          errCtx: { sourceId: sourceId, line, col },\n        });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      inComment = true;\n      if (emitComments) {\n        tokens.push({\n          typ: \"rem\",\n          text: \"\",\n          errCtx: { sourceId: sourceId, line, col },\n        });\n      }\n      continue;\n    }\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\n    const isDigit = (ch: string) => sub(digits, ch);\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or convert into symbol\n    if (inNumber && !isDigit(c)) {\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const parens: { [ch: string]: Token[\"typ\"] } = {\n          \"[\": \"(\",\n          \"{\": \"(\",\n          \"(\": \"(\",\n          \")\": \")\",\n          \"}\": \")\",\n          \"]\": \")\",\n        };\n        const text = parens[c]!;\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps) {\n          if (c === \"[\") {\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\n          } else if (c === \"{\") {\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\n          }\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inSymbol = !inNumber;\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\nfunction segment(tokens: Token[]): Token[][] {\n  const segments: Token[][] = [[]];\n  let depth = 0;\n  tokens.forEach(token => {\n    segments[len(segments) - 1].push(token);\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\n    if (depth === 0) {\n      segments.push([]);\n    }\n  });\n  return segments;\n}\n\nfunction funcise(segments: Token[][]): NamedTokens[] {\n  const isFunc = (segment: Token[]) =>\n    len(segment) > 1 &&\n    segment[1].typ === \"sym\" &&\n    segment[1].text === \"function\";\n  const funcs = segments.filter(t => isFunc(t));\n  const entries = flat(segments.filter(t => !isFunc(t)));\n  const described = funcs.map(tokens => ({\n    name: tokens[2].text,\n    tokens: slice(tokens, 3),\n    errCtx: tokens[2].errCtx,\n  }));\n  return len(entries)\n    ? concat(described, [\n        {\n          name: \"entry\",\n          tokens: entries,\n          errCtx: entries[0].errCtx,\n        },\n      ])\n    : described;\n}\n\nfunction parseAllArgs(tokens: Token[], params: string[]) {\n  const body: ParserIns[] = [];\n  while (true) {\n    const exp = parseArg(tokens, params);\n    if (!len(exp)) {\n      break;\n    }\n    push(body, exp);\n  }\n  return body;\n}\n\nfunction parseForm(\n  tokens: Token[],\n  params: string[],\n  checkArity = true,\n): ParserIns[] {\n  const head = tokens.shift();\n  if (!head) {\n    return [];\n  }\n  const { typ, text, errCtx } = head;\n  let op = text;\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\n  if (op === \"catch\") {\n    if (tokens[0].typ !== \"(\") {\n      return err(\"argument 1 must be expression\");\n    }\n    const body = parseArg(tokens, params);\n    const when = parseAllArgs(tokens, params);\n    if (!len(body) || !len(when)) {\n      return err(\"must provide at least 2 arguments\");\n    }\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n  } else if (op === \"var\" || op === \"let\") {\n    const ins: Ins[] = [];\n    while (true) {\n      const defIns = parseArg(tokens, params);\n      if (len(ins) && !len(defIns)) {\n        return ins;\n      }\n      const val = parseArg(tokens, params);\n      if (!len(ins) && (!len(defIns) || !len(val))) {\n        return err(`must provide at least one declaration name and value`);\n      } else if (!len(val)) {\n        return err(`must provide a value after each declaration name`);\n      }\n      const def = defIns[0];\n      if (def.typ !== \"ref\") {\n        return err(\"declaration name must be symbol\");\n      }\n      push(ins, val);\n      ins.push({ typ: op, value: def.value, errCtx });\n    }\n  } else if (op === \"if\" || op === \"when\") {\n    const cond = parseArg(tokens, params);\n    if (!len(cond)) {\n      return err(\"must provide condition\");\n    }\n    const ins: ParserIns[] = cond;\n    if (op === \"if\") {\n      const ifT = parseArg(tokens, params);\n      if (!len(ifT)) {\n        return err(\"must provide a branch\");\n      }\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\n      push(ins, ifT);\n      const ifF = parseArg(tokens, params);\n      if (len(ifF)) {\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\n        push(ins, ifF);\n        if (len(parseArg(tokens, params))) {\n          return err(\"too many branches\");\n        }\n      } else {\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\n      }\n    } else {\n      const body = parseAllArgs(tokens, params);\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\n      push(ins, body);\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\n    }\n    return ins;\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\n    const args: ParserIns[][] = [];\n    let insCount = 0;\n    while (true) {\n      const arg = parseArg(tokens, params);\n      if (!len(arg)) {\n        break;\n      }\n      args.push(arg);\n      insCount += len(arg);\n    }\n    if (op === \"recur\") {\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\n    }\n    if (len(args) < 2) {\n      return err(\"requires at least two arguments\");\n    }\n    const ins: Ins[] = [];\n    if (op === \"while\") {\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\n      const head = args.shift()!;\n      push(ins, head);\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\n      args.forEach(as => push(ins, as));\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n      return ins;\n    }\n    insCount += len(args); //+1 for each if/or ins\n    insCount += toNum(op === \"and\");\n    const typ = op === \"and\" ? \"if\" : \"or\";\n    for (let a = 0; a < len(args); ++a) {\n      push(ins, args[a]);\n      insCount -= len(args[a]);\n      ins.push({ typ, value: insCount, errCtx });\n      --insCount;\n    }\n    if (op === \"and\") {\n      push(ins, [\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\n      ]);\n    } else {\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\n    }\n    return ins;\n  }\n  const headIns: Ins[] = [];\n  let nArgs = 0;\n  //Head is a form or parameter\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\n    tokens.unshift(head);\n    const ins = parseArg(tokens, params);\n    push(headIns, ins);\n  }\n  const body: Ins[] = [];\n  while (len(tokens)) {\n    const parsed = parseArg(tokens, params);\n    if (!len(parsed)) {\n      break;\n    }\n    ++nArgs;\n    push(body, parsed);\n  }\n  if (op === \"return\") {\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\n  }\n\n  //Operation arity check, optionally disabled for partial closures\n  if (ops[op] && checkArity) {\n    const errors = arityCheck(op, nArgs, errCtx);\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\n    if (!errors) {\n      //Upgrade some math and logic functions to their fast counterparts\n      if (nArgs === 2 && ops[`fast${op}`]) {\n        op = `fast${op}`;\n      }\n    }\n  }\n\n  if (len(headIns)) {\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  } else {\n    const value: Val =\n      typ === \"num\"\n        ? { t: \"num\", v: toNum(op) }\n        : starts(op, \":\")\n        ? { t: \"key\", v: op }\n        : ops[op]\n        ? { t: \"func\", v: op }\n        : op === \"true\" || op === \"false\"\n        ? { t: \"bool\", v: op === \"true\" }\n        : { t: \"str\", v: op };\n    headIns.push({ typ: \"val\", value, errCtx });\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  }\n  return [...body, ...headIns];\n}\n\nfunction parseArg(\n  tokens: Token[],\n  params: string[],\n  checkArity = true,\n): ParserIns[] {\n  if (!len(tokens)) {\n    return [];\n  }\n  const { typ, text, errCtx } = tokens.shift() as Token;\n  //Upon closure\n  if (\n    typ === \"sym\" &&\n    sub(\"#@\", text) &&\n    len(tokens) &&\n    tokens[0].typ === \"(\"\n  ) {\n    const texts = tokens.map(t => t.text);\n    const body = parseArg(tokens, params, text !== \"@\");\n    const err = body.find(t => t.typ === \"err\");\n    if (err) {\n      return [err];\n    }\n    const value: [string, Ins[]] = [\n      slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\n      <Ins[]>body,\n    ];\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\n  }\n  switch (typ) {\n    case \"str\":\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\n    case \"num\":\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\n    case \"sym\":\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(params, text)) {\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (text === \"PI\" || text === \"E\") {\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    case \"(\":\n      return parseForm(tokens, params, checkArity);\n    case \")\":\n    case \"rem\":\n      return [];\n    default:\n      return assertUnreachable(typ);\n  }\n}\n\nfunction syntaxise(\n  { name, tokens }: NamedTokens,\n  errCtx: ErrCtx,\n): [\"func\", Func] | [\"err\", InvokeError] {\n  const err = (m: string, eCtx = errCtx) =>\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\n  const firstNonParam = tokens.findIndex(\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\n  );\n  const params = slice(tokens, 0, firstNonParam);\n  const body = slice(tokens, firstNonParam);\n  //In the case of e.g. (function (+))\n  if (name === \"(\") {\n    return err(\"nameless function\");\n  }\n  //In the case of e.g. (function)\n  if (!len(params) && !len(body)) {\n    return err(\"empty function body\");\n  }\n  if (len(body) && body[0].typ === \")\") {\n    if (len(params)) {\n      //In the case of e.g. (function f %) or (function x y z)\n      body.unshift(params.pop()!);\n    } else {\n      //In the case of e.g. (function name)\n      return err(\"empty function body\");\n    }\n  }\n  //In the case of e.g. (function entry x y z)\n  if (len(params) && !len(body)) {\n    body.push(params.pop()!);\n  }\n  const ins: ParserIns[] = [];\n  while (len(body)) {\n    push(\n      ins,\n      parseArg(\n        body,\n        params.map(p => p.text),\n      ),\n    );\n  }\n  const parseError = ins.find(i => i.typ === \"err\");\n  if (parseError) {\n    return err(<string>parseError.value, parseError.errCtx);\n  }\n  return [\"func\", { name, ins: <Ins[]>ins }];\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\n    }\n  }\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\n  type TypeInfo = {\n    types?: Val[\"t\"][];\n    val?: Val;\n  };\n  const stack: TypeInfo[] = [];\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\n    const ins = fins[i];\n    switch (ins.typ) {\n      case \"val\":\n        stack.push({ types: [ins.value.t], val: ins.value });\n        break;\n      case \"exe\": {\n        const head = stack.pop()!;\n        const args = splice(stack, len(stack) - ins.value, ins.value);\n        const badMatch = (okTypes: Val[\"t\"][]) =>\n          args.findIndex(\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\n          );\n        const headIs = (t: Val[\"t\"]) =>\n          head.val\n            ? head.val.t === t\n            : head.types && len(head.types) === 1 && head.types[0] === t;\n        if (head.val && head.val.t === \"func\") {\n          const errors = typeCheck(\n            head.val.v,\n            args.map(a => a.types ?? []),\n            ins.errCtx,\n            true,\n          );\n          if (errors) {\n            return errors;\n          }\n          const { returns, numeric: onlyNum } = ops[head.val.v];\n          stack.push(\n            onlyNum && onlyNum !== \"in only\"\n              ? { types: [\"num\"] }\n              : { types: returns },\n          );\n        } else if (headIs(\"num\")) {\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return numOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"key\")) {\n          const badArg = badMatch([\"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return keyOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        }\n        break;\n      }\n      case \"cat\":\n      case \"or\":\n      case \"var\":\n      case \"let\":\n      case \"loo\":\n      case \"jmp\":\n        break;\n      case \"clo\":\n      case \"par\": {\n        const errors = insErrorDetect(ins.value[1]);\n        if (errors) {\n          return errors;\n        }\n      }\n      case \"ref\":\n      case \"npa\":\n      case \"upa\":\n        stack.push({});\n        break;\n      case \"if\": {\n        stack.pop();\n        stack.push({});\n        const ifIns = slice(fins, i + 1, ins.value + 1);\n        const errors = insErrorDetect(ifIns);\n        if (errors) {\n          return errors;\n        }\n        i += ins.value - 1;\n        break;\n      }\n      case \"pop\":\n      case \"rec\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          stack.pop();\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n}\n\nexport function parse(\n  code: string,\n  sourceId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, sourceId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const segments = segment(tokens);\n  const labelled = funcise(segments);\n  const funcsAndErrors = labelled.map(named =>\n    syntaxise(named, {\n      sourceId: sourceId,\n      line: named.errCtx.line,\n      col: named.errCtx.col,\n    }),\n  );\n  const okFuncs: Func[] = [],\n    errors: InvokeError[] = [];\n  funcsAndErrors.forEach(fae => {\n    if (fae[0] === \"err\") {\n      errors.push(fae[1]);\n    } else {\n      okFuncs.push(fae[1]);\n    }\n  });\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name] = func));\n  return { errors, funcs };\n}\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\nimport { Ctx, Env, InvokeError, Val, ValAndErr } from \"./types\";\n\ntype State = { dict: Map<string, Val>; output: string };\n\nasync function get(state: State, key: string): Promise<ValAndErr> {\n  if (!state.dict.has(key)) {\n    return { kind: \"err\", err: `\"${key} not found.` };\n  }\n  return { kind: \"val\", value: state.dict.get(key)! };\n}\n\nasync function set(\n  state: State,\n  key: string,\n  val: Val,\n): Promise<string | undefined> {\n  state.dict.set(key, val);\n  return undefined;\n}\n\nasync function exe(\n  state: State,\n  name: string,\n  args: Val[],\n): Promise<ValAndErr> {\n  const nullVal: Val = { t: \"null\", v: undefined };\n  switch (name) {\n    case \"print-str\":\n      state.output += args[0].v;\n      break;\n    case \"print\":\n    case \"test.function\":\n      state.output += args[0].v + \"\\n\";\n      break;\n    default:\n      return { kind: \"err\", err: `operation ${name} does not exist` };\n  }\n  return { kind: \"val\", value: nullVal };\n}\n\nconst tests: {\n  name: string;\n  code: string;\n  err?: string[];\n  out?: string;\n}[] = [\n  //Basic snippets\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\n  {\n    name: \"Say Hello, world!\",\n    code: `(print \"Hello, world!\")`,\n    out: `Hello, world!\\nnull`,\n  },\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\n  {\n    name: \"Whens\",\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\n    out: `hi\\n[234 null]`,\n  },\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\n  {\n    name: \"and & short-circuit\",\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\n    out: `[false true]`,\n  },\n  {\n    name: \"or & short-circuit\",\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\n    out: `-> [true 1]`,\n  },\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\n  {\n    name: \"Key as operation\",\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\n    out: `[24 :abc]`,\n  },\n  {\n    name: \"Dictionary as op 1\",\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 2\",\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\n  },\n  {\n    name: \"Equalities\",\n    code: `[(= 1 2 1)\n            (!= 1 2 1)\n            (= \"Hello\" \"hello\")\n            (!= \"world\" \"world\")\n            (= [0 [1]] [0 [1]])]`,\n    out: `[false 1 false false [0 [1]]]`,\n  },\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\n  {\n    name: \"Define num and call\",\n    code: `(var f 1) (f [:a :b :c])`,\n    out: `:b`,\n  },\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\n  {\n    name: \"Sum vector of numbers\",\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\n    out: `[6 9]`,\n  },\n  {\n    name: \"Sum vectors of numbers\",\n    code: `(map + [1 2 3] [1 2 3 4])`,\n    out: `[2 4 6]`,\n  },\n  {\n    name: \"Filter by integer\",\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\n    out: `[[:a :b :c] \"hello\"]`,\n  },\n  {\n    name: \"Comments, short decimal\",\n    code: `;((print \"Hello\")\n           .456`,\n    out: `0.456`,\n  },\n  {\n    name: \"Dictionary into vector\",\n    code: `(into [1 2] {3 4 5 6})`,\n    out: `[1 2 [3 4] [5 6]]`,\n  },\n  {\n    name: \"Vector into dictionary\",\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\n    out: `{[0] 2, [2] 3}`,\n  },\n  {\n    name: \"While loop\",\n    code: `(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))`,\n    out: `543210`,\n  },\n  {\n    name: \"Catch error\",\n    code: `(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print \"hi\"))`,\n    out: `Type`,\n  },\n  //Basic functions and closures\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\n  {\n    name: \"Call greet func\",\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\n    out: `Hello!\\nnull`,\n  },\n  {\n    name: \"Call const value func\",\n    code: `(function const 123) (const)`,\n    out: `123`,\n  },\n  {\n    name: \"Call identity funcs\",\n    code: `(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]`,\n    out: `[123 456]`,\n  },\n  {\n    name: \"Call greet with name\",\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\n           (greeting \"Patrick\")`,\n    out: `Hello, Patrick!\\nnull`,\n  },\n  {\n    name: \"Call with too few args\",\n    code: `(function func a b c [a b c]) (func 1 2)`,\n    out: `[1 2 null]`,\n  },\n  {\n    name: \"Define func and call\",\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Anonymous parameters\",\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)`,\n    out: `false`,\n  },\n  {\n    name: \"Call parameter\",\n    code: `(function f x (x \"hello\")) (f print)`,\n    out: `hello\\nnull`,\n  },\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\n  {\n    name: \"Let num op and call\",\n    code: `(function f (let n 0) (n [1])) (f)`,\n    out: `1`,\n  },\n  {\n    name: \"Explicit return\",\n    code: `(function f (return 123) (print 456)) (f)`,\n    out: `123`,\n  },\n  {\n    name: \"Closure 1\",\n    code: `(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)`,\n    out: `20`,\n  },\n  {\n    name: \"Closure 2\",\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\n    out: `[0 2 4 5 6 8]`,\n  },\n  {\n    name: \"Closure 3\",\n    code: `(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]`,\n    out: `[20 40]`,\n  },\n  {\n    name: \"Func returns closure\",\n    code: `(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)`,\n    out: `4`,\n  },\n  {\n    name: \"Dictionary closure\",\n    code: `(function f x #{x 2})\n           (let closure (f :a))\n           (closure)`,\n    out: `{:a 2}`,\n  },\n  {\n    name: \"Vector closure\",\n    code: `(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Closure as head\",\n    code: `(#[% %1 %2] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 1\",\n    code: `(@[] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  //Runtime errors\n  {\n    name: \"String instead of number\",\n    code: `(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 \"hi\")`,\n    out: `4`,\n    err: [\"Type\"],\n  },\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\n  {\n    name: \"Expired let retrieve\",\n    code: `(function f (let a 1) a) (f) a`,\n    err: [\"Reference\"],\n  },\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\n  {\n    name: \"Loop budget\",\n    code: `(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))`,\n    err: [\"Budget\"],\n  },\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\n  //Complex functions\n  {\n    name: \"Fibonacci 13\",\n    code: `(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)`,\n    out: `233`,\n  },\n  {\n    name: \"dedupe (recur)\",\n    code: `(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])`,\n    out: `[1 2 3]`,\n  },\n  //Test environment functions\n  {\n    name: \"set get\",\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\n    out: `[5.5 5.5]`,\n  },\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\n  //Syntax errors\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\n  {\n    name: \"Imbalanced quotes 1\",\n    code: `(print \"Hello)`,\n    err: [\"Parse\", \"Parse\"],\n  },\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\n  //Parser type-errors\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\n  {\n    name: \"Parser type error 2\",\n    code: `(function f (+ 1 (into {} {})))`,\n    err: [\"Type\"],\n  },\n  {\n    name: \"Parser type error 3\",\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\n    err: [\"Type\"],\n  },\n];\n\nexport async function doTests(\n  invoke: (\n    ctx: Ctx,\n    code: string,\n    sourceId: string,\n    print: boolean,\n  ) => Promise<InvokeError[]>,\n  terse = true,\n): Promise<string[]> {\n  const results: {\n    okErr: boolean;\n    okOut: boolean;\n    elapsedMs: number;\n    display: string;\n  }[] = [];\n  for (let t = 0; t < len(tests); ++t) {\n    const { name, code, err, out } = tests[t];\n    const state: State = {\n      dict: new Map<string, Val>(),\n      output: \"\",\n    };\n    const env: Env = { funcs: {}, vars: {} };\n    const startTime = getTimeMs();\n    const errors = await invoke(\n      {\n        get: (key: string) => get(state, key),\n        set: (key: string, val: Val) => set(state, key, val),\n        exe: (name: string, args: Val[]) => exe(state, name, args),\n        env,\n        loopBudget: 10000,\n        rangeBudget: 1000,\n        callBudget: 1000,\n        recurBudget: 10000,\n      },\n      code,\n      \"testing\",\n      true,\n    );\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\n    const okOut = !out || trim(state.output) === out;\n    const elapsedMs = getTimeMs() - startTime;\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\n      padEnd(`${t + 1}`, 3),\n      padEnd(name, 24),\n      padEnd(`${elapsedMs}ms`, 6),\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\n      okErr ||\n        errors.map(\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\n        ),\n    ];\n    results.push({\n      okErr,\n      okOut,\n      elapsedMs,\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\n    });\n  }\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\n  return concat(\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\n  );\n}\n","export const insituxVersion = 20211011;\nimport { asBoo, isEqual } from \"./checks\";\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\nimport { parse } from \"./parse\";\nimport * as pf from \"./poly-fills\";\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\nconst { logn, log2, log10 } = pf;\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\nconst { trim, trimStart, trimEnd } = pf;\nconst { getTimeMs, randInt, randNum } = pf;\nconst { isNum, len, objKeys, range, toNum } = pf;\nimport { doTests } from \"./test\";\nimport { assertUnreachable, typeNames, InvokeError } from \"./types\";\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops } from \"./types\";\nimport { asArray, num, str, stringify, toDict, val2str, vec } from \"./val\";\nimport { dic, dictDrop, dictGet, dictSet } from \"./val\";\n\nlet stack: Val[] = [];\nlet lets: { [key: string]: Val }[] = [];\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\nconst _num = (v: number) => stack.push({ t: \"num\", v });\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\n\nasync function exeOp(\n  op: string,\n  args: Val[],\n  ctx: Ctx,\n  errCtx: ErrCtx,\n  checkArity: boolean,\n): Promise<InvokeError[] | undefined> {\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\n  //Optional arity check\n  if (checkArity) {\n    const violations = arityCheck(op, len(args), errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n  //Argument type check\n  {\n    const violations = typeCheck(\n      op,\n      args.map(a => [a.t]),\n      errCtx,\n    );\n    if (violations) {\n      return violations;\n    }\n  }\n\n  switch (op) {\n    case \"str\":\n      stack.push({\n        t: \"str\",\n        v: stringify(args),\n      });\n      return;\n    case \"print\":\n    case \"print-str\":\n      {\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\n        _nul();\n      }\n      return;\n    case \"vec\":\n      _vec(args);\n      return;\n    case \"dict\": {\n      stack.push(toDict(args));\n      return;\n    }\n    case \"len\":\n      _num(\n        args[0].t === \"str\"\n          ? slen(args[0].v)\n          : args[0].t === \"vec\"\n          ? len(args[0].v)\n          : len(dic(args[0]).keys),\n      );\n      return;\n    case \"to-num\":\n      if (isNum(args[0].v)) {\n        _num(toNum(args[0].v));\n      } else {\n        _nul();\n      }\n      return;\n    case \"to-key\":\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\n      return;\n    case \"!\":\n      _boo(!asBoo(args[0]));\n      return;\n    case \"=\":\n    case \"!=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\n          _boo(false);\n          return;\n        }\n      }\n      stack.push(args[0]);\n      return;\n    case \"-\":\n      _num(\n        len(args) === 1\n          ? -num(args[0])\n          : args.map(num).reduce((sum, n) => sum - n),\n      );\n      return;\n    case \"**\":\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\n      return;\n    case \"+\":\n      _num(args.map(num).reduce((sum, n) => sum + n));\n      return;\n    case \"*\":\n      _num(args.map(num).reduce((sum, n) => sum * n));\n      return;\n    case \"/\":\n      _num(args.map(num).reduce((sum, n) => sum / n));\n      return;\n    case \"//\":\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\n      return;\n    case \"fast=\":\n    case \"fast!=\":\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\n        _boo(false);\n        return;\n      }\n      stack.push(args[0]);\n      return;\n    case \"fast-\":\n      _num(<number>args[0].v - <number>args[1].v);\n      return;\n    case \"fast+\":\n      _num(<number>args[0].v + <number>args[1].v);\n      return;\n    case \"fast*\":\n      _num(<number>args[0].v * <number>args[1].v);\n      return;\n    case \"fast/\":\n      _num(<number>args[0].v / <number>args[1].v);\n      return;\n    case \"fast//\":\n      _num(floor(<number>args[0].v / <number>args[1].v));\n      return;\n    case \"fast<\":\n      _boo(<number>args[0].v < <number>args[1].v);\n      return;\n    case \"fast>\":\n      _boo(<number>args[0].v > <number>args[1].v);\n      return;\n    case \"fast<=\":\n      _boo(<number>args[0].v <= <number>args[1].v);\n      return;\n    case \"fast>=\":\n      _boo(<number>args[0].v >= <number>args[1].v);\n      return;\n    case \"rem\":\n      _num(args.map(num).reduce((sum, n) => sum % n));\n      return;\n    case \"min\":\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\n      return;\n    case \"max\":\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\n      return;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\n        if (\n          (op === \"<\" && a >= b) ||\n          (op === \">\" && a <= b) ||\n          (op === \"<=\" && a > b) ||\n          (op === \">=\" && a < b)\n        ) {\n          _boo(false);\n          return;\n        }\n      }\n      _boo(true);\n      return;\n    case \"inc\":\n      _num(<number>args[0].v + 1);\n      return;\n    case \"dec\":\n      _num(<number>args[0].v - 1);\n      return;\n    case \"abs\":\n      _num(abs(<number>args[0].v));\n      return;\n    case \"round\":\n      if (len(args) === 2) {\n        const x = 10 ** <number>args[1].v;\n        _num(round(<number>args[0].v * x) / x);\n      } else {\n        _num(round(<number>args[0].v));\n      }\n      return;\n    case \"sin\":\n    case \"cos\":\n    case \"tan\":\n    case \"sqrt\":\n    case \"floor\":\n    case \"ceil\":\n    case \"logn\":\n    case \"log2\":\n    case \"log10\":\n      _num(\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\n          num(args[0]),\n        ),\n      );\n      return;\n    case \"and\":\n      _boo(args.every(asBoo));\n      return;\n    case \"or\":\n      _boo(args.some(asBoo));\n      return;\n    case \"odd?\":\n    case \"even?\":\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\n      return;\n    case \"pos?\":\n    case \"neg?\":\n    case \"zero?\": {\n      const n = num(args[0]);\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\n      return;\n    }\n    case \"null?\":\n    case \"num?\":\n    case \"bool?\":\n    case \"str?\":\n    case \"dict?\":\n    case \"vec?\":\n    case \"key?\":\n    case \"func?\":\n      _boo(\n        (op === \"null?\" && args[0].t === \"null\") ||\n          (op === \"num?\" && args[0].t === \"num\") ||\n          (op === \"bool?\" && args[0].t === \"bool\") ||\n          (op === \"str?\" && args[0].t === \"str\") ||\n          (op === \"dict?\" && args[0].t === \"dict\") ||\n          (op === \"vec?\" && args[0].t === \"vec\") ||\n          (op === \"key?\" && args[0].t === \"key\") ||\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\n      );\n      return;\n    case \"has?\":\n      _boo(sub(str(args[0]), str(args[1])));\n      return;\n    case \"idx\": {\n      let i = -1;\n      if (args[0].t === \"str\") {\n        if (args[1].t !== \"str\") {\n          return tErr(\"strings can only contain strings\");\n        }\n        if (len(args) < 3) {\n          i = subIdx(args[0].v, args[1].v);\n        } else {\n          const arr = args[0].v.split(\"\");\n          arr[num(args[2])] = args[1].v;\n          _str(arr.join(\"\"));\n          return;\n        }\n      } else if (args[0].t === \"vec\") {\n        if (len(args) < 3) {\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\n        } else {\n          const v = slice(args[0].v);\n          v[num(args[2])] = args[1];\n          _vec(v);\n          return;\n        }\n      }\n      if (i === -1) {\n        _nul();\n      } else {\n        _num(i);\n      }\n      return;\n    }\n    case \"map\":\n    case \"for\":\n    case \"reduce\":\n    case \"filter\":\n    case \"remove\":\n    case \"find\":\n    case \"count\":\n      {\n        const closure = getExe(ctx, args.shift()!, errCtx);\n        const okT = (t: Val[\"t\"]) => t === \"vec\" || t === \"str\" || t === \"dict\";\n        const badArg =\n          op === \"map\" || op === \"for\"\n            ? args.findIndex(({ t }) => !okT(t))\n            : okT(args[0].t)\n            ? -1\n            : 0;\n        if (badArg !== -1) {\n          const badType = typeNames[args[badArg].t];\n          return tErr(\n            `argument 2 must be either: string, vector, dictionary, not ${badType}`,\n          );\n        }\n\n        if (op === \"for\") {\n          const arrays = args.map(asArray);\n          const lims = arrays.map(len);\n          const divisors = lims.map((_, i) =>\n            slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\n          );\n          divisors.unshift(1);\n          const lim = divisors.pop()!;\n          if (lim > ctx.loopBudget) {\n            return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\n          }\n          const array: Val[] = [];\n          for (let t = 0; t < lim; ++t) {\n            const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\n            const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\n            if (errors) {\n              return errors;\n            }\n            array.push(stack.pop()!);\n          }\n          _vec(array);\n          return;\n        }\n\n        if (op === \"map\") {\n          const arrays = args.map(asArray);\n          const shortest = min(...arrays.map(len));\n          const array: Val[] = [];\n          for (let i = 0; i < shortest; ++i) {\n            const errors = await closure(arrays.map(a => a[i]));\n            if (errors) {\n              return errors;\n            }\n            array.push(stack.pop()!);\n          }\n          _vec(array);\n          return;\n        }\n\n        const array = asArray(args.shift()!);\n        if (op !== \"reduce\") {\n          const isRemove = op === \"remove\",\n            isFind = op === \"find\",\n            isCount = op === \"count\";\n          const filtered: Val[] = [];\n          let count = 0;\n          for (let i = 0, lim = len(array); i < lim; ++i) {\n            const errors = await closure([array[i], ...args]);\n            if (errors) {\n              return errors;\n            }\n            const b = asBoo(stack.pop()!);\n            if (isCount) {\n              count += b ? 1 : 0;\n              continue;\n            }\n            if (isFind && b) {\n              stack.push(array[i]);\n              return;\n            }\n            if (!isFind && b !== isRemove) {\n              filtered.push(array[i]);\n            }\n          }\n          switch (op) {\n            case \"count\":\n              _num(count);\n              return;\n            case \"find\":\n              _nul();\n              return;\n            default:\n              _vec(filtered);\n              return;\n          }\n        }\n\n        if (!len(array)) {\n          if (len(args)) {\n            stack.push(args[0]);\n          } else {\n            _vec();\n          }\n          return;\n        }\n        if (len(array) < 2 && !len(args)) {\n          push(stack, array);\n          return;\n        }\n\n        let reduction: Val = (len(args) ? args : array).shift()!;\n        for (let i = 0, lim = len(array); i < lim; ++i) {\n          const errors = await closure([reduction, array[i]]);\n          if (errors) {\n            return errors;\n          }\n          reduction = stack.pop()!;\n        }\n        stack.push(reduction);\n      }\n      return;\n    case \"rand-int\":\n    case \"rand\":\n      {\n        const nArgs = len(args);\n        const [a, b] = [\n          nArgs < 2 ? 0 : num(args[0]),\n          nArgs === 0\n            ? 1 + toNum(op === \"rand-int\")\n            : nArgs === 1\n            ? num(args[0])\n            : num(args[1]),\n        ];\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\n      }\n      return;\n    case \"do\":\n    case \"val\":\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\n      return;\n    case \"..\":\n    case \"...\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      let flatArgs: Val[] = args;\n      if (op === \"..\") {\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\n      } else {\n        const a = flatArgs.pop()!;\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\n      }\n      return await closure(flatArgs);\n    }\n    case \"into\": {\n      if (args[0].t === \"vec\") {\n        _vec(concat(args[0].v, asArray(args[1])));\n      } else {\n        if (args[1].t === \"vec\") {\n          stack.push(\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\n          );\n        } else {\n          const { keys, vals } = dic(args[0]);\n          const d1 = dic(args[1]);\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\n        }\n      }\n      return;\n    }\n    case \"push\": {\n      if (args[0].t === \"vec\") {\n        const v = args[0].v;\n        if (len(args) < 3) {\n          _vec(concat(v, [args[1]]));\n        } else {\n          const n = num(args[2]);\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\n        }\n      } else {\n        if (len(args) < 3) {\n          stack.push(dictDrop(dic(args[0]), args[1]));\n        } else {\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\n        }\n      }\n      return;\n    }\n    case \"sect\": {\n      const v = args[0];\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\n      let a = 0,\n        b = vlen;\n      switch (len(args)) {\n        case 1:\n          a = 1;\n          break;\n        case 2: {\n          const del = num(args[1]);\n          if (del < 0) {\n            b += del;\n          } else {\n            a += del;\n          }\n          break;\n        }\n        case 3: {\n          const skip = num(args[1]);\n          const take = num(args[2]);\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\n          b = (take < 0 ? b : a) + take;\n          break;\n        }\n      }\n      a = max(a, 0);\n      b = min(b, vlen);\n      if (a > b) {\n        (v.t === \"vec\" ? _vec : _str)();\n        return;\n      }\n      if (v.t === \"vec\") {\n        _vec(slice(v.v, a, b));\n      } else {\n        _str(substr(str(args[0]), a, b - a));\n      }\n      return;\n    }\n    case \"reverse\":\n      if (args[0].t === \"str\") {\n        _str(stringify(reverse(asArray(args[0]))));\n      } else {\n        _vec(reverse(asArray(args[0])));\n      }\n      return;\n    case \"sort\": {\n      if (!len(vec(args[0]))) {\n        _vec();\n        return;\n      }\n      const src = asArray(args[0]);\n      const mapped: Val[][] = [];\n      if (len(args) === 1) {\n        push(\n          mapped,\n          src.map(v => [v, v]),\n        );\n      } else {\n        const closure = getExe(ctx, args.pop()!, errCtx);\n        for (let i = 0, lim = len(src); i < lim; ++i) {\n          const errors = await closure([src[i]]);\n          if (errors) {\n            return errors;\n          }\n          mapped.push([src[i], stack.pop()!]);\n        }\n      }\n      const okT = mapped[0][1].t;\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\n        return tErr(\"can only sort by all number or all string\");\n      }\n      if (mapped[0][1].t === \"num\") {\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\n      } else {\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\n      }\n      _vec(mapped.map(([v]) => v));\n      return;\n    }\n    case \"range\": {\n      const [a, b, s] = args.map(num);\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\n      const [x, y] =\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\n      const step = sign((y - x) * (s || 1)) * (s || 1);\n      const count = ceil(abs((y - x) / step));\n      if (!count) {\n        _vec([]);\n        return;\n      }\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"range budget depleted\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      const nums = range(count).map(n => n * step + x);\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\n      return;\n    }\n    case \"empty?\":\n      _boo(!len(asArray(args[0])));\n      return;\n    case \"keys\":\n    case \"vals\":\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\n      return;\n    case \"split\":\n      _vec(\n        str(args[0])\n          .split(len(args) > 1 ? str(args[1]) : \" \")\n          .map(v => <Val>{ t: \"str\", v }),\n      );\n      return;\n    case \"join\":\n      _str(\n        vec(args[0])\n          .map(val2str)\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\n      );\n      return;\n    case \"starts-with?\":\n    case \"ends-with?\":\n      _boo((op === \"starts-with?\" ? starts : ends)(str(args[0]), str(args[1])));\n      return;\n    case \"upper-case\":\n    case \"lower-case\":\n    case \"trim\":\n    case \"trim-start\":\n    case \"trim-end\":\n      _str(\n        (op === \"upper-case\"\n          ? upperCase\n          : op === \"lower-case\"\n          ? lowerCase\n          : op === \"trim\"\n          ? trim\n          : op === \"trim-start\"\n          ? trimStart\n          : trimEnd)(str(args[0])),\n      );\n      return;\n    case \"str*\": {\n      const text = str(args[0]);\n      _str(\n        range(max(num(args[1]), 0))\n          .map(n => text)\n          .join(\"\"),\n      );\n      return;\n    }\n    case \"time\":\n      _num(getTimeMs());\n      return;\n    case \"version\":\n      _num(insituxVersion);\n      return;\n    case \"tests\":\n      _str((await doTests(invoke, !(len(args) && asBoo(args[0])))).join(\"\\n\"));\n      return;\n    case \"symbols\":\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\n      return;\n    case \"eval\": {\n      delete ctx.env.funcs[\"entry\"];\n      const sLen = len(stack);\n      const sourceId = `${errCtx.sourceId} eval`;\n      const errors = await parseAndExe(ctx, str(args[0]), sourceId);\n      if (errors) {\n        return [\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\n          ...errors,\n        ];\n      }\n      if (sLen === len(stack)) {\n        _nul();\n      }\n      return;\n    }\n    case \"reset\":\n      ctx.env.vars = {};\n      ctx.env.funcs = {};\n      lets = [];\n      _nul();\n      return;\n  }\n\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\n}\n\nfunction getExe(\n  ctx: Ctx,\n  op: Val,\n  errCtx: ErrCtx,\n  checkArity = true,\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\n  const monoArityError = [{ e: \"Arity\", m: `one argument required`, errCtx }];\n  if (op.t === \"str\" || op.t === \"func\") {\n    const name = op.v;\n    if (ops[name]) {\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\n    }\n    if (name in ctx.env.funcs) {\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\n    }\n    if (name in ctx.env.vars) {\n      return getExe(ctx, ctx.env.vars[name], errCtx);\n    }\n    if (name in lets[len(lets) - 1]) {\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\n    }\n    if (starts(name, \"$\")) {\n      return async (params: Val[]) => {\n        if (!len(params)) {\n          return monoArityError;\n        }\n        const err = await ctx.set(substr(name, 1), params[0]);\n        stack.push(params[0]);\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n      };\n    }\n    return async (params: Val[]) => {\n      const valAndErr = await ctx.exe(name, params);\n      if (valAndErr.kind === \"val\") {\n        stack.push(valAndErr.value);\n        return;\n      }\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\n    };\n  } else if (op.t === \"clo\") {\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\n  } else if (op.t === \"key\") {\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      if (params[0].t === \"dict\") {\n        stack.push(dictGet(dic(params[0]), op));\n      } else if (params[0].t === \"vec\") {\n        const found = vec(params[0]).find(v => isEqual(v, op));\n        stack.push(found ?? { t: \"null\", v: undefined });\n      } else {\n        return keyOpErr(errCtx, [params[0].t]);\n      }\n      return;\n    };\n  } else if (op.t === \"num\") {\n    const n = floor(op.v);\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const a = params[0];\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\n        return numOpErr(errCtx, [a.t]);\n      }\n      const arr = asArray(a);\n      if (abs(n) >= len(arr)) {\n        _nul();\n      } else if (n < 0) {\n        stack.push(arr[len(arr) + n]);\n      } else {\n        stack.push(arr[n]);\n      }\n      return;\n    };\n  } else if (op.t === \"vec\") {\n    const { v } = op;\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const found = v.find(val => isEqual(val, params[0]));\n      if (found) {\n        stack.push(found);\n      } else {\n        _nul();\n      }\n      return;\n    };\n  } else if (op.t === \"dict\") {\n    const dict = op.v;\n    return async (params: Val[]) => {\n      if (len(params) === 1) {\n        stack.push(dictGet(dict, params[0]));\n      } else if (len(params) === 2) {\n        _dic(dictSet(dict, params[0], params[1]));\n      } else {\n        return [\n          {\n            e: \"Arity\",\n            m: \"dictionary as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      return;\n    };\n  } else if (op.t === \"bool\") {\n    const cond = op.v;\n    return async (params: Val[]) => {\n      if (!len(params) || len(params) > 2) {\n        return [\n          {\n            e: \"Arity\",\n            m: \"boolean as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      stack.push(\n        cond\n          ? params[0]\n          : len(params) > 1\n          ? params[1]\n          : { t: \"null\", v: undefined },\n      );\n      return;\n    };\n  }\n  return async _ => [\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\n  ];\n}\n\nfunction errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n\nasync function exeFunc(\n  ctx: Ctx,\n  func: Func,\n  args: Val[],\n  inClosure = false,\n): Promise<InvokeError[] | undefined> {\n  --ctx.callBudget;\n  if (!inClosure) {\n    lets.push({});\n  }\n  const stackLen = len(stack);\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\n    const ins = func.ins[i];\n    const { errCtx } = func.ins[i];\n\n    const tooManyLoops = ctx.loopBudget < 1;\n    if (tooManyLoops || ctx.callBudget < 1) {\n      return [\n        {\n          e: \"Budget\",\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\n          errCtx,\n        },\n      ];\n    }\n\n    switch (ins.typ) {\n      case \"val\":\n        stack.push(ins.value);\n        break;\n      case \"var\":\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\n        break;\n      case \"let\":\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\n        break;\n      case \"npa\":\n      case \"upa\":\n        {\n          const paramIdx = ins.value;\n          if (paramIdx === -1) {\n            _vec(args);\n          } else if (len(args) <= paramIdx) {\n            _nul();\n          } else {\n            stack.push(args[paramIdx]);\n          }\n        }\n        break;\n      case \"ref\":\n        {\n          const name = ins.value;\n          if (ops[name]) {\n            _fun(name);\n          } else if (starts(name, \"$\")) {\n            const valAndErr = await ctx.get(substr(name, 1));\n            if (valAndErr.kind === \"err\") {\n              return [{ e: \"External\", m: valAndErr.err, errCtx }];\n            }\n            stack.push(valAndErr.value);\n          } else if (name in ctx.env.vars) {\n            stack.push(ctx.env.vars[name]);\n          } else if (name in lets[len(lets) - 1]) {\n            stack.push(lets[len(lets) - 1][name]);\n          } else if (name in ctx.env.funcs) {\n            _fun(name);\n          } else {\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\n          }\n        }\n        break;\n      case \"exe\":\n        {\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\n          const nArgs = ins.value;\n          const params = splice(stack, len(stack) - nArgs, nArgs);\n          const errors = await closure(params);\n          if (errors) {\n            //Find next catch statement\n            const nextCat = slice(func.ins, i).findIndex(\n              ins => ins.typ === \"cat\",\n            );\n            if (nextCat !== -1) {\n              i += nextCat;\n              lets[len(lets) - 1][\"errors\"] = {\n                t: \"vec\",\n                v: errorsToDict(errors),\n              };\n              break;\n            }\n            return errors;\n          }\n        }\n        break;\n      case \"or\":\n        if (asBoo(stack[len(stack) - 1])) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      case \"if\":\n        if (!asBoo(stack.pop()!)) {\n          i += ins.value;\n        }\n        break;\n      case \"jmp\":\n      case \"cat\":\n        i += ins.value;\n        break;\n      case \"loo\":\n        i += ins.value;\n        --ctx.loopBudget;\n        break;\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          splice(stack, 0, len(stack) - 1);\n        } else {\n          _nul();\n        }\n        i = lim;\n        break;\n      case \"rec\":\n        {\n          lets[len(lets) - 1] = {};\n          i = -1;\n          const nArgs = ins.value;\n          args = splice(stack, len(stack) - nArgs, nArgs);\n          --ctx.recurBudget;\n          if (!ctx.recurBudget) {\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\n          }\n        }\n        continue;\n      case \"clo\":\n      case \"par\":\n        {\n          const name = ins.value[0];\n          let cins = ins.value[1];\n          const isCapture = ({ typ, value }: Ins, i: number) =>\n            (typ === \"ref\" &&\n              !cins.find(i => i.typ === \"let\" && i.value === value)) ||\n            typ === \"npa\" ||\n            (typ === \"val\" && i + 1 !== len(cins) && cins[i + 1].typ === \"exe\");\n          const derefFunc: Func = {\n            name: \"\",\n            ins: cins\n              .map((ins, i) => {\n                if (i + 1 === len(cins)) {\n                  return ins;\n                }\n                const possibleLet =\n                  ins.typ === \"val\" &&\n                  ins.value.t === \"str\" &&\n                  cins[i + 1].typ === \"exe\" &&\n                  lets[len(lets) - 1][ins.value.v];\n                return possibleLet\n                  ? <Ins>{ typ: \"val\", value: possibleLet }\n                  : ins;\n              })\n              .filter(isCapture),\n          };\n          const errors = await exeFunc(ctx, derefFunc, args, true);\n          if (errors) {\n            return errors;\n          }\n          const numIns = len(derefFunc.ins);\n          const captures = splice(stack, len(stack) - numIns, numIns);\n          cins = cins.map((ins, i) =>\n            isCapture(ins, i)\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\n              : ins,\n          );\n          //Rewrite partial closure to #(... func [args] args)\n          if (ins.typ === \"par\") {\n            const { value: exeNumArgs, errCtx } = cins.pop()!;\n            cins.unshift(cins.pop()!);\n            cins.push({ typ: \"upa\", value: -1, errCtx });\n            cins.push({\n              typ: \"val\",\n              value: <Val>{ t: \"str\", v: \"...\" },\n              errCtx,\n            });\n            cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\n          }\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n  if (!inClosure) {\n    lets.pop();\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\n  }\n  return;\n}\n\nasync function parseAndExe(\n  ctx: Ctx,\n  code: string,\n  sourceId: string,\n): Promise<InvokeError[] | undefined> {\n  const parsed = parse(code, sourceId);\n  if (len(parsed.errors)) {\n    return parsed.errors;\n  }\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\n  if (!(\"entry\" in ctx.env.funcs)) {\n    return;\n  }\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\n}\n\n/**\n * Parses and executes the given code.\n * @param ctx An environment context you retain.\n * @param code The code you want to have parsed and executed.\n * @param sourceId A unique ID for this source, used in immediate or future errors.\n * @param printResult Whether you want to automatically print the final returned value of this invocation.\n * @returns Invocation errors caused during execution of the code.\n */\nexport async function invoke(\n  ctx: Ctx,\n  code: string,\n  sourceId: string,\n  printResult = false,\n): Promise<InvokeError[]> {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  const errors = await parseAndExe(ctx, code, sourceId);\n  ctx.callBudget = callBudget;\n  ctx.recurBudget = recurBudget;\n  ctx.loopBudget = loopBudget;\n  ctx.rangeBudget = rangeBudget;\n  delete ctx.env.funcs[\"entry\"];\n  if (!errors && printResult && len(stack)) {\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(stack[len(stack) - 1]) }]);\n  }\n  stack = [];\n  lets = [];\n  return errors ?? [];\n}\n\n/**\n * Executes a user-defined Insitux function by name.\n * @param ctx An environment context you retain.\n * @param funcName The function you want to execute.\n * @param args The arguments you want to pass to the function.\n * @returns Invocation errors caused during execution of the function, or undefined if the function was not found.\n */\nexport async function invokeFunction(\n  ctx: Ctx,\n  funcName: string,\n  args: Val[],\n): Promise<undefined | InvokeError[]> {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  if (!(funcName in ctx.env.funcs)) {\n    return;\n  }\n  const errors = await exeFunc(ctx, ctx.env.funcs[funcName], args);\n  ctx.callBudget = callBudget;\n  ctx.recurBudget = recurBudget;\n  ctx.loopBudget = loopBudget;\n  ctx.rangeBudget = rangeBudget;\n  stack = [];\n  lets = [];\n  return errors ?? [];\n}\n\n/**\n * @param ctx An environment context you retain.\n * @param alsoSyntax To optionally include syntax symbols.\n * @returns List of symbols defined in Insitux, including built-in operations, (optionally) syntax, constants, and user-defined functions.\n */\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\n  let syms = alsoSyntax ? [\"function\", \"let\", \"var\"] : [];\n  push(syms, [\"args\", \"PI\", \"E\"]);\n  syms = concat(syms, objKeys(ops));\n  syms = concat(syms, objKeys(ctx.env.funcs));\n  syms = concat(syms, objKeys(ctx.env.vars));\n  const hidden = [\"entry\"];\n  return syms.filter(o => !has(hidden, o));\n}\n","import { invoke } from \".\";\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\nimport { Ctx } from \"./types\";\n\nexport type ErrorOutput = {\n  type: \"message\" | \"error\";\n  text: string;\n}[];\n\nconst invocations = new Map<string, string>();\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\n\nexport async function invoker(ctx: Ctx, code: string): Promise<ErrorOutput> {\n  const uuid = getTimeMs().toString();\n  invocations.set(uuid, code);\n  const errors = await invoke(ctx, code, uuid, true);\n  let out: ErrorOutput = [];\n  errors.forEach(({ e, m, errCtx: { line, col, sourceId } }) => {\n    const invocation = invocations.get(sourceId);\n    if (!invocation) {\n      out.push({\n        type: \"message\",\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\n      });\n      return;\n    }\n    const lineText = invocation.split(\"\\n\")[line - 1];\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\n    const half1 = trimStart(substr(lineText, 0, col - 1));\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\n    if (!sym) {\n      const half2 = substr(lineText, col);\n      out.push({ type: \"error\", text: lineText[col - 1] });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    } else {\n      const half2 = substr(lineText, col - 1 + slen(sym));\n      out.push({ type: \"error\", text: sym });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    }\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\n  });\n  return out;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","rem","vec","dict","types","map","for","reduce","filter","remove","find","count","rand","while","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","typeNames","null","num","bool","ref","func","clo","v","dic","stringify","cat","val2str","quoted","t","name","ks","vs","k","i","asArray","toDict","args","pop","_","ddKeys","ddVals","forEach","existingIdx","findIndex","isEqual","dictGet","dictSet","nKeys","nVals","asBoo","isVecEqual","some","bd","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","optimistic","onlyNum","nonNumArgIdx","names","typeErr","typeViolations","need","argTypes","r","numOpErr","keyOpErr","nullVal","parseAllArgs","tokens","params","body","exp","parseArg","checkArity","typ","text","shift","texts","err","head","when","ins","defIns","def","cond","ifT","ifF","insCount","arg","as","headIns","nArgs","unshift","parsed","errors","parseForm","insErrorDetect","fins","stack","lim","badMatch","okTypes","headIs","badArg","parse","code","sourceId","stringError","makeCollsOps","emitComments","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","l","c","nextCh","n","isWhite","isDigit","ch","isParen","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","segments","token","segment","labelled","isFunc","entries","described","funcise","funcsAndErrors","named","eCtx","firstNonParam","p","parseError","syntaxise","okFuncs","fae","f","async","state","kind","set","exe","output","out","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","getExe","ctx","monoArityError","tErr","violations","sum","every","closure","okT","arrays","lims","divisors","loopBudget","argIdxs","d","shortest","array","isRemove","isFind","isCount","filtered","reduction","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","edgeCase","step","rangeBudget","nums","invoke","terse","results","Map","env","vars","startTime","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","newKey","inClosure","stackLen","tooManyLoops","paramIdx","nextCat","cins","isCapture","derefFunc","possibleLet","numIns","captures","exeNumArgs","printResult","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}