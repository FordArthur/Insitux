{"version":3,"file":"insitux.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,ulBCLhD,MAAMC,EAASC,GAAuBC,OAAOD,GACvCE,EAAQ,CAAIC,EAAUC,EAAgBC,IACjDF,EAAID,MAAME,EAAOC,GACNC,EAAS,CAAIH,EAAUC,EAAeG,IACjDJ,EAAIG,OAAOF,EAAOG,GACPC,EAAOL,GAA2BA,EAAIM,OACtCC,EAAQC,GAAwBA,EAAIF,OACpCG,EAASZ,IAA6BC,OAAOY,MAAMZ,OAAOD,IAC1Dc,EAAcd,GAAyBe,MAAMD,QAAQd,GACrDgB,EAAS,CAACL,EAAaP,EAAeK,IACjDE,EAAIM,UAAUb,EAAOA,GAASK,GAAUE,EAAIF,SACjCS,EAAS,CAACP,EAAaQ,IAAwBR,EAAIQ,GACnDC,EAAM,CAACpB,EAAWqB,IAAuBrB,EAAEsB,SAASD,GACpDE,EAAS,CAACvB,EAAWqB,IAAcrB,EAAEwB,QAAQH,GAC7CI,EAAM,CAAIzB,EAAQ0B,IAAkB1B,EAAEsB,SAASI,GAC/CC,EAAS,CAAChB,EAAaX,IAAuBW,EAAIiB,WAAW5B,GAC7D6B,EAAO,CAAClB,EAAaX,IAAuBW,EAAImB,SAAS9B,GACzD+B,EAAW5B,GAAoBA,EAAI4B,OACnCC,EAAS,CAAIC,EAAQC,IAAgBD,EAAED,OAAOE,GAC9CC,EAAO,CAAIhC,EAAUiC,IAAajC,EAAIgC,QAAQC,GAC9CC,EAAS,CAAIlC,EAAUmC,IAA+BnC,EAAIoC,KAAKD,GAC/DE,EAAcrC,GAAaA,EAAIqC,UAC/BC,EAAa9B,GAAgBA,EAAI+B,cACjCC,EAAahC,GAAgBA,EAAIiC,cACjCC,EAAQlC,GAAgBA,EAAIkC,OAC5BC,EAAanC,GAAgBA,EAAImC,YACjCC,EAAWpC,GAAgBA,EAAIoC,UAC/BC,EAAS,CAACrC,EAAa2B,IAAe3B,EAAIqC,OAAOV,GACjDW,EAAU,CAAChB,EAAWC,IAAcD,EAAIiB,KAAKC,UAAYjB,EAAID,GAC7DmB,EAAU,CAACnB,EAAWC,IAAcgB,KAAKG,MAAMJ,EAAQhB,EAAGC,IAC1DoB,EAAS,GAAgB,IAAIvC,MAAM,GAAKwC,QACxCC,EAAWxD,GAAcb,OAAOoE,KAAKvD,GACrCyD,EAAY,KAAM,IAAIC,MAAOC,UAC7BC,EAAMV,KAAKU,IACXC,EAAMX,KAAKW,IACXC,EAAMZ,KAAKY,IACXC,EAAMb,KAAKa,IACXC,EAAMd,KAAKc,IACXC,EAAMf,KAAKe,IACXC,EAAOhB,KAAKgB,KACZC,EAAQjB,KAAKiB,MACbd,EAAQH,KAAKG,MACbe,EAAOlB,KAAKkB,KACZC,EAAOnB,KAAKmB,KACZC,EAAKpB,KAAKqB,GACVC,EAAOtB,KAAKuB,IACZC,EAAOxB,KAAKwB,KACZC,EAAQzB,KAAKyB,MCuBbC,EAST,CACFC,MAAO,GACP,YAAa,GACb,IAAK,CAAEC,WAAY,EAAGC,QAAS,CAAC,SAChC,IAAK,CAAEC,SAAU,GACjB,KAAM,CAAEA,SAAU,GAClB,IAAK,CAAEA,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,KAAM,CAAED,SAAU,EAAGC,SAAS,GAC9B,KAAM,CAAED,SAAU,EAAGC,SAAS,GAC9B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,KAAM,CAAED,SAAU,EAAGC,SAAS,GAC9B,KAAM,CAAED,SAAU,EAAGC,SAAS,GAC9BC,IAAK,CAAEJ,WAAY,EAAGG,SAAS,GAC/BE,IAAK,CAAEL,WAAY,EAAGG,SAAS,GAC/BpB,IAAK,CAAEmB,SAAU,EAAGC,SAAS,GAC7BnB,IAAK,CAAEkB,SAAU,EAAGC,SAAS,GAC7BrB,IAAK,CAAEkB,WAAY,EAAGG,SAAS,GAC/BX,GAAI,CAAEQ,WAAY,GAClBZ,KAAM,CAAEY,WAAY,EAAGG,SAAS,GAChCd,MAAO,CAAEW,WAAY,EAAGG,SAAS,GACjC5B,MAAO,CAAEyB,WAAY,EAAGG,SAAS,GACjCb,KAAM,CAAEU,WAAY,EAAGG,SAAS,GAChCT,KAAM,CAAEM,WAAY,EAAGG,SAAS,GAChCP,KAAM,CAAEI,WAAY,EAAGG,SAAS,GAChCN,MAAO,CAAEG,WAAY,EAAGG,SAAS,GACjCG,IAAK,CAAEJ,SAAU,GACjBK,GAAI,CAAEL,SAAU,GAChB,OAAQ,CAAEF,WAAY,EAAGG,SAAS,GAClC,QAAS,CAAEH,WAAY,EAAGG,SAAS,GACnC,OAAQ,CAAEH,WAAY,EAAGG,SAAS,GAClC,OAAQ,CAAEH,WAAY,EAAGG,SAAS,GAClC,QAAS,CAAEH,WAAY,EAAGG,SAAS,GACnC,QAAS,CAAEH,WAAY,GACvB,OAAQ,CAAEA,WAAY,GACtB,QAAS,CAAEA,WAAY,GACvB,OAAQ,CAAEA,WAAY,GACtB,OAAQ,CAAEA,WAAY,GACtB,QAAS,CAAEA,WAAY,GACvB,OAAQ,CAAEA,WAAY,GACtB,QAAS,CAAEA,WAAY,GACvBQ,IAAK,CAAEN,SAAU,EAAGC,SAAS,GAC7BlB,IAAK,CAAEe,WAAY,EAAGG,SAAS,GAC/BjB,IAAK,CAAEc,WAAY,EAAGG,SAAS,GAC/BhB,IAAK,CAAEa,WAAY,EAAGG,SAAS,GAC/BM,IAAK,GACLC,KAAM,GACNhF,IAAK,CAAEsE,WAAY,EAAGW,MAAO,CAAC,CAAC,MAAO,MAAO,UAC7C,SAAU,CAAEX,WAAY,EAAGW,MAAO,CAAC,CAAC,MAAO,SAC3C,SAAU,CAAEX,WAAY,EAAGW,MAAO,CAAC,CAAC,MAAO,SAC3C,OAAQ,CAAEX,WAAY,EAAGW,MAAO,CAAC,MAAO,QACxCtE,IAAK,CAAE6D,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,CAAC,MAAO,SACjDE,IAAK,CAAEX,SAAU,GACjBY,IAAK,CAAEZ,SAAU,GACjBa,OAAQ,CAAEb,SAAU,EAAGU,SAAU,GACjCI,OAAQ,CAAEd,SAAU,GACpBe,OAAQ,CAAEf,SAAU,GACpBgB,KAAM,CAAEhB,SAAU,GAClBiB,MAAO,CAAEjB,SAAU,GACnBrE,IAAK,GACLuF,KAAM,CAAER,SAAU,EAAGT,SAAS,GAC9B,WAAY,CAAES,SAAU,EAAGT,SAAS,GACpCkB,MAAO,GACP,KAAM,CAAEnB,SAAU,GAClB,MAAO,CAAEA,SAAU,GACnBoB,KAAM,CACJtB,WAAY,EACZW,MAAO,CACL,CAAC,MAAO,QACR,CAAC,MAAO,UAGZtD,KAAM,CAAE6C,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,CAAC,MAAO,UAClDY,KAAM,CAAErB,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,CAAC,MAAO,OAAQ,MAAO,QACjEjD,QAAS,CAAEsC,WAAY,EAAGW,MAAO,CAAC,CAAC,MAAO,SAC1ClD,KAAM,CAAEyC,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,QAC1ClC,KAAM,CAAEuB,WAAY,EAAGW,MAAO,CAAC,SAC/Ba,KAAM,CAAExB,WAAY,EAAGW,MAAO,CAAC,SAC/Bc,GAAI,CAAEvB,SAAU,GAChBwB,IAAK,CAAExB,SAAU,GACjB1B,MAAO,CAAE0B,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,MAAO,MAAO,QACzD,SAAU,CAAEX,WAAY,EAAGW,MAAO,CAAC,CAAC,MAAO,MAAO,UAClDgB,MAAO,CAAEzB,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,MAAO,QAClDiB,KAAM,CAAE1B,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,MAAO,QACjD,eAAgB,CAAEX,WAAY,EAAGW,MAAO,CAAC,MAAO,QAChD,aAAc,CAAEX,WAAY,EAAGW,MAAO,CAAC,MAAO,QAC9C,aAAc,CAAEX,WAAY,EAAGW,MAAO,CAAC,QACvC,aAAc,CAAEX,WAAY,EAAGW,MAAO,CAAC,QACvC5C,KAAM,CAAEiC,WAAY,EAAGW,MAAO,CAAC,QAC/B,aAAc,CAAEX,WAAY,EAAGW,MAAO,CAAC,QACvC,WAAY,CAAEX,WAAY,EAAGW,MAAO,CAAC,QACrC,OAAQ,CAAEX,WAAY,EAAGW,MAAO,CAAC,MAAO,QACxCkB,KAAM,CAAE7B,WAAY,GACpB8B,QAAS,CAAE9B,WAAY,GACvB+B,MAAO,CAAE7B,SAAU,EAAGU,SAAU,EAAGD,MAAO,CAAC,SAC3CqB,QAAS,CAAEhC,WAAY,GACvBiC,KAAM,CAAEjC,WAAY,EAAGW,MAAO,CAAC,QAC/BuB,MAAO,CAAElC,WAAY,IAGVmC,EAAY,CACvBC,KAAM,OACNvG,IAAK,SACLwG,IAAK,SACLC,KAAM,UACNnI,IAAK,UACLoI,IAAK,YACL9B,IAAK,SACLC,KAAM,aACN8B,KAAM,WACNC,IAAK,YC/LCvF,OAAM,EAAEP,IAAG,EAAEM,KAAI,EAAEI,KAAI,EAAEjC,MAAK,IAAK,GACnCQ,KAAI,GAAEiB,OAAM,GAAEP,IAAG,GAAEJ,OAAM,GAAEE,OAAM,IAAK,GACtCN,MAAK,GAAEJ,IAAG,GAAET,MAAK,IAAK,EAexByH,GAAe,CAAEC,EAAG,OAAQC,OAAG,GAkKrC,SAASC,GAAaC,EAAiBC,GACrC,MAAMC,EAAoB,GAC1B,OAAa,CACX,MAAMC,EAAMC,GAASJ,EAAQC,GAC7B,IAAK,GAAIE,GACP,MAEF,EAAKD,EAAMC,GAEb,OAAOD,EAGF,SAASG,GAAWC,EAAYC,EAAcC,GACnD,MAAM,WAAEtD,EAAU,SAAEY,EAAQ,SAAEV,GAAaJ,EAAIsD,GACzCG,EAAO,CAACC,EAAaC,IAAmB,CAC/B,CACXC,EAAG,QACHC,EAAG,GAAGP,WAAYI,aAA0B,IAAXC,EAAe,IAAM,WAAWJ,IACjEC,OAAAA,IAGJ,QAAmB,IAAftD,GACF,GAAIqD,IAASrD,EACX,OAAOuD,EAAK,WAAWvD,IAAcA,OAElC,CACL,GAAIE,IAAaU,GAAYyC,EAAOnD,EAClC,OAAOqD,EAAK,YAAYrD,IAAYA,GAAA,IAC1BA,GAAYU,GAAYyC,EAAOzC,EACzC,OAAO2C,EAAK,WAAW3C,IAAYA,GAAA,GAC1BV,GAAYU,IAAayC,EAAOnD,GAAYmD,EAAOzC,GAC5D,OAAO2C,EAAK,WAAWrD,SAAgBU,IAAYA,IA6KzD,SAASsC,GACPJ,EACAC,EACAa,GAAa,GAEb,IAAK,GAAId,GACP,MAAO,GAET,MAAM,IAAEe,EAAG,KAAEC,EAAI,OAAER,GAAWR,EAAOiB,QAErC,GACU,QAARF,GACA,GAAI,KAAMC,IACV,GAAIhB,IACc,MAAlBA,EAAO,GAAGe,IACV,CACA,MAAMG,EAAQlB,EAAOjC,KAAI8B,GAAKA,EAAEmB,OAC1Bd,EAAOE,GAASJ,EAAQC,EAAiB,MAATe,GAEtC,MAAO,CAAC,CAAED,IAAc,MAATC,EAAe,MAAQ,MAAO9I,MAD/B,CAAC,GAAMgJ,EAAO,EAAG,GAAIA,GAAS,GAAIlB,IAASlB,KAAK,KAAMoB,GAChBM,OAAAA,IAEtD,OAAQO,GAAA,IACD,MACH,MAAO,CAAC,CAAEA,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,MAAOC,EAAGkB,GAAQR,OAAAA,IAAA,IACtD,MACH,MAAO,CAAC,CAAEO,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,MAAOC,EAAG,GAAMkB,IAASR,OAAAA,IAAA,IAC7D,MACH,GAAa,SAATQ,GAA4B,UAATA,EACrB,MAAO,CACL,CAAED,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,OAAQC,EAAY,SAATkB,GAAmBR,OAAAA,IAAA,GAE7C,SAATQ,EACT,MAAO,CAAC,CAAED,IAAK,MAAO7I,MAAO0H,GAASY,OAAAA,IAAA,GAC7B,GAAOQ,EAAM,KACtB,MAAO,CAAC,CAAED,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,MAAOC,EAAGkB,GAAQR,OAAAA,IAAA,GAChD,GAAOQ,EAAM,MAAQ,GAAM,GAAOA,EAAM,IAAK,CACtD,MAAM9I,EAAQ,GAAM,GAAO8I,EAAM,IACjC,OAAI9I,EAAQ,EACH,CAAC,CAAE6I,IAAK,MAAO7I,MAAO0H,GAASY,OAAAA,IAEjC,CAAC,CAAEO,IAAK,MAAO7I,MAAAA,EAAOsI,OAAAA,IAAA,OACpB,EAAIP,EAAQe,GACd,CAAC,CAAED,IAAK,MAAO7I,MAAO+H,EAAOrG,QAAQoH,GAAOR,OAAAA,IACjC,SAATQ,EACF,CAAC,CAAED,IAAK,MAAO7I,OAAQ,EAAGsI,OAAAA,IACxBxD,EAAIgE,GACN,CAAC,CAAED,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,OAAQC,EAAGkB,GAAQR,OAAAA,IAErD,CAAC,CAAEO,IAAK,MAAO7I,MAAO8I,EAAMR,OAAAA,IAAA,IAChC,IACH,OA1NN,SACER,EACAC,EACAa,GAAa,GAEb,MAAMK,EAAOnB,EAAOiB,QACpB,IAAKE,EACH,MAAO,GAET,MAAM,IAAEJ,EAAG,KAAEC,EAAI,OAAER,GAAWW,EAC9B,IAAIb,EAAKU,EACT,MAAMI,EAAOlJ,GAAkB,CAAY,CAAE6I,IAAK,MAAO7I,MAAAA,EAAOsI,OAAAA,IAChE,GAAW,UAAPF,EAAgB,CAClB,GAAsB,MAAlBN,EAAO,GAAGe,IACZ,OAAOK,EAAI,iCAEb,MAAM,EAAOhB,GAASJ,EAAQC,GACxBoB,EAAOtB,GAAaC,EAAQC,GAClC,OAAK,GAAI,IAAU,GAAIoB,GAGhB,IAAI,EAAM,CAAEN,IAAK,MAAO7I,MAAO,GAAImJ,GAAOb,OAAAA,MAAaa,GAFrDD,EAAI,qCAEiD,GAC9C,QAAPd,GAAuB,QAAPA,EAAc,CACvC,MAAMgB,EAAa,GACnB,OAAa,CACX,MAAMC,EAAMnB,GAASJ,EAAQC,GAC7B,GAAI,GAAIqB,KAAS,GAAIC,GACnB,OAAOD,EAET,MAAM1C,EAAMwB,GAASJ,EAAQC,GAC7B,KAAK,GAAIqB,IAAU,GAAIC,IAAS,GAAI3C,IAClC,OAAOwC,EAAI,4DACD,GAAIxC,GACd,OAAOwC,EAAI,oDAEb,GAAmB,QAAfG,EAAI,GAAGR,IACT,OAAOK,EAAI,mCAEb,EAAKE,EAAK1C,GACV0C,EAAI/G,KAAK,CAAEwG,IAAKT,EAAIpI,MAAOqJ,EAAI,GAAGrJ,MAAOsI,OAAAA,SAAA,IAE3B,OAAPF,GAAsB,SAAPA,EAAe,CACvC,MAAMkB,EAAOpB,GAASJ,EAAQC,GAC9B,IAAK,GAAIuB,GACP,OAAOJ,EAAI,0BAEb,MAAME,EAAmBE,EACzB,GAAW,OAAPlB,EAAa,CACf,MAAMmB,EAAMrB,GAASJ,EAAQC,GAC7B,IAAK,GAAIwB,GACP,OAAOL,EAAI,yBAEbE,EAAI/G,KAAK,CAAEwG,IAAK,KAAM7I,MAAO,GAAIuJ,GAAO,EAAGjB,OAAAA,IAC3C,EAAKc,EAAKG,GACV,MAAMC,EAAMtB,GAASJ,EAAQC,GAC7B,GAAI,GAAIyB,IAGN,GAFAJ,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAO,GAAIwJ,GAAMlB,OAAAA,IACxC,EAAKc,EAAKI,GACN,GAAItB,GAASJ,EAAQC,IACvB,OAAOmB,EAAI,0BAGbE,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAO,EAAGsI,OAAAA,IACjCc,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAO0H,GAASY,OAAAA,QAEpC,CACL,MAAM,EAAOT,GAAaC,EAAQC,GAClCqB,EAAI/G,KAAK,CAAEwG,IAAK,KAAM7I,MAAO,GAAI,GAAQ,EAAGsI,OAAAA,IAC5C,EAAKc,EAAK,GACVA,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAO,EAAGsI,OAAAA,IACjCc,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAO0H,GAASY,OAAAA,IAEzC,OAAOc,EAAA,GACS,QAAPhB,GAAuB,OAAPA,GAAsB,UAAPA,GAAyB,UAAPA,EAAgB,CAC1E,MAAMqB,EAAsB,GAC5B,IAAIC,EAAW,EACf,OAAa,CACX,MAAMC,EAAMzB,GAASJ,EAAQC,GAC7B,IAAK,GAAI4B,GACP,MAEFF,EAAKpH,KAAKsH,GACVD,GAAY,GAAIC,GAElB,GAAW,UAAPvB,EACF,MAAO,IAAI,EAAKqB,GAAO,CAAEZ,IAAK,MAAO7I,MAAO,GAAIyJ,GAAOnB,OAAAA,IAEzD,GAAI,GAAImB,GAAQ,EACd,OAAOP,EAAI,mCAEb,MAAME,EAAa,GACnB,GAAW,UAAPhB,EAAgB,CAClBgB,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAO0H,GAASY,OAAAA,IACvCoB,GAAY,EACZ,MAAM,EAAOD,EAAKV,QAMlB,OALA,EAAKK,EAAK,GACVA,EAAI/G,KAAK,CAAEwG,IAAK,KAAM7I,MAAO0J,EAAW,GAAI,GAAOpB,OAAAA,IACnDc,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAO,GAAIyJ,GAAOnB,OAAAA,IACzCmB,EAAKG,SAAQC,GAAM,EAAKT,EAAKS,KAC7BT,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,QAAS0J,EAAW,GAAIpB,OAAAA,IACxCc,EAETM,GAAY,GAAID,GAChBC,GAAY,GAAa,QAAPtB,GAClB,MAAM,EAAa,QAAPA,EAAe,KAAO,KAClC,QAASjG,EAAI,EAAGA,EAAI,GAAIsH,KAAStH,EAC/B,EAAKiH,EAAKK,EAAKtH,IACfuH,GAAY,GAAID,EAAKtH,IACrBiH,EAAI/G,KAAK,CAAEwG,IAAA,EAAK7I,MAAO0J,EAAUpB,OAAAA,MAC/BoB,EAWJ,MATW,QAAPtB,EACF,EAAKgB,EAAK,CACR,CAAEP,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,OAAQC,GAAG,GAAQU,OAAAA,GAClD,CAAEO,IAAK,MAAO7I,MAAO,EAAGsI,OAAAA,GACxB,CAAEO,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,OAAQC,GAAG,GAASU,OAAAA,KAGrDc,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAY,CAAE2H,EAAG,OAAQC,GAAG,GAASU,OAAAA,IAEvDc,GAET,MAAMU,EAAiB,GACvB,IAAIC,EAAQ,EAEZ,GAAY,MAARlB,GAAe,EAAId,EAAQe,IAAS,GAAI,MAAO,GAAOA,EAAM,IAAK,CACnEhB,EAAOkC,QAAQf,GACf,MAAMG,EAAMlB,GAASJ,EAAQC,GAC7B,EAAK+B,EAASV,GAEhB,MAAMpB,EAAc,GACpB,KAAO,GAAIF,IAAS,CAClB,MAAMmC,EAAS/B,GAASJ,EAAQC,GAChC,IAAK,GAAIkC,GACP,QAEAF,EACF,EAAK/B,EAAMiC,GAEb,GAAW,WAAP7B,EACF,MAAO,IAAIJ,EAAM,CAAEa,IAAK,MAAO7I,QAAS,GAAIgI,GAAOM,OAAAA,IAIrD,GAAIxD,EAAIsD,IAAOQ,EAAY,CACzB,MAAMsB,EAAS/B,GAAWC,EAAI2B,EAAOzB,GACrC,EAAKwB,EAASI,GAAQrE,KAAI6C,GAAKQ,EAAIR,EAAEC,GAAG,MAAO,IAGjD,GAAI,GAAImB,GACNA,EAAQzH,KAAK,CAAEwG,IAAK,MAAO7I,MAAO+J,EAAOzB,OAAAA,QACpC,CACL,MAAMtI,EACI,QAAR6I,EACI,CAAElB,EAAG,MAAOC,EAAG,GAAMQ,IACrB,GAAOA,EAAI,KACX,CAAET,EAAG,MAAOC,EAAGQ,GACftD,EAAIsD,GACJ,CAAET,EAAG,OAAQC,EAAGQ,GACT,SAAPA,GAAwB,UAAPA,EACjB,CAAET,EAAG,OAAQC,EAAU,SAAPQ,GAChB,CAAET,EAAG,MAAOC,EAAGQ,GACrB0B,EAAQzH,KAAK,CAAEwG,IAAK,MAAO7I,MAAAA,EAAOsI,OAAAA,IAClCwB,EAAQzH,KAAK,CAAEwG,IAAK,MAAO7I,MAAO+J,EAAOzB,OAAAA,IAE3C,MAAO,IAAIN,KAAS8B,GAqDTK,CAAUrC,EAAQC,EAAQa,GAAA,IAC9B,QACA,MACH,MAAO,WAEP,ODpPwD,GCuXvD,SAASwB,GACdC,EACAC,GAEA,MAAM,OAAExC,EAAM,YAAEyC,GA1iBX,SACLF,EACAC,EACAE,GAAe,EACfC,GAAe,GAEf,MAAM3C,EAAkB,GAExB,IAAI4C,GAAW,EACbC,GAAY,EACZC,EAAa,CAAC,EAAG,GACjBC,GAAW,EACXC,GAAW,EACXC,GAAY,EACZC,EAAO,EACPC,EAAM,EACR,QAASC,EAAI,EAAGC,EAAI,GAAKd,GAAOa,EAAIC,IAAKD,EAAG,CAC1C,MAAME,EAAI,GAAOf,EAAMa,GACrBG,EAASH,EAAI,IAAMC,EAAI,GAAOd,EAAMa,EAAI,GAAK,GAE/C,KADED,EACEF,EAAW,CACH,OAANK,GACFL,GAAY,IACVC,EACFC,EAAM,GACGR,IACT3C,EAAO,GAAIA,GAAU,GAAGgB,MAAQsC,GAElC,SAEF,GAAIT,EAAW,CACbA,GAAY,EACRD,IACF5C,EAAO,GAAIA,GAAU,GAAGgB,MACtB,CAAEwC,EAAG,KAAM3D,EAAG,KAAM,IAAK,KAAMyD,IAAM,KAAKA,KAE9C,SAEF,GAAU,OAANA,EAAY,CACdT,GAAY,EACZ,SAEF,GAAU,MAANS,EAAW,EACRV,GAAYA,KACfE,EAAa,CAACI,EAAMC,GACpBnD,EAAOzF,KAAK,CACVwG,IAAK,MACLC,KAAM,GACNR,OAAQ,CAAEgC,aAAAA,EAAcU,KAAAA,EAAMC,IAAAA,MAGlCH,EAAWD,GAAW,EACtB,SAEF,MAAMU,EAAU,GAAI,WAAYH,GAChC,IAAKV,GAAYa,EAAS,CACxBT,EAAWD,GAAW,EACZ,OAANO,MACAJ,EACFC,EAAM,GAER,SAEF,IAAKP,GAAkB,MAANU,EAAW,CAC1BL,GAAY,EACRN,GACF3C,EAAOzF,KAAK,CACVwG,IAAK,MACLC,KAAM,GACNR,OAAQ,CAAEgC,aAAAA,EAAcU,KAAAA,EAAMC,IAAAA,KAGlC,SAEF,MAAM3C,EAAiB,CAAEgC,aAAAA,EAAcU,KAAAA,EAAMC,IAAAA,GACvCO,EAAWC,GAAe,GApEnB,aAoE+BA,GACtCC,EAAU,GAAI,SAAUN,GAc9B,GAZIN,IAAaU,EAAQJ,KACvBN,EAAiB,MAANM,IAAc,GAAItD,EAAO,GAAIA,GAAU,GAAGgB,KAAM,KACtDgC,GAAaY,GAAYH,IAC5BV,GAAW,EACX/C,EAAO,GAAIA,GAAU,GAAGe,IAAM,QAI9BgC,GAAYa,IACdb,GAAW,IAGRH,IAAaG,IAAaC,EAAU,CACvC,GAAIY,EAAS,CACX,MAQM5C,EARyC,CAC7C,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAEasC,GACpBtD,EAAOzF,KAAK,CAAEwG,IAAKC,EAAMA,KAAM0B,EAAe1B,EAAOsC,EAAG9C,OAAAA,IACpDkC,IACQ,MAANY,EACFtD,EAAOzF,KAAK,CAAEwG,IAAK,MAAOC,KAAM,MAAOR,OAAAA,IACxB,MAAN8C,GACTtD,EAAOzF,KAAK,CAAEwG,IAAK,MAAOC,KAAM,OAAQR,OAAAA,KAG5C,SAEFwC,EACEU,EAAQJ,IACD,MAANA,GAAaI,EAAQH,IACf,MAAND,IAAcI,EAAQH,IAAsB,MAAXA,GACpCR,GAAYC,EACZ,IAAIjC,EAAoBgC,EAAW,MAAQ,MAC3C/C,EAAOzF,KAAK,CAAEwG,IAAAA,EAAKC,KAAM,GAAIR,OAAAA,IAE/BR,EAAO,GAAIA,GAAU,GAAGgB,MAAQsC,EAElC,MAAO,CAAEtD,OAAAA,EAAQyC,YAAaG,EAAWE,OAAa,GAibtBe,CAAStB,EAAMC,GACzCsB,EA5CR,SAA0BrB,EAAmCzC,GAC3D,MAAMwC,EAAe,GAAIxC,GAAUA,EAAO,GAAGQ,OAAOgC,aAAe,GAC7DJ,EAAwB,GACxBhB,EAAM,CAACP,EAAWL,IACtB4B,EAAO7H,KAAK,CAAEqG,EAAG,QAASC,EAAAA,EAAGL,OAAAA,IAGzBuD,EAAYlE,GAChB,GAAIG,EAAO9B,QAAO,EAAG6C,IAAAA,KAAUA,IAAQlB,MAClCmE,EAAMC,GAAQ,CAACF,EAAS,KAAMA,EAAS,MAC9C,CACE,MAAOb,EAAMC,GAtCjB,SACEnD,EACAgE,EACAC,GAIA,MAAMC,EAAWD,GAAQD,GAClBX,EAAGc,GAAK,CAACD,EAAW,IAAM,IAAKA,EAAW,IAAM,KACjDE,EAAYF,EAAW,GAAK,EAClC,QACMG,EAAM,GAAIrE,GAASH,EAAIqE,EAAW,EAAIG,EAAM,EAAGC,EAAQ,EAC3DJ,EAAWrE,EAAIwE,EAAMxE,GAAK,EAC1BA,GAAKuE,EACL,CACA,MAAM,IACJrD,EACAP,QAAQ,KAAE0C,EAAI,IAAEC,IACdnD,EAAOH,GAEX,GADAyE,GAAS,GAAMvD,IAAQsC,GAAK,GAAMtC,IAAQoD,GACtCG,EAAQ,EACV,MAAO,CAACpB,EAAMC,GAGlB,MAAO,CAAC,EAAG,GAcWoB,CAAmBvE,EAAQgE,EAAMC,GACjDf,EAAOC,GACT/B,EAAI,wBAAyB,CAAEoB,aAAAA,EAAcU,KAAAA,EAAMC,IAAAA,IAKvD,GAAIV,EAAa,CACf,MAAOS,EAAMC,GAAOV,EACpBrB,EAAI,mCAAoC,CAAEoB,aAAAA,EAAcU,KAAAA,EAAMC,IAAAA,IAIhE,IAAIqB,EACJ,QAAS3E,EAAI,EAAG4E,GAAW,EAAO5E,EAAI,GAAIG,KAAWH,EAAG,CACtD,GAAI4E,GAA8B,MAAlBzE,EAAOH,GAAGkB,IAAa,CACrCyD,EAAYxE,EAAOH,GACnB,MAEF4E,EAA6B,MAAlBzE,EAAOH,GAAGkB,IAMvB,OAJIyD,GACFpD,EAAI,6BAA8BoD,EAAUhE,QAGvC4B,EAQasC,CAAiBjC,EAAazC,GAClD,GAAI,GAAI8D,GACN,MAAO,CAAE1B,OAAQ0B,EAAaa,MAAO,IAEvC,MAAMC,EAnbR,SAAiB5E,GACf,MAAM4E,EAAsB,CAAC,IAC7B,IAAIN,EAAQ,EAQZ,OAPAtE,EAAO8B,SAAQ+C,IACbD,EAAS,GAAIA,GAAY,GAAGrK,KAAKsK,GACjCP,GAAS,GAAoB,MAAdO,EAAM9D,KAAe,GAAoB,MAAd8D,EAAM9D,KAClC,IAAVuD,GACFM,EAASrK,KAAK,OAGXqK,EAyaUE,CAAQ9E,GACnB+E,EAvaR,SAAiBH,GACf,MAAMI,EAAU,GACd,GAAI,GAAW,GACI,QAAnB,EAAQ,GAAGjE,KACS,aAApB,EAAQ,GAAGC,KACP2D,EAAQC,EAAS1G,QAAO2B,GAAKmF,EAAOnF,KACpCoF,EAAU,EAAKL,EAAS1G,QAAO2B,IAAMmF,EAAOnF,MAC5CqF,EAAYP,EAAM5G,KAAIiC,IAAW,CACrCmF,KAAMnF,EAAO,GAAGgB,KAChBhB,OAAQ,GAAMA,EAAQ,GACtBQ,OAAQR,EAAO,GAAGQ,WAEpB,OAAO,GAAIyE,GACP,EAAOC,EAAW,CAChB,CACEC,KAAM,QACNnF,OAAQiF,EACRzE,OAAQyE,EAAQ,GAAGzE,UAGvB0E,EAmZaE,CAAQR,GACnBS,EAAiBN,EAAShH,KAAIuH,GA7HtC,UACE,KAAEH,EAAI,OAAEnF,GACRQ,GAEA,MAAMY,EAAM,CAACP,EAAW0E,EAAO/E,IACC,CAAC,MAAO,CAAEI,EAAG,QAASC,EAAAA,EAAGL,OAAQ+E,KAC1DtF,EAAQC,GAnBjB,SACEsF,EACAC,GAEA,MAAMpL,EAAS,GACbC,EAAS,GACX,QAAS8I,EAAI,EAAGsC,GAAM,EAAOtC,EAAI,GAAIoC,KAAUpC,EAC7CsC,IAAAA,EAce,SAAf7F,EAdkB2F,EAAMpC,IAcjBrC,KAAiB,GAAI,MAAOlB,EAAEmB,QAbpC0E,EAAMpL,EAAID,GAAGE,KAAKiL,EAAMpC,IAazB,IAAAvD,EAXF,MAAO,CAACxF,EAAGC,GASYqL,CACrB3F,GAIF,GAAa,MAATmF,EACF,OAAO/D,EAAI,qBAGb,IAAK,GAAInB,KAAY,GAAIC,GACvB,OAAOkB,EAAI,uBAEb,GAAI,GAAIlB,IAAyB,MAAhBA,EAAK,GAAGa,IAAa,CACpC,IAAI,GAAId,GAKN,OAAOmB,EAAI,uBAHXlB,EAAKgC,QAAQjC,EAAO2F,OAOpB,GAAI3F,KAAY,GAAIC,IACtBA,EAAK3F,KAAK0F,EAAO2F,OAEnB,MAAMtE,EAAmB,GACzB,KAAO,GAAIpB,IACT,EACEoB,EACAlB,GACEF,EACAD,EAAOlC,KAAI8H,GAAKA,EAAE7E,SAIxB,MAAM8E,EAAaxE,EAAIlD,MAAKgF,GAAe,QAAVA,EAAErC,MACnC,OAAI+E,EACK1E,EAAY0E,EAAW5N,MAAO4N,EAAWtF,QAE3C,CAAC,OAAQ,CAAE2E,KAAAA,EAAM7D,IAAAA,IAiFtByE,CAAUT,EAAO,CACf9C,aAAAA,EACAU,KAAMoC,EAAM9E,OAAO0C,KACnBC,IAAKmC,EAAM9E,OAAO2C,QAGhB6C,EAAkB,GACtBC,EAA8B,GAChCZ,EAAevD,SAAQoE,IACN,QAAXA,EAAI,GACND,EAAa1L,KAAK2L,EAAI,IAEtBF,EAAQzL,KAAK2L,EAAI,OAGrB,MAAMvB,EAAe,GAErB,OADAqB,EAAQlE,SAAQpC,GAASiF,EAAMjF,EAAKyF,MAAQzF,IACrC,CAAE0C,OAAQ6D,EAActB,MAAAA,GCllBjCwB,eAAezO,GAAI0O,EAAc/O,GAC/B,OAAK+O,EAAMxI,KAAK/D,IAAIxC,GAGb,CAAEa,MAAOkO,EAAMxI,KAAKlG,IAAIL,GAAO+J,SAAK,GAFlC,CAAElJ,MAAO,CAAE2H,EAAG,OAAQC,OAAG,GAAasB,IAAK,IAAI/J,gBAK1D8O,eAAeE,GACbD,EACA/O,EACAuH,GAEAwH,EAAMxI,KAAKyI,IAAIhP,EAAKuH,GAItBuH,eAAeG,GACbF,EACAjB,EACAxD,GAEA,MAAM/B,EAAe,CAAEC,EAAG,OAAQC,OAAG,GACrC,OAAQqF,GAAA,IACD,YACHiB,EAAMG,QAAU5E,EAAK,GAAG7B,EACxB,UACG,YACA,gBACHsG,EAAMG,QAAU5E,EAAK,GAAG7B,EAAI,KAC5B,cAEA,MAAO,CAAE5H,MAAO0H,EAASwB,IAAK,aAAa+D,oBAE/C,MAAO,CAAEjN,MAAO0H,EAASwB,SAAK,GAGhC,MAAMnC,GAKA,CAEJ,CAAEkG,KAAM,gBAAiB5C,KAAM,kBAAmBiE,IAAK,iBACvD,CACErB,KAAM,oBACN5C,KAAM,0BACNiE,IAAK,uBAEP,CAAErB,KAAM,YAAa5C,KAAM,UAAWiE,IAAK,KAC3C,CAAErB,KAAM,gBAAiB5C,KAAM,QAASiE,IAAK,MAC7C,CAAErB,KAAM,oBAAqB5C,KAAM,wBAAyBiE,IAAK,KACjE,CAAErB,KAAM,mBAAoB5C,KAAM,yBAA0BiE,IAAK,MACjE,CACErB,KAAM,QACN5C,KAAM,2DACNiE,IAAK,kBAEP,CAAErB,KAAM,mBAAoB5C,KAAM,8BAA+BiE,IAAK,MACtE,CACErB,KAAM,sBACN5C,KAAM,iDACNiE,IAAK,gBAEP,CACErB,KAAM,qBACN5C,KAAM,+DACNiE,IAAK,eAEP,CAAErB,KAAM,kBAAmB5C,KAAM,cAAeiE,IAAK,KACrD,CAAErB,KAAM,kBAAmB5C,KAAM,oBAAqBiE,IAAK,MAC3D,CACErB,KAAM,mBACN5C,KAAM,mCACNiE,IAAK,MAEP,CACErB,KAAM,qBACN5C,KAAM,sCACNiE,IAAK,MAEP,CACErB,KAAM,qBACN5C,KAAM,gCACNiE,IAAK,gCAEP,CACErB,KAAM,aACN5C,KAAM,0IAKNiE,IAAK,iCAEP,CAAErB,KAAM,sBAAuB5C,KAAM,cAAeiE,IAAK,KACzD,CAAErB,KAAM,iBAAkB5C,KAAM,oBAAqBiE,IAAK,KAC1D,CAAErB,KAAM,qBAAsB5C,KAAM,oBAAqBiE,IAAK,KAC9D,CAAErB,KAAM,sBAAuB5C,KAAM,oBAAqBiE,IAAK,KAC/D,CACErB,KAAM,sBACN5C,KAAM,2BACNiE,IAAK,MAEP,CAAErB,KAAM,sBAAuB5C,KAAM,UAAWiE,IAAK,WACrD,CAAErB,KAAM,iBAAkB5C,KAAM,yBAA0BiE,IAAK,YAC/D,CACErB,KAAM,wBACN5C,KAAM,4CACNiE,IAAK,SAEP,CACErB,KAAM,yBACN5C,KAAM,4BACNiE,IAAK,WAEP,CACErB,KAAM,oBACN5C,KAAM,2CACNiE,IAAK,wBAEP,CACErB,KAAM,0BACN5C,KAAM,qCAENiE,IAAK,SAEP,CACErB,KAAM,yBACN5C,KAAM,yBACNiE,IAAK,qBAEP,CACErB,KAAM,yBACN5C,KAAM,+BACNiE,IAAK,kBAEP,CACErB,KAAM,aACN5C,KAAM,kGAINiE,IAAK,UAEP,CACErB,KAAM,cACN5C,KAAM,oFAGNiE,IAAK,QAGP,CAAErB,KAAM,sBAAuB5C,KAAM,sCACrC,CACE4C,KAAM,kBACN5C,KAAM,kDACNiE,IAAK,gBAEP,CACErB,KAAM,wBACN5C,KAAM,+BACNiE,IAAK,OAEP,CACErB,KAAM,sBACN5C,KAAM,oFAGNiE,IAAK,aAEP,CACErB,KAAM,uBACN5C,KAAM,uFAENiE,IAAK,yBAEP,CACErB,KAAM,yBACN5C,KAAM,2CACNiE,IAAK,cAEP,CACErB,KAAM,uBACN5C,KAAM,mDACNiE,IAAK,KAEP,CACErB,KAAM,uBACN5C,KAAM,uFAENiE,IAAK,SAEP,CACErB,KAAM,iBACN5C,KAAM,uCACNiE,IAAK,eAEP,CAAErB,KAAM,mBAAoB5C,KAAM,+BAAgCiE,IAAK,KACvE,CACErB,KAAM,sBACN5C,KAAM,qCACNiE,IAAK,KAEP,CACErB,KAAM,kBACN5C,KAAM,4CACNiE,IAAK,OAEP,CACErB,KAAM,YACN5C,KAAM,6FAINiE,IAAK,MAEP,CACErB,KAAM,YACN5C,KAAM,oDACNiE,IAAK,iBAEP,CACErB,KAAM,YACN5C,KAAM,4HAINiE,IAAK,WAEP,CACErB,KAAM,uBACN5C,KAAM,gFAGNiE,IAAK,KAEP,CACErB,KAAM,qBACN5C,KAAM,+EAGNiE,IAAK,UAEP,CACErB,KAAM,iBACN5C,KAAM,kFAGNiE,IAAK,WAEP,CACErB,KAAM,kBACN5C,KAAM,qBACNiE,IAAK,WAEP,CACErB,KAAM,oBACN5C,KAAM,cACNiE,IAAK,WAGP,CACErB,KAAM,2BACN5C,KAAM,oFAGNiE,IAAK,IACLpF,IAAK,CAAC,SAER,CAAE+D,KAAM,yBAA0B5C,KAAM,IAAKnB,IAAK,CAAC,cACnD,CACE+D,KAAM,uBACN5C,KAAM,iCACNnB,IAAK,CAAC,cAER,CAAE+D,KAAM,oBAAqB5C,KAAM,MAAOnB,IAAK,CAAC,aAChD,CAAE+D,KAAM,cAAe5C,KAAM,uBAAwBnB,IAAK,CAAC,WAC3D,CACE+D,KAAM,cACN5C,KAAM,0EAGNnB,IAAK,CAAC,WAER,CAAE+D,KAAM,eAAgB5C,KAAM,gBAAiBnB,IAAK,CAAC,WAErD,CACE+D,KAAM,eACN5C,KAAM,wIAKNiE,IAAK,OAEP,CACErB,KAAM,iBACN5C,KAAM,4PAMNiE,IAAK,WAGP,CACErB,KAAM,UACN5C,KAAM,oDACNiE,IAAK,aAEP,CAAErB,KAAM,MAAO5C,KAAM,sBAAuBiE,IAAK,aAEjD,CAAErB,KAAM,eAAgB5C,KAAM,KAAMnB,IAAK,CAAC,UAC1C,CAAE+D,KAAM,sBAAuB5C,KAAM,oBAAqBnB,IAAK,CAAC,UAChE,CAAE+D,KAAM,sBAAuB5C,KAAM,kBAAmBnB,IAAK,CAAC,UAC9D,CACE+D,KAAM,sBACN5C,KAAM,iBACNnB,IAAK,CAAC,QAAS,UAEjB,CAAE+D,KAAM,sBAAuB5C,KAAM,iBAAkBnB,IAAK,CAAC,UAC7D,CAAE+D,KAAM,iBAAkB5C,KAAM,aAAcnB,IAAK,CAAC,UACpD,CAAE+D,KAAM,wBAAyB5C,KAAM,iBAAkBnB,IAAK,CAAC,UAC/D,CAAE+D,KAAM,wBAAyB5C,KAAM,kBAAmBnB,IAAK,CAAC,WAG3D+E,eAAeM,GACpBC,EAMAC,GAAiB,GAEjB,MAAMC,EAKA,GACN,QAAS/G,EAAI,EAAGA,EAAIjH,EAAIqG,MAAUY,EAAG,CACnC,MAAM,KAAEsF,EAAI,KAAE5C,EAAI,IAAEnB,EAAG,IAAEoF,GAAQvH,GAAMY,GACjCuG,EAAe,CACnBxI,KAAM,IAAIiJ,IACVN,OAAQ,IAEJO,EAAW,CAAEnC,MAAO,GAAIoC,KAAM,IAC9BC,EAAYnL,IACZuG,QAAesE,EACnB,CACEhP,IAAML,GAAgBK,GAAI0O,EAAO/O,GACjCgP,IAAK,CAAChP,EAAauH,IAAayH,GAAID,EAAO/O,EAAKuH,GAChD0H,IAAK,CAAC,EAAc3E,IAAgB2E,GAAIF,EAAO,EAAMzE,GACrDmF,IAAAA,EACAG,WAAY,IACZC,YAAa,IACbC,WAAY,IACZC,YAAa,KAEf7E,EACA,WACA,GAEI8E,GAASjG,GAAO,IAAItC,SAAWsD,EAAOrE,KAAI,EAAG6C,KAAQA,IAAG9B,OACxDwI,GAASd,GAAOvL,EAAKmL,EAAMG,UAAYC,EACvCe,EAAY1L,IAAcmL,GACzBQ,EAAMC,EAAOC,EAAUC,EAASC,GAAW,CAChDxM,EAAO,GAAGyE,EAAI,IAAK,GACnBzE,EAAO+J,EAAM,IACb/J,EAAO,GAAGmM,MAAe,GACzBD,GAASd,EAAM,UAAYvL,EAAKmL,EAAMG,QACtCc,GACEjF,EAAOrE,KACL,EAAG6C,EAAGC,EAAAA,EAAGL,QAAU0C,KAAAA,EAAMC,IAAAA,MAAY,GAAGvC,KAAKsC,KAAQC,MAAQtC,OAGnE+F,EAAQrM,KAAK,CACX8M,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAM,QAAS,GAAGL,KAAQC,KAASC,KAAYC,KAAWC,MAGxD,MAAME,EAAUlB,EAAQ3I,QAAO,CAAC8J,GAAOR,UAAAA,KAAgBQ,EAAMR,GAAW,GAClES,EAAYpP,EAAIgO,EAAQ1I,QAAO,EAAGoJ,MAAAA,EAAOD,MAAAA,KAAYC,GAASD,KACpE,OAAOjN,EACLwM,EAAQ1I,QAAOiG,IAAMwC,IAAUxC,EAAEmD,QAAUnD,EAAEkD,QAAOtJ,KAAIoG,GAAKA,EAAE0D,UAC/D,CAAC,QAAQG,KAAapP,EAAIgO,sBAA4BkB,SC3YnD,MAGC9L,IAAG,GAAEI,IAAG,GAAED,IAAG,GAAEE,IAAG,GAAEK,GAAE,GAAED,KAAI,GAAEH,KAAI,GAAEb,MAAK,GAAEe,KAAI,GAAED,MAAK,GAAEL,IAAG,GAAED,IAAG,IAAK,GACrEW,KAAI,GAAEE,KAAI,GAAEC,MAAK,IAAK,GACtB3C,OAAM,GAAEP,IAAG,GAAEM,KAAI,GAAEI,KAAI,GAAEK,QAAO,GAAEtC,MAAK,GAAEI,OAAM,GAAE+B,OAAM,IAAK,GAC5DR,KAAI,GAAEnB,KAAI,GAAEiB,OAAM,GAAEP,IAAG,GAAEG,OAAM,GAAEP,OAAM,GAAE2B,UAAS,GAAEF,UAAS,IAAK,GAClEI,KAAI,GAAEC,UAAS,GAAEC,QAAO,IAAK,GAC7BU,UAAS,GAAEL,QAAO,GAAEH,QAAO,IAAK,GAChCnC,QAAO,GAAEF,MAAK,GAAEJ,IAAG,GAAEgD,QAAO,GAAEF,MAAK,GAAEvD,MAAK,IAAK,EAKjD8P,GAAU,EAAGnI,EAAAA,EAAGD,MACpB,MAAMqI,EAAU,GAAoB,QAAR,EAAErI,EAAc,IAAI,EAAEC,KAAOmI,GAAQ,GACjE,OAAQpI,GAAA,IACD,OACO,IACP,MACH,MAAO,GAAGC,IAAA,IACP,UACA,UACA,UACA,OACH,OAAOA,EAAA,IACJ,MACH,MAAO,IAAKA,EAAWqF,OAAA,IACpB,MACH,MAAO,IAAKrF,EAAY/B,IAAImK,GAAQpJ,KAAK,YACtC,OAAQ,CACX,MAAM,KAAEnD,EAAI,KAAE+C,GAASoB,GAChBqI,EAAIC,GAAM,CAACzM,EAAKoC,IAAImK,GAASxJ,EAAKX,IAAImK,IAE7C,MAAO,IADSC,EAAGpK,KAAI,CAACsK,EAAGjF,IAAM,GAAGiF,KAAKD,EAAGhF,OACzBtE,KAAK,aAErB,OACH,MAAO,OAEX,OH4J4D,GGzJ9D,IAAIwJ,GAAe,GACfC,GAAiC,GACrC,MAAMC,GAAQ1I,GAAewI,GAAM/N,KAAK,CAAEsF,EAAG,OAAQC,EAAAA,IAC/C2I,GAAQ3I,GAAcwI,GAAM/N,KAAK,CAAEsF,EAAG,MAAOC,EAAAA,IAC7C4I,GAAO,CAAC5I,EAAY,KAAOwI,GAAM/N,KAAK,CAAEsF,EAAG,MAAOC,EAAAA,IAElD6I,GAAO,CAAC7I,EAAW,KAAOwI,GAAM/N,KAAK,CAAEsF,EAAG,MAAOC,EAAAA,IACjD8I,GAAQ9I,GAAYwI,GAAM/N,KAAK,CAAEsF,EAAG,OAAQC,EAAAA,IAC5C+I,GAAO,IAAMP,GAAM/N,KAAK,CAAEsF,EAAG,OAAQC,OAAG,IACxCgJ,GAAQhJ,GAAcwI,GAAM/N,KAAK,CAAEsF,EAAG,OAAQC,EAAAA,IAC9CP,GAAM,EAAGO,EAAAA,KAAaA,EACtB/G,GAAM,EAAG+G,EAAAA,KAAaA,EACtBnC,GAAM,EAAGmC,EAAAA,KAAaA,EACtBiJ,GAAM,EAAGjJ,EAAAA,KAAaA,EACtBH,GAAM,EAAGG,EAAAA,KAAaA,EACtBkJ,GAAQ,EAAGnJ,EAAAA,EAAGC,EAAAA,KAAoB,SAAND,EAAgBC,EAAsB,SAAND,EAGrDoJ,GAAUrK,GACX,QAAVA,EAAIiB,EAcAqJ,GAAU,EAAGrJ,EAAAA,EAAGC,EAAAA,KACd,QAAND,EACI,GAAMC,GACA,QAAND,EACA,IAAKC,GAAc/B,KAAItE,IAAM,CAAEoG,EAAG,MAAOC,EAAGrG,MACtC,SAANoG,EACCC,EAAWnE,KAAKoC,KAAI,CAACsK,EAAGjF,KAAO,CAC9BvD,EAAG,MACHC,EAAG,CAACuI,EAAIvI,EAAWpB,KAAK0E,QAE1B,GAEA+F,GAAazK,GACjBA,EAAKT,QAAO,CAACmL,EAAKtJ,IAAMsJ,EAAMnB,GAAQnI,IAAI,IAEtCuJ,GAAU1H,IACV,GAAIA,GAAQ,GAAM,GACpBA,EAAKiE,MAEP,MAAMjK,EAAOgG,EAAKzD,QAAO,CAACoL,EAAGlG,IAAMA,EAAI,GAAM,IACvC1E,EAAOiD,EAAKzD,QAAO,CAACoL,EAAGlG,IAAMA,EAAI,GAAM,IACvCmG,EAAgB,GACpBC,EAAgB,GAUlB,OATA7N,EAAKmG,SAAQ,CAACzK,EAAK+L,KACjB,MAAMqG,EAAcF,EAAOG,WAAUrB,GAAKsB,GAAQtB,EAAGhR,MAChC,IAAjBoS,GACFF,EAAOhP,KAAKlD,GACZmS,EAAOjP,KAAKmE,EAAK0E,KAEjBoG,EAAOC,GAAe/K,EAAK0E,MAGxB,CACLvD,EAAG,OACHC,EAAG,CAAEnE,KAAM4N,EAAQ7K,KAAM8K,KAIvBI,GAAU,CAAC/I,EAAWL,KAAiC,CAC3DI,EAAG,OACHC,EAAAA,EACAL,OAAAA,IAGIqJ,GAAa,CAACxP,EAAUC,IAC5B,GAAID,KAAO,GAAIC,KAAOD,EAAEyP,MAAK,CAAC1R,EAAGgL,KAAOuG,GAAQvR,EAAGkC,EAAE8I,MAOjDuG,GAAU,CAACtP,EAAQC,KACvB,MAAM,EAAEuF,GAAMxF,EACd,OAAQwF,GAAA,IACD,OACH,OAAO,MACJ,OACH,OAAOxF,EAAEyF,IAAMxF,EAAEwF,EAAA,IACd,MACH,OAAOP,GAAIlF,KAAOkF,GAAIjF,GAAA,IACnB,MACH,OAAOuP,GAAWlM,GAAItD,GAAIsD,GAAIrD,IAAA,IAC3B,OACH,MAjBc,EAACD,EAAQC,KAC3B,MAAOyP,EAAIC,GAAM,CAACjB,GAAI1O,GAAI0O,GAAIzO,IAC9B,OAAO,GAAIyP,EAAGpO,QAAU,GAAIqO,EAAGrO,OAASkO,GAAWE,EAAGpO,KAAMqO,EAAGrO,OAepDsO,CAAY5P,EAAGC,GAAA,IACnB,UACA,UACA,UACA,OACH,OAAOvB,GAAIsB,KAAOtB,GAAIuB,GAAA,IACnB,MACH,OAAOqF,GAAItF,GAAG8K,OAASxF,GAAIrF,GAAG6K,KAElC,OH+C4D,GG5CxD+E,GAAU,EAAGvO,KAAAA,EAAM+C,KAAAA,GAAcrH,KACrC,MAAMkC,EAAMoC,EAAK+N,WAAUrB,GAAKsB,GAAQtB,EAAGhR,KAC3C,OAAgB,IAATkC,EAAkB,CAAEsG,EAAG,OAAQC,OAAG,GAAcpB,EAAKnF,IAGxD4Q,GAAU,EAAGxO,KAAAA,EAAM+C,KAAAA,GAAcrH,EAAUuH,KAC/C,MAAOwL,EAAOC,GAAS,CAAC,GAAM1O,GAAO,GAAM+C,IACrCnF,EAAMoC,EAAK+N,WAAUrB,GAAKsB,GAAQtB,EAAGhR,KAO3C,OANa,IAATkC,EACF8Q,EAAM9Q,GAAOqF,GAEbwL,EAAM7P,KAAKlD,GACXgT,EAAM9P,KAAKqE,IAEA,CAAEjD,KAAMyO,EAAO1L,KAAM2L,IAwDpClE,eAAemE,GACbhK,EACAqB,EACA4I,EACA/J,EACAM,GAEA,MAAM0J,EAAQ9J,GAAgB,CAACkJ,GAAQlJ,EAAKF,IAE5C,GAAIM,EAAY,CACd,MAAM2J,EAAapK,GAAWC,EAAI,GAAIqB,GAAOnB,GAC7C,GAAIiK,EACF,OAAOA,EAIX,CACE,MAAMA,EA5DV,SACEnK,EACAqB,EACAnB,GAEA,MAAM,MAAE3C,EAAK,QAAER,GAAYL,EAAIsD,GACzBC,EAAO,GAAIoB,GACjB,GAAItE,EAAS,CACX,MAAMqN,EAAe/I,EAAK+H,WAAUrP,GAAa,QAARA,EAAEwF,IAC3C,IAAsB,IAAlB6K,EACF,OAEF,MAAMC,EAAWtL,EAAUsC,EAAK+I,GAAc7K,GAC9C,MAAO,CACL+J,GAAQ,GAAGtJ,uCAAwCqK,IAAYnK,IAGnE,IAAK3C,EACH,OAEF,MAAM+M,EAAiB/M,EACpBE,KAAI,CAAC8M,EAAMzH,KACV,GAAIA,GAAK7C,EACP,OAAO,EAET,MAAMuK,EAAUnJ,EAAKyB,GAAGvD,EAClBkL,EAAU1L,EAAUyL,GAC1B,OAAO,GAAQD,IACX,GAAIA,EAAMC,IAER,YAAY1H,EAAI,qBAAqByH,EAClC9M,KAAI8B,GAAKR,EAAUQ,KACnBf,KAAK,cAAciM,IACxBF,IAASC,GAET,YAAY1H,EAAI,aAAa/D,EAAUwL,WAAcE,OAE1D7M,QAAOiG,KAAOA,IACjB,OAAO,GAAIyG,GACPA,EAAe7M,KAAI+B,GAAK8J,GAAgB9J,EAAGU,UAC3C,EAoBiBwK,CAAU1K,EAAIqB,EAAMnB,GACvC,GAAIiK,EACF,OAAOA,EAIX,OAAQnK,GAAA,IACD,MAKH,YAJAgI,GAAM/N,KAAK,CACTsF,EAAG,MACHC,EAAGqJ,GAAUxH,KAEf,IACG,YACA,YAKH,OAHE4I,EAAIjE,IAAIhG,EAAI,CAAC,CAAET,EAAG,MAAOC,EAAGqJ,GAAUxH,WACtCkH,KAEF,IACG,MAEH,YADAF,GAAKhH,GACL,IACG,OAEH,YADA2G,GAAM/N,KAAK8O,GAAO1H,IAClB,IAEG,MAQH,YAPA8G,GACgB,QAAd9G,EAAK,GAAG9B,EACJ,GAAK9G,GAAI4I,EAAK,KACA,QAAdA,EAAK,GAAG9B,EACR,GAAIlC,GAAIgE,EAAK,KACb,GAAIoH,GAAIpH,EAAK,IAAIhG,OAEvB,IACG,SAMH,YALI,GAAMgG,EAAK,GAAG7B,GAChB2I,GAAK,GAAM9G,EAAK,GAAG7B,IAEnB+I,MAEF,IACG,SAEH,OA5OQ/I,EA2OH,IAAImI,GAAQtG,EAAK,WA3OA2G,GAAM/N,KAAK,CAAEsF,EAAG,MAAOC,EAAAA,IA4O7C,IACG,IAEH,YADA0I,IAAMQ,GAAMrH,EAAK,KACjB,IACG,QACA,KACH,QAASyB,EAAI,EAAGiB,EAAM,GAAI1C,GAAOyB,EAAIiB,IAAOjB,EAC1C,GAAIuG,GAAQhI,EAAKyB,EAAI,GAAIzB,EAAKyB,OAAgB,MAAP9C,GAErC,YADAkI,IAAK,GAKT,YADAF,GAAM/N,KAAKoH,EAAK,IAChB,IACG,IAMH,YALA8G,GACgB,IAAd,GAAI9G,IACCpC,GAAIoC,EAAK,IACVA,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAMuE,EAAMvE,KAE7C,IACG,KAEH,YADAiF,GAAKlJ,GAAIoC,EAAK,MAAsB,IAAd,GAAIA,GAAc,EAAIpC,GAAIoC,EAAK,MACrD,IACG,IAEH,YADA8G,GAAK9G,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAMuE,EAAMvE,KAC5C,IACG,IAEH,YADAiF,GAAK9G,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAMuE,EAAMvE,KAC5C,IACG,IAEH,YADAiF,GAAK9G,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAMuE,EAAMvE,KAC5C,IACG,KAEH,YADAiF,GAAK9G,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAM,GAAMuE,EAAMvE,MAClD,IACG,MAEH,YADAiF,GAAK9G,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAMuE,EAAMvE,KAC5C,IACG,MAEH,YADAiF,GAAK9G,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAM,GAAIuE,EAAKvE,MAC/C,IACG,MAEH,YADAiF,GAAK9G,EAAK5D,IAAIwB,IAAKtB,QAAO,CAAC8J,EAAKvE,IAAM,GAAIuE,EAAKvE,MAC/C,IACG,QACA,QACA,SACA,KACH,QAASJ,EAAI,EAAGiB,EAAM,GAAI1C,GAAOyB,EAAIiB,IAAOjB,EAAG,CAC7C,MAAO/I,EAAGC,GAAK,CAASqH,EAAKyB,EAAI,GAAGtD,EAAW6B,EAAKyB,GAAGtD,GACvD,GACU,MAAPQ,GAAcjG,GAAKC,GACZ,MAAPgG,GAAcjG,GAAKC,GACZ,OAAPgG,GAAejG,EAAIC,GACZ,OAAPgG,GAAejG,EAAIC,EAGpB,YADAkO,IAAK,GAKT,YADAA,IAAK,GACL,IACG,MAEH,YADAC,GAAa9G,EAAK,GAAG7B,EAAI,GACzB,IACG,MAEH,YADA2I,GAAa9G,EAAK,GAAG7B,EAAI,GACzB,IACG,MAEH,YADA2I,GAAK,GAAIlJ,GAAIoC,EAAK,MAClB,IACG,KAEH,YADA8G,GAAK,IACL,IACG,UACA,UACA,UACA,WACA,YACA,YACA,WACA,WACA,WACA,QAMH,YALAA,GACE,CAAEtM,IAAG,GAAEC,IAAG,GAAEC,IAAG,GAAEC,KAAI,GAAEC,MAAK,GAAEd,MAAK,GAAEe,KAAI,GAAEI,KAAI,GAAEE,KAAI,GAAEC,MAAK,IAAGuD,GAC7Df,GAAIoC,EAAK,MAGb,IACG,MAEH,YADA6G,GAAK7G,EAAKsJ,MAAMjC,KAChB,IACG,KAEH,YADAR,GAAK7G,EAAKmI,KAAKd,KACf,IACG,WACA,QAEH,YADAR,GAAKjJ,GAAIoC,EAAK,IAAM,IAAc,SAAPrB,EAAgB,EAAI,IAC/C,IACG,WACA,WACA,QAAS,CACZ,MAAMkD,EAAIjE,GAAIoC,EAAK,IAEnB,YADA6G,GAAY,SAAPlI,EAAgBkD,EAAI,EAAW,SAAPlD,EAAgBkD,EAAI,GAAKA,GACtD,IAEG,YACA,WACA,YACA,WACA,YACA,WACA,WACA,QAWH,YAVAgF,GACU,UAAPlI,GAAgC,SAAdqB,EAAK,GAAG9B,GACjB,SAAPS,GAA+B,QAAdqB,EAAK,GAAG9B,GAClB,UAAPS,GAAgC,SAAdqB,EAAK,GAAG9B,GACnB,SAAPS,GAA+B,QAAdqB,EAAK,GAAG9B,GAClB,UAAPS,GAAgC,SAAdqB,EAAK,GAAG9B,GACnB,SAAPS,GAA+B,QAAdqB,EAAK,GAAG9B,GAClB,SAAPS,GAA+B,QAAdqB,EAAK,GAAG9B,GAClB,UAAPS,IAAiC,SAAdqB,EAAK,GAAG9B,GAA8B,QAAd8B,EAAK,GAAG9B,IAExD,IACG,OAEH,YADA2I,GAAK,GAAIzP,GAAI4I,EAAK,IAAK5I,GAAI4I,EAAK,MAChC,IACG,MAAO,CACV,IAAIyB,GAAK,EACT,GAAkB,QAAdzB,EAAK,GAAG9B,EAAa,CACvB,GAAkB,QAAd8B,EAAK,GAAG9B,EACV,OAAO2K,EAAK,oCAEd,KAAI,GAAI7I,GAAQ,GAET,CACL,MAAMpJ,EAAMQ,GAAI4I,EAAK,IAAI9C,MAAM,IAG/B,OAFAtG,EAAIgH,GAAIoC,EAAK,KAAO5I,GAAI4I,EAAK,SAC7B+G,GAAKnQ,EAAIuG,KAAK,KAJdsE,EAAI,GAAOrK,GAAI4I,EAAK,IAAK5I,GAAI4I,EAAK,UAKlC,GAEqB,QAAdA,EAAK,GAAG9B,EAAa,CAC9B,KAAI,GAAI8B,GAAQ,GAET,CACL,MAAM7B,EAAIoJ,GAAQvH,EAAK,IAGvB,OAFA7B,EAAEP,GAAIoC,EAAK,KAAOA,EAAK,QACvBgH,GAAK7I,GAJLsD,EAAIzF,GAAIgE,EAAK,IAAI+H,WAAUrP,GAAKsP,GAAQtP,EAAGsH,EAAK,MAapD,aALW,IAAPyB,EACFyF,KAEAJ,GAAKrF,IAEP,IAEG,UACA,UACA,aACA,aACA,aACA,WACA,QACH,CACE,MAAM8H,EAAUC,GAAOZ,EAAK5I,EAAKV,QAAUT,GACrC4K,EAAOvL,GAAsB,QAANA,GAAqB,QAANA,GAAqB,SAANA,EACrDwL,EACG,QAAP/K,GAAuB,QAAPA,EACZqB,EAAK+H,WAAU,EAAG7J,EAAAA,MAASuL,EAAIvL,KAC/BuL,EAAIzJ,EAAK,GAAG9B,IACX,EACD,EACN,IAAgB,IAAZwL,EAEF,OAAOb,EACL,8DAFcnL,EAAUsC,EAAK0J,GAAQxL,MAMzC,GAAW,QAAPS,EAAc,CAChB,MAAMgL,EAAS3J,EAAK5D,IAAImL,IAClBqC,EAAOD,EAAOvN,IAAI,IAClByN,EAAWD,EAAKxN,KAAI,CAACuL,EAAGlG,IAC5B,GAAMmI,EAAM,EAAGnI,EAAI,GAAGnF,QAAO,CAAC8J,EAAK1E,IAAM0E,EAAM1E,MAEjDmI,EAAStJ,QAAQ,GACjB,MAAMmC,EAAMmH,EAAS5F,MACrB,GAAIvB,EAAMkG,EAAItD,WACZ,MAAO,CAAC,CAAErG,EAAG,SAAUC,EAAG,2BAA4BL,OAAAA,IAExD,MAAM,EAAe,GACrB,QAASX,EAAI,EAAGA,EAAIwE,IAAOxE,EAAG,CAC5B,MAAM4L,EAAUD,EAASzN,KAAI,CAAC2N,EAAGtI,IAAM,GAAOvD,EAAI6L,EAAKH,EAAKnI,MACtDhB,QAAe8I,EAAQI,EAAOvN,KAAI,CAAC1D,EAAG+I,IAAM/I,EAAEoR,EAAQrI,OAC5D,GAAIhB,EACF,OAAOA,EAET,EAAM7H,KAAK+N,GAAM1C,OAGnB,YADA+C,GAAK,GAIP,GAAW,QAAPrI,EAAc,CAChB,MAAMgL,EAAS3J,EAAK5D,IAAImL,IAClByC,EAAW,MAAOL,EAAOvN,IAAI,KAC7B,EAAe,GACrB,QAASqF,EAAI,EAAGA,EAAIuI,IAAYvI,EAAG,CACjC,MAAMhB,QAAe8I,EAAQI,EAAOvN,KAAI1D,GAAKA,EAAE+I,MAC/C,GAAIhB,EACF,OAAOA,EAET,EAAM7H,KAAK+N,GAAM1C,OAGnB,YADA+C,GAAK,GAIP,MAAMnD,EAAQ0D,GAAQvH,EAAKV,SAC3B,GAAW,WAAPX,EAAiB,CACnB,MAAMsL,EAAkB,WAAPtL,EACfuL,EAAgB,SAAPvL,EACTwL,EAAiB,UAAPxL,EACNyL,EAAkB,GACxB,IAAI1N,EAAQ,EACZ,QAAS+E,EAAI,EAAGiB,EAAM,GAAImB,GAAQpC,EAAIiB,IAAOjB,EAAG,CAC9C,MAAMhB,QAAe8I,EAAQ,CAAC1F,EAAMpC,MAAOzB,IAC3C,GAAIS,EACF,OAAOA,EAET,MAAM9H,EAAI0O,GAAMV,GAAM1C,OACtB,GAAIkG,EACFzN,GAAS/D,EAAI,EAAI,MADnB,CAIA,GAAIuR,GAAUvR,EAEZ,YADAgO,GAAM/N,KAAKiL,EAAMpC,IAGdyI,GAAUvR,IAAMsR,GACnBG,EAASxR,KAAKiL,EAAMpC,KAGxB,OAAQ9C,GAAA,IACD,QAEH,YADAmI,GAAKpK,GACL,IACG,OAEH,YADAwK,KACA,QAGA,YADAF,GAAKoD,IAKX,IAAK,GAAIvG,GAMP,YALI,GAAI7D,GACN2G,GAAM/N,KAAKoH,EAAK,IAEhBgH,MAIJ,GAAI,GAAInD,GAAS,IAAM,GAAI7D,GAEzB,YADA,GAAK2G,GAAO9C,GAId,IAAIwG,GAAkB,GAAIrK,GAAQA,EAAO6D,GAAOvE,QAChD,QAASmC,EAAI,EAAGiB,EAAM,GAAImB,GAAQpC,EAAIiB,IAAOjB,EAAG,CAC9C,MAAMhB,QAAe8I,EAAQ,CAACc,EAAWxG,EAAMpC,KAC/C,GAAIhB,EACF,OAAOA,EAET4J,EAAY1D,GAAM1C,MAEpB0C,GAAM/N,KAAKyR,GAEb,WACG,eACA,OACH,CACE,MAAM/J,EAAQ,GAAIN,IACXtH,EAAGC,GAAK,CACb2H,EAAQ,EAAI,EAAI1C,GAAIoC,EAAK,IACf,IAAVM,EACI,EAAI,GAAa,aAAP3B,GAEVf,GADU,IAAV0C,EACIN,EAAK,GACLA,EAAK,KAEf8G,GAAY,aAAPnI,EAAoB,GAAQjG,EAAGC,GAAK,GAAQD,EAAGC,IAEtD,WACG,SACA,MAEH,YADAgO,GAAM/N,KAAY,OAAP+F,EAAcqB,EAAKiE,MAASjE,EAAKV,SAC5C,IACG,SACA,MAAO,CACV,MAAMiK,EAAUC,GAAOZ,EAAK5I,EAAKV,QAAUT,GAC3C,IAAIyL,EAAkBtK,EACtB,GAAW,OAAPrB,EACF2L,EAAW,GAAKtK,EAAK5D,KAAI1D,GAAc,QAARA,EAAEwF,EAAclC,GAAItD,GAAK,CAACA,UACpD,CACL,MAAMA,EAAI4R,EAASrG,MACnB,GAAKqG,EAAU,GAAK,CAAS,QAAR5R,EAAEwF,EAAclC,GAAItD,GAAK,CAACA,MAEjD,aAAa6Q,EAAQe,GAAA,IAElB,OAAQ,CACX,MAAMC,EAAoB,QAAdvK,EAAK,GAAG9B,EACdsM,EAAoB,QAAdxK,EAAK,GAAG9B,EACpB,GAAIqM,EACFvD,GAAK,GAAOhL,GAAIgE,EAAK,IAAKwK,EAAMxO,GAAIgE,EAAK,IAAMuH,GAAQvH,EAAK,WAE5D,GAAIwK,EAAK,CACP,MAAMC,EAAKlD,GAAQvH,EAAK,IACxB2G,GAAM/N,KAAK8O,GAAO,GAAO,GAAKH,GAAQvH,EAAK,IAAI5D,IAAIJ,KAAOyO,SACrD,CACL,MAAM,KAAEzQ,EAAI,KAAE+C,GAASqK,GAAIpH,EAAK,IAC1B0K,EAAKtD,GAAIpH,EAAK,IACpBiH,GAAK,CAAEjN,KAAM,GAAOA,EAAM0Q,EAAG1Q,MAAO+C,KAAM,GAAOA,EAAM2N,EAAG3N,QAG9D,WAEG,OACH,GAAkB,QAAdiD,EAAK,GAAG9B,EAAa,CACvB,MAAMC,EAAInC,GAAIgE,EAAK,IACnB,GAAI,GAAIA,GAAQ,EACdgH,GAAK,GAAO7I,EAAG,CAAC6B,EAAK,UAChB,CACL,MAAM6B,EAAIjE,GAAIoC,EAAK,IACnBgH,GAAK,GAAO,GAAO,GAAM7I,EAAG,EAAG0D,GAAI,CAAC7B,EAAK,KAAM,GAAM7B,EAAG0D,WAGtD,GAAI7B,GAAQ,EACd2G,GAAM/N,KA3cC,GAAGoB,KAAAA,EAAM+C,KAAAA,GAAcrH,KACtC,MAAO+S,EAAOC,GAAS,CAAC,GAAM1O,GAAO,GAAM+C,IACrCnF,EAAMoC,EAAK+N,WAAUrB,GAAKsB,GAAQtB,EAAGhR,KAK3C,OAJa,IAATkC,IACF,GAAO6Q,EAAO7Q,EAAK,GACnB,GAAO8Q,EAAO9Q,EAAK,IAET,CAAEsG,EAAG,OAAQC,EAAS,CAAEnE,KAAMyO,EAAO1L,KAAM2L,KAocpCiC,CAASvD,GAAIpH,EAAK,IAAKA,EAAK,KAEvCiH,GAAKuB,GAAQpB,GAAIpH,EAAK,IAAKA,EAAK,GAAIA,EAAK,KAG7C,WAEG,OAAQ,CACX,MAAM7B,EAAI6B,EAAK,GACT4K,EAAgB,QAARzM,EAAED,EACV2M,EAAOD,EAAQ,GAAI5O,GAAImC,IAAM,GAAK/G,GAAI+G,IAC5C,IAAIzF,EAAI,EACNC,EAAIkS,EACN,OAAQ,GAAI7K,IAAA,KACL,EACHtH,EAAI,EACJ,WACG,EAAG,CACN,MAAMoS,EAAMlN,GAAIoC,EAAK,IACjB8K,EAAM,EACRnS,GAAKmS,EAELpS,GAAKoS,EAEP,WAEG,EAAG,CACN,MAAMC,EAAOnN,GAAIoC,EAAK,IAChBgL,EAAOpN,GAAIoC,EAAK,IACtBtH,EAAIqS,EAAO,EAAIF,EAAOE,GAAQC,EAAO,EAAIA,EAAO,GAAKtS,EAAIqS,EACzDpS,GAAKqS,EAAO,EAAIrS,EAAID,GAAKsS,EACzB,OAKJ,OAFAtS,EAAI,GAAIA,EAAG,GACXC,EAAI,GAAIA,EAAGkS,GACPnS,EAAIC,OACLiS,EAAQ5D,GAAOD,WAGd6D,EACF5D,GAAK,GAAMhL,GAAImC,GAAIzF,EAAGC,IAEtBoO,GAAK,GAAO3P,GAAI4I,EAAK,IAAKtH,EAAGC,EAAID,KAEnC,IAEG,UAMH,YALkB,QAAdsH,EAAK,GAAG9B,EACV6I,GAAKS,GAAU,GAAQD,GAAQvH,EAAK,OAEpCgH,GAAK,GAAQO,GAAQvH,EAAK,OAE5B,IACG,OAAQ,CACX,IAAK,GAAIhE,GAAIgE,EAAK,KAEhB,YADAgH,KAGF,MAAMiE,EAAM1D,GAAQvH,EAAK,IACnBkL,EAAkB,GACxB,GAAkB,IAAd,GAAIlL,GACN,GACEkL,EACAD,EAAI7O,KAAI+B,GAAK,CAACA,EAAGA,UAEd,CACL,MAAMoL,EAAUC,GAAOZ,EAAK5I,EAAKiE,MAAQpF,GACzC,QAAS4C,EAAI,EAAGiB,EAAM,GAAIuI,GAAMxJ,EAAIiB,IAAOjB,EAAG,CAC5C,MAAMhB,QAAe8I,EAAQ,CAAC0B,EAAIxJ,KAClC,GAAIhB,EACF,OAAOA,EAETyK,EAAOtS,KAAK,CAACqS,EAAIxJ,GAAIkF,GAAM1C,SAG/B,MAAMwF,EAAMyB,EAAO,GAAG,GAAGhN,EACzB,OAAIgN,EAAO/C,MAAK,EAAER,GAAKzJ,MAASA,IAAMuL,IAAQ,GAAI,CAAC,MAAO,OAAQvL,KACzD2K,EAAK,8CAEVvB,GAAO4D,EAAO,GAAG,IACnB,GAAOA,GAAQ,EAAEzU,EAAGiC,IAAKP,EAAGQ,KAAQiF,GAAIlF,GAAKkF,GAAIjF,GAAK,GAAK,IAE3D,GAAOuS,GAAQ,EAAEzU,EAAGiC,IAAKP,EAAGQ,KAAQvB,GAAIsB,GAAKtB,GAAIuB,GAAK,GAAK,SAE7DqO,GAAKkE,EAAO9O,KAAI,EAAE+B,KAAOA,MACzB,IAEG,QAAS,CACZ,MAAOzF,EAAGC,EAAGb,GAAKkI,EAAK5D,IAAIwB,IACrBuN,EAAWrT,GAAKA,EAAI,GAAKY,EAAIC,GAC5BlC,EAAG0B,GACR,GAAI6H,GAAQ,EAAKmL,EAAW,CAACxS,EAAI,EAAGD,EAAI,GAAK,CAACA,EAAGC,GAAM,CAAC,EAAGD,GACvD0S,EAAO,IAAMjT,EAAI1B,IAAMqB,GAAK,KAAOA,GAAK,GACxC4E,EAAQ,GAAK,IAAKvE,EAAI1B,GAAK2U,IACjC,IAAK1O,EAEH,YADAsK,GAAK,IAGP,GAAItK,EAAQkM,EAAIrD,YACd,MAAO,CAAC,CAAEtG,EAAG,SAAUC,EAAG,wBAAyBL,OAAAA,IAErD+J,EAAIrD,aAAe7I,EACnB,MAAM2O,EAAO,GAAM3O,GAAON,KAAIyF,GAAKA,EAAIuJ,EAAO3U,IAE9C,YADAuQ,GAAKqE,EAAKjP,KAAI+B,IAAU,CAAED,EAAG,MAAOC,EAAAA,OACpC,IAEG,SAEH,YADA0I,IAAM,GAAIU,GAAQvH,EAAK,MACvB,IACG,WACA,OAEH,YADAgH,GAAKI,GAAIpH,EAAK,IAAW,SAAPrB,EAAgB,OAAS,SAC3C,IACG,QAMH,YALAqI,GACE5P,GAAI4I,EAAK,IACN9C,MAAM,GAAI8C,GAAQ,EAAI5I,GAAI4I,EAAK,IAAM,KACrC5D,KAAI+B,IAAU,CAAED,EAAG,MAAOC,EAAAA,OAE/B,IACG,OAMH,YALA4I,GACE/K,GAAIgE,EAAK,IACN5D,IAAIkK,IACJnJ,KAAK,GAAI6C,GAAQ,EAAI5I,GAAI4I,EAAK,IAAM,MAEzC,IACG,eAEH,YADA6G,GAAK,GAAOzP,GAAI4I,EAAK,IAAK5I,GAAI4I,EAAK,MACnC,IACG,aAEH,YADA6G,GAAK,GAAKzP,GAAI4I,EAAK,IAAK5I,GAAI4I,EAAK,MACjC,IACG,iBACA,iBACA,WACA,iBACA,WAYH,YAXA+G,IACU,eAAPpI,EACG,GACO,eAAPA,EACA,GACO,SAAPA,EACA,GACO,eAAPA,EACA,GACA,IAASvH,GAAI4I,EAAK,MAExB,IACG,OAAQ,CACX,MAAMX,EAAOjI,GAAI4I,EAAK,IAMtB,YALA+G,GACE,GAAM,GAAInJ,GAAIoC,EAAK,IAAK,IACrB5D,KAAIyF,GAAKxC,IACTlC,KAAK,KAEV,IAEG,OAEH,YADA2J,GAAK,MACL,IACG,UAEH,YADAA,GAvxBwB,UAwxBxB,IACG,QACH,CACE,MAAMxJ,QAAcwH,GAAQC,KAAU,GAAI/E,IAASqH,GAAMrH,EAAK,MACxDsL,EAAUhO,EAAM2G,MACtB,UAAWsH,KAAQjO,QACXqL,GAAM,QAAS,CAAC,CAAExK,EAAGoN,EAAMrN,EAAG,QAAU0K,EAAK/J,GAAQ,GAE7DkI,GAAKuE,GAEP,WACG,UAEH,YADAtE,GAoZC,SAAiB4B,EAAU4C,GAAa,GAC7C,IAAIC,EAAOD,EAAa,CAAC,YAAc,GACvCC,EAAO,GAAOA,EAAM,GAAQpQ,IAC5BoQ,EAAO,GAAOA,EAAM,GAAQ7C,EAAIzD,IAAInC,QACpCyI,EAAO,GAAOA,EAAM,GAAQ7C,EAAIzD,IAAIC,OACpC,MAAMsG,EAAS,CAAC,SAChB,OAAOD,EAAKlP,QAAO5G,IAAM,GAAI+V,EAAQ/V,KA1Z5B4H,CAAQqL,GAAK,GAAOxM,KAAI+B,IAAM,CAAED,EAAG,MAAOC,EAAAA,OAC/C,IACG,OAAQ,QACJyK,EAAIzD,IAAInC,MAAa,MAC5B,MAAM2I,EAAO,GAAIhF,IACXlG,QAAemL,GAAYhD,EAAKxR,GAAI4I,EAAK,IAAKnB,EAAOgC,cAC3D,OAAIJ,GACFA,EAAON,SAAQlB,IACbA,EAAEJ,OAAOgC,aAAe,eAEnB,CACL,CAAE5B,EAAG,OAAQC,EAAG,8BAA+BL,OAAAA,MAC5C4B,SAGHkL,IAAS,GAAIhF,KACfO,MAEF,IAEG,QAKH,OAJA0B,EAAIzD,IAAIC,KAAO,GACfwD,EAAIzD,IAAInC,MAAQ,GAChB4D,GAAO,QACPM,KA7wBO,IAAC/I,EAixBZ,MAAO,CAAC,CAAEc,EAAG,aAAcC,EAAG,0BAA2BL,OAAAA,IAG3D,SAAS2K,GACPZ,EACAjK,EACAE,EACAM,GAAa,GAEb,MAAM0M,EAAiB,CAAC,CAAE5M,EAAG,QAASC,EAAG,wBAAyBL,OAAAA,IAClE,GA/wBU,QA+wBCF,EA/wBPT,GAQM,SAuwBeS,EAvwBrBT,EAuwB0B,CAC5B,MAAMsF,EAAO7E,EAAGR,EAChB,OAAI9C,EAAImI,GACElF,GAAkBqK,GAAMnF,EAAMlF,EAAQsK,EAAK/J,EAAQM,GAEzDqE,KAAQoF,EAAIzD,IAAInC,MACV1E,GAAkBwN,GAAQlD,EAAKA,EAAIzD,IAAInC,MAAMQ,GAAOlF,GAE1DkF,KAAQoF,EAAIzD,IAAIC,KACXoE,GAAOZ,EAAKA,EAAIzD,IAAIC,KAAK5B,GAAO3E,GAErC2E,KAAQoD,GAAK,GAAIA,IAAQ,GACpB4C,GAAOZ,EAAKhC,GAAK,GAAIA,IAAQ,GAAGpD,GAAO3E,GAE5C,GAAO2E,EAAM,KACRgB,MAAOlG,IACZ,IAAK,GAAIA,GACP,OAAOuN,EAET,MAAMpM,QAAYmJ,EAAIlE,IAAI,GAAOlB,EAAM,GAAIlF,EAAO,IAElD,OADAqI,GAAM/N,KAAK0F,EAAO,IACXmB,EAAM,CAAC,CAAER,EAAG,WAAYC,EAAGO,EAAKZ,OAAAA,SAAY,GAGhD2F,MAAOlG,IACZ,MAAM,IAAEmB,EAAG,MAAElJ,SAAgBqS,EAAIjE,IAAInB,EAAMlF,GAI3C,OAHKmB,GACHkH,GAAM/N,KAAKrC,GAENkJ,EAAM,CAAC,CAAER,EAAG,WAAYC,EAAGO,EAAKZ,OAAAA,SAAY,MAnyBnC,CAAC5B,GACX,QAAVA,EAAIiB,EAoyBO6N,CAAOpN,GAChB,OAAQL,GAAkBwN,GAAQlD,EAAKjK,EAAGR,EAAGG,GAAA,GApyB3B,CAACrB,GACX,QAAVA,EAAIiB,EAoyBO8N,CAAOrN,GAChB,OAAO6F,MAAOlG,IACZ,IAAK,GAAIA,GACP,OAAOuN,EAET,GAAoB,SAAhBvN,EAAO,GAAGJ,EAAc,CAC1B,MAAMkL,EAAU1L,EAAUY,EAAO,GAAGJ,GACpC,MAAO,CACL+J,GACE,yDAAyDmB,IACzDvK,IAIN8H,GAAM/N,KAAK2P,GAAQnB,GAAI9I,EAAO,IAAKK,KACnC,GAEO2I,GAAO3I,GAAK,CACrB,MAAMkD,EAAI,GAAMlD,EAAGR,GACnB,OAAOqG,MAAOlG,IACZ,IAAK,GAAIA,GACP,OAAOuN,EAET,MAAMnT,EAAI4F,EAAO,GACjB,GAAY,QAAR5F,EAAEwF,GAAuB,QAARxF,EAAEwF,GAAuB,SAARxF,EAAEwF,EAAc,CACpD,MAAMkL,EAAU1L,EAAUhF,EAAEwF,GAC5B,MAAO,CACL+J,GACE,2EAA2EmB,IAC3EvK,IAIN,MAAMjI,EAAM2Q,GAAQ7O,GAChB,GAAImJ,IAAM,GAAIjL,GAChBsQ,KACSrF,EAAI,EACb8E,GAAM/N,KAAKhC,EAAI,GAAIA,GAAOiL,IAE1B8E,GAAM/N,KAAKhC,EAAIiL,KAEjB,GAt1BgB,CAAC5E,GACX,QAAVA,EAAIiB,EAu1BO+N,CAAOtN,GAAK,CACrB,MAAM,EAAER,GAAMQ,EACd,OAAO6F,MAAOlG,IACZ,IAAK,GAAIA,GACP,OAAOuN,EAET,MAAMK,EAAQ/N,EAAE1B,MAAKQ,GAAO+K,GAAQ/K,EAAKqB,EAAO,MAC5C4N,EACFvF,GAAM/N,KAAKsT,GAEXhF,MAEF,GAl2BgB,CAACjK,GACX,SAAVA,EAAIiB,EAm2BOiO,CAAOxN,GAAK,CACrB,MAAM1C,EAAO0C,EAAGR,EAChB,OAAOqG,MAAOlG,IACZ,GAAoB,IAAhB,GAAIA,GACNqI,GAAM/N,KAAK2P,GAAQtM,EAAMqC,EAAO,aACP,IAAhB,GAAIA,GAGb,MAAO,CACL,CACEW,EAAG,QACHC,EAAG,0DACHL,OAAAA,IANJoI,GAAKuB,GAAQvM,EAAMqC,EAAO,GAAIA,EAAO,OAUvC,GA52BgB,CAACrB,GACX,SAAVA,EAAIiB,EA62BOkO,CAAOzN,GAAK,CACrB,MAAMkB,EAAOlB,EAAGR,EAChB,OAAOqG,MAAOlG,IACZ,IAAK,GAAIA,IAAW,GAAIA,GAAU,EAChC,MAAO,CACL,CACEW,EAAG,QACHC,EAAG,uDACHL,OAAAA,IAIN8H,GAAM/N,KACJiH,EACIvB,EAAO,GACP,GAAIA,GAAU,EACdA,EAAO,GACP,CAAEJ,EAAG,OAAQC,OAAG,KAK1B,OAAOqG,MAAMmD,GAAK,CAChB,CAAE1I,EAAG,YAAaC,EAAG,GAAGoH,GAAQ3H,6BAA+BE,OAAAA,IAInE,SAASwN,GAAa5L,GACpB,MAAM6L,EAAS,CAACvC,EAASrD,EAAWvI,IAClCqK,GAAQuB,EAAG,CAAE7L,EAAG,MAAOC,EAAGuI,GAAKvI,GACjC,OAAOsC,EAAOrE,KAAI,EAAG6C,EAAGC,EAAAA,EAAGL,OAAAA,MACzB,IAAI5C,EAAOqQ,EAAO,CAAEtS,KAAM,GAAI+C,KAAM,IAAM,KAAM,CAAEmB,EAAG,MAAOC,EAAGc,IAI/D,OAHAhD,EAAOqQ,EAAOrQ,EAAM,KAAM,CAAEiC,EAAG,MAAOC,EAAGe,IACzCjD,EAAOqQ,EAAOrQ,EAAM,QAAS,CAAEiC,EAAG,MAAOC,EAAGU,EAAO0C,OACnDtF,EAAOqQ,EAAOrQ,EAAM,OAAQ,CAAEiC,EAAG,MAAOC,EAAGU,EAAO2C,MACtC,CAAEtD,EAAG,OAAQC,EAAGlC,MAIzBuI,eAAesH,GACpBlD,EACA7K,EACAiC,EACAuM,GAAY,KAEV3D,EAAIpD,WACD+G,GACH3F,GAAKhO,KAAK,IAEZ,MAAM4T,EAAW,GAAI7F,IACrB,QAASlF,EAAI,EAAGiB,EAAM,GAAI3E,EAAK4B,KAAM8B,EAAIiB,IAAOjB,EAAG,CACjD,MAAM,IAAErC,EAAG,MAAE7I,EAAK,OAAEsI,GAAWd,EAAK4B,IAAI8B,GAElCgL,EAAe7D,EAAItD,WAAa,EACtC,GAAImH,GAAgB7D,EAAIpD,WAAa,EACnC,MAAO,CACL,CACEvG,EAAG,SACHC,GAAMuN,EAAe,SAAW,UAA7B,kBACH5N,OAAAA,IAKN,OAAQO,GAAA,IACD,MACHuH,GAAM/N,KAAKrC,GACX,UACG,MACHqS,EAAIzD,IAAIC,KAAK7O,GAAmBoQ,GAAM,GAAIA,IAAS,GACnD,UACG,MACHC,GAAK,GAAIA,IAAQ,GAAGrQ,GAAmBoQ,GAAM,GAAIA,IAAS,GAC1D,UACG,UACA,MACH,CACE,MAAM+F,EAAWnW,GACC,IAAdmW,EACF1F,GAAKhH,GACI,GAAIA,IAAS0M,EACtBxF,KAEAP,GAAM/N,KAAKoH,EAAK0M,IAGpB,UACG,MACH,CACE,MAAMlJ,EAAOjN,EACb,GAAI8E,EAAImI,GACN2D,GAAK3D,QAAA,GACI,GAAOA,EAAM,KAAM,CAC5B,MAAQjN,MAAA,MAAOkJ,SAAcmJ,EAAI7S,IAAI,GAAOyN,EAAM,IAClD,GAAI/D,EACF,MAAO,CAAC,CAAER,EAAG,WAAYC,EAAGO,EAAKZ,OAAAA,IAEnC8H,GAAM/N,KAAK,WACF4K,KAAQoF,EAAIzD,IAAIC,KACzBuB,GAAM/N,KAAKgQ,EAAIzD,IAAIC,KAAK5B,SAAA,GACfA,KAAQoD,GAAK,GAAIA,IAAQ,GAClCD,GAAM/N,KAAKgO,GAAK,GAAIA,IAAQ,GAAGpD,QAAA,MACtBA,KAAQoF,EAAIzD,IAAInC,OAGzB,MAAO,CAAC,CAAE/D,EAAG,YAAaC,EAAG,IAAIsE,mBAAuB3E,OAAAA,IAFxDsI,GAAK3D,IAKT,UACG,MACH,CACE,MAAM+F,EAAUC,GAAOZ,EAAKjC,GAAM1C,MAAQpF,GAAQ,GAC5CyB,EAAQ/J,EACR+H,EAAS,GAAOqI,GAAO,GAAIA,IAASrG,EAAOA,GAC3CG,QAAe8I,EAAQjL,GAC7B,GAAImC,EAAQ,CACV,GAAIgB,EAAI,IAAMiB,GAA+B,QAAxB3E,EAAK4B,IAAI8B,EAAI,GAAGrC,IAAe,GAChDqC,EACFmF,GAAK,GAAIA,IAAQ,GAAW,OAAI,CAC9B1I,EAAG,MACHC,EAAGkO,GAAa5L,IAElB,MAEF,OAAOA,GAGX,UACG,KACC4G,GAAMV,GAAM,GAAIA,IAAS,IAC3BlF,GAAKlL,EAELoQ,GAAM1C,MAER,UACG,KACEoD,GAAMV,GAAM1C,SACfxC,GAAKlL,GAEP,UACG,UACA,MACHkL,GAAKlL,EACL,UACG,MACHkL,GAAKlL,IACHqS,EAAItD,WACN,UACG,MACH,GAAOqB,GAAO,GAAIA,IAAUpQ,EAAkBA,GAC9C,UACG,MACCA,EACF,GAAOoQ,GAAO,EAAG,GAAIA,IAAS,GAE9BO,KAEFzF,EAAIiB,EACJ,UACG,MACH,CACEkE,GAAK,GAAIA,IAAQ,GAAK,GACtBnF,GAAK,EACL,MAAMnB,EAAQ/J,EAGd,GAFAyJ,EAAO,GAAO2G,GAAO,GAAIA,IAASrG,EAAOA,KACvCsI,EAAInD,aACDmD,EAAInD,YACP,MAAO,CAAC,CAAExG,EAAG,SAAUC,EAAG,0BAA2BL,OAAAA,IAGzD,aACG,UACA,MACH,CACE,IAAK2E,EAAM7D,GAAOpJ,EAClB,MAAMoW,EAAY,EAAGvN,IAAA,EAAK7I,MAAA,KACf,QAAR,IACEoJ,EAAIlD,MAAK,GAAe,QAAV,EAAE2C,KAAiB,EAAE7I,QAAU,KACxC,QAAR,EACIqW,EAAkB,CACtBpJ,KAAM,GACN7D,IAAKA,EAAIpD,OAAOoQ,IAEZlM,QAAeqL,GAAQlD,EAAKgE,EAAW5M,GAAM,GACnD,GAAIS,EACF,OAAOA,EAET,MAAMoM,EAAS,GAAID,EAAUjN,KACvBmN,EAAW,GAAOnG,GAAO,GAAIA,IAASkG,EAAQA,GAOpD,GANAlN,EAAMA,EAAIvD,KAAI,GACZuQ,EAAU,GACD,CAAEvN,IAAK,MAAO7I,MAAOuW,EAASxN,QAAUT,OAAAA,GAC7C,IAGM,QAARO,EAAe,CACjB,MAAQ7I,MAAA,EAAOsI,OAAA,GAAWc,EAAIsE,MACxB8I,EAAIpN,EAAIsE,MACdtE,EAAIY,QAAQ,CAAEnB,IAAK,MAAO7I,MAAOwW,EAAExW,MAAOsI,OAAA,IAC1Cc,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,OAAQ,EAAGsI,OAAA,IAClCc,EAAI/G,KAAK,CACPwG,IAAK,MACL7I,MAAY,CAAE2H,EAAG,MAAOC,EAAG,OAC3BU,OAAA,IAEFc,EAAI/G,KAAK,CAAEwG,IAAK,MAAO7I,MAAe,EAAQ,EAAGsI,OAAA,IAEnD8H,GAAM/N,KAAU,CAAEsF,EAAG,MAAOC,EAAS,CAAEqF,KAAAA,EAAM7D,IAAAA,OAOhD4M,IACH3F,GAAK3C,MACL,GAAO0C,GAAO6F,EAAU,GAAI7F,KAAU6F,EAAW,KAKrDhI,eAAeoH,GACbhD,EACAhI,EACAC,GAEA,MAAML,EAASG,GAAMC,EAAMC,GAC3B,OAAI,GAAIL,EAAOC,QACND,EAAOC,QAEhBmI,EAAIzD,IAAInC,MAAQ,IAAK4F,EAAIzD,IAAInC,SAAUxC,EAAOwC,OACxC,UAAW4F,EAAIzD,IAAInC,YAGZ8I,GAAQlD,EAAKA,EAAIzD,IAAInC,MAAa,MAAG,SAHlD,GAMKwB,eAAeO,GACpB6D,EACAhI,EACAC,EACAmM,GAAc,GAEd,MAAM,WAAExH,EAAU,WAAEF,EAAU,YAAEG,EAAW,YAAEF,GAAgBqD,EACvDnI,QAAemL,GAAYhD,EAAKhI,EAAMC,GAW5C,OAVA+H,EAAIpD,WAAaA,EACjBoD,EAAInD,YAAcA,EAClBmD,EAAItD,WAAaA,EACjBsD,EAAIrD,YAAcA,SACXqD,EAAIzD,IAAInC,MAAa,OACvBvC,GAAUuM,GAAe,GAAIrG,WAC1BiC,EAAIjE,IAAI,QAAS,CAAC,CAAEzG,EAAG,MAAOC,EAAGmI,GAAQK,GAAM,GAAIA,IAAS,OAEpEA,GAAQ,GACRC,GAAO,GACAnG,GAAU,GC5qCnB,MAAMwM,GAAc,IAAI/H,IACXgI,GAAW,eAEjB1I,eAAe2I,GAAQvE,EAAUhI,GACtC,MAAMwM,EAAOlT,IAAYmT,WACzBJ,GAAYvI,IAAI0I,EAAMxM,GACtB,MAAMH,QAAesE,GAAO6D,EAAKhI,EAAMwM,GAAM,GAC7C,IAAIvI,EAAmB,GAyBvB,OAxBApE,EAAON,SAAQ,EAAGlB,EAAGC,EAAAA,EAAGL,QAAU0C,KAAAA,EAAMC,IAAAA,EAAKX,aAAAA,OAC3C,MAAMyM,EAAaL,GAAYlX,IAAI8K,GACnC,IAAKyM,EAKH,YAJAzI,EAAIjM,KAAK,CACP2U,KAAM,UACNlO,KAAM,GAAGJ,iBAAiBsC,SAAYC,MAAQtC,QAIlD,MAAMsO,EAAWF,EAAWpQ,MAAM,MAAMqE,EAAO,GACzCkM,EAAMhW,EAAO+V,EAAUhM,EAAM,GAAGtE,MAAMgQ,IAAU,GAChDQ,EAAQnU,EAAU9B,EAAO+V,EAAU,EAAGhM,EAAM,IAElD,GADAqD,EAAIjM,KAAK,CAAE2U,KAAM,UAAWlO,KAAM5F,EAAO,GAAG8H,IAAQ,GAAKmM,IACpDD,EAIE,CACL,MAAME,EAAQlW,EAAO+V,EAAUhM,EAAM,EAAIrK,EAAKsW,IAC9C5I,EAAIjM,KAAK,CAAE2U,KAAM,QAASlO,KAAMoO,IAChC5I,EAAIjM,KAAK,CAAE2U,KAAM,UAAWlO,KAAM,GAAGsO,YAP7B,CACR,MAAMA,EAAQlW,EAAO+V,EAAUhM,GAC/BqD,EAAIjM,KAAK,CAAE2U,KAAM,QAASlO,KAAMmO,EAAShM,EAAM,KAC/CqD,EAAIjM,KAAK,CAAE2U,KAAM,UAAWlO,KAAM,GAAGsO,QAMvC9I,EAAIjM,KAAK,CAAE2U,KAAM,UAAWlO,KAAM,GAAGJ,YAAYC,YAE5C2F,E","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = (arr: unknown[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const pi = Math.PI;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;","export type Val = {\n  v: Val[] | Dict | undefined | string | number | boolean | Func;\n  t:\n    | \"null\"\n    | \"str\"\n    | \"num\"\n    | \"bool\"\n    | \"key\"\n    | \"ref\"\n    | \"vec\"\n    | \"dict\"\n    | \"func\"\n    | \"clo\";\n};\n\nexport type ErrCtx = { invocationId: string; line: number; col: number };\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\nexport type ExternalError = undefined | string;\nexport type ValAndErr = { value: Val; err?: ExternalError };\n\nexport type Dict = {\n  keys: Val[];\n  vals: Val[];\n};\n\nexport type Func = {\n  name: string;\n  ins: Ins[];\n};\nexport type Funcs = { [key: string]: Func };\nexport type Env = {\n  funcs: Funcs;\n  vars: { [key: string]: Val };\n};\n\nexport type Ctx = {\n  set: (key: string, val: Val) => Promise<ExternalError>;\n  get: (key: string) => Promise<ValAndErr>;\n  exe: (name: string, args: Val[]) => Promise<ValAndErr>;\n  env: Env;\n  loopBudget: number;\n  rangeBudget: number;\n  callBudget: number;\n  recurBudget: number;\n};\n\nexport type InsType =\n  | \"val\" //Stack Val\n  | \"npa\" //Named parameter\n  | \"upa\" //Unnamed parameter\n  | \"var\"\n  | \"let\"\n  | \"ref\"\n  | \"exe\"\n  | \"if\"\n  | \"jmp\" //Inexpensive jump\n  | \"loo\" //Expensive jump\n  | \"pop\" //Truncate stack\n  | \"or\"\n  | \"ret\" //Return\n  | \"rec\" //Recur\n  | \"cat\" //Catch\n  | \"clo\" //Closure\n  | \"par\"; //Partial closure\nexport type Ins = {\n  typ: InsType;\n  value: unknown;\n  errCtx: ErrCtx;\n};\n\nexport const ops: {\n  [name: string]: {\n    minArity?: number;\n    maxArity?: number;\n    exactArity?: number;\n    onlyNum?: boolean;\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\n    returns?: Val[\"t\"][];\n  };\n} = {\n  print: {},\n  \"print-str\": {},\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\n  \"=\": { minArity: 2 },\n  \"!=\": { minArity: 2 },\n  \"+\": { minArity: 2, onlyNum: true },\n  \"-\": { minArity: 1, onlyNum: true },\n  \"*\": { minArity: 2, onlyNum: true },\n  \"/\": { minArity: 2, onlyNum: true },\n  \"//\": { minArity: 2, onlyNum: true },\n  \"**\": { minArity: 1, onlyNum: true },\n  \"<\": { minArity: 2, onlyNum: true },\n  \">\": { minArity: 2, onlyNum: true },\n  \"<=\": { minArity: 2, onlyNum: true },\n  \">=\": { minArity: 2, onlyNum: true },\n  inc: { exactArity: 1, onlyNum: true },\n  dec: { exactArity: 1, onlyNum: true },\n  min: { minArity: 2, onlyNum: true },\n  max: { minArity: 2, onlyNum: true },\n  abs: { exactArity: 1, onlyNum: true },\n  pi: { exactArity: 0 },\n  sqrt: { exactArity: 1, onlyNum: true },\n  round: { exactArity: 1, onlyNum: true },\n  floor: { exactArity: 1, onlyNum: true },\n  ceil: { exactArity: 1, onlyNum: true },\n  logn: { exactArity: 1, onlyNum: true },\n  log2: { exactArity: 1, onlyNum: true },\n  log10: { exactArity: 1, onlyNum: true },\n  and: { minArity: 1 },\n  or: { minArity: 1 },\n  \"odd?\": { exactArity: 1, onlyNum: true },\n  \"even?\": { exactArity: 1, onlyNum: true },\n  \"pos?\": { exactArity: 1, onlyNum: true },\n  \"neg?\": { exactArity: 1, onlyNum: true },\n  \"zero?\": { exactArity: 1, onlyNum: true },\n  \"null?\": { exactArity: 1 },\n  \"num?\": { exactArity: 1 },\n  \"bool?\": { exactArity: 1 },\n  \"str?\": { exactArity: 1 },\n  \"vec?\": { exactArity: 1 },\n  \"dict?\": { exactArity: 1 },\n  \"key?\": { exactArity: 1 },\n  \"func?\": { exactArity: 1 },\n  rem: { minArity: 2, onlyNum: true },\n  sin: { exactArity: 1, onlyNum: true },\n  cos: { exactArity: 1, onlyNum: true },\n  tan: { exactArity: 1, onlyNum: true },\n  vec: {},\n  dict: {},\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\n  \"to-num\": { exactArity: 1, types: [[\"str\", \"num\"]] },\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]] },\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"] },\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]] },\n  map: { minArity: 2 },\n  for: { minArity: 2 },\n  reduce: { minArity: 2, maxArity: 3 },\n  filter: { minArity: 2 },\n  remove: { minArity: 2 },\n  find: { minArity: 2 },\n  count: { minArity: 2 },\n  str: {},\n  rand: { maxArity: 2, onlyNum: true },\n  \"rand-int\": { maxArity: 2, onlyNum: true },\n  while: {},\n  \"..\": { minArity: 2 },\n  \"...\": { minArity: 2 },\n  into: {\n    exactArity: 2,\n    types: [\n      [\"vec\", \"dict\"],\n      [\"vec\", \"dict\"],\n    ],\n  },\n  push: { minArity: 2, maxArity: 3, types: [[\"vec\", \"dict\"]] },\n  sect: { minArity: 1, maxArity: 3, types: [[\"vec\", \"str\"], \"num\", \"num\"] },\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]] },\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"] },\n  keys: { exactArity: 1, types: [\"dict\"] },\n  vals: { exactArity: 1, types: [\"dict\"] },\n  do: { minArity: 1 },\n  val: { minArity: 1 },\n  range: { minArity: 1, maxArity: 3, types: [\"num\", \"num\", \"num\"] },\n  \"empty?\": { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"] },\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"] },\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\n  \"lower-case\": { exactArity: 1, types: [\"str\"] },\n  \"upper-case\": { exactArity: 1, types: [\"str\"] },\n  trim: { exactArity: 1, types: [\"str\"] },\n  \"trim-start\": { exactArity: 1, types: [\"str\"] },\n  \"trim-end\": { exactArity: 1, types: [\"str\"] },\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"] },\n  time: { exactArity: 0 },\n  version: { exactArity: 0 },\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"] },\n  symbols: { exactArity: 0 },\n  eval: { exactArity: 1, types: [\"str\"] },\n  reset: { exactArity: 0 },\n};\n\nexport const typeNames = {\n  null: \"null\",\n  str: \"string\",\n  num: \"number\",\n  bool: \"boolean\",\n  key: \"keyword\",\n  ref: \"reference\",\n  vec: \"vector\",\n  dict: \"dictionary\",\n  func: \"function\",\n  clo: \"closure\",\n};\n\nexport const assertUnreachable = (_x: never): never => <never>0;\n","import * as pf from \"./poly-fills\";\nconst { concat, has, flat, push, slice } = pf;\nconst { slen, starts, sub, substr, strIdx } = pf;\nconst { isNum, len, toNum } = pf;\nimport { ErrCtx, Func, Funcs, Ins, InvokeError, ops, Val } from \"./types\";\nimport { assertUnreachable } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype NamedTokens = {\n  name: string;\n  tokens: Token[];\n  errCtx: ErrCtx;\n};\ntype ParserIns = Omit<Ins, \"typ\"> & { typ: Ins[\"typ\"] | \"err\" };\nconst nullVal: Val = { t: \"null\", v: undefined };\n\nexport function tokenise(\n  code: string,\n  invocationId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const digits = \"0123456789\";\n  let inString = false,\n    isEscaped = false,\n    inStringAt = [0, 0],\n    inSymbol = false,\n    inNumber = false,\n    inComment = false,\n    line = 1,\n    col = 0;\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (inComment) {\n      if (c === \"\\n\") {\n        inComment = false;\n        ++line;\n        col = 0;\n      } else if (emitComments) {\n        tokens[len(tokens) - 1].text += c;\n      }\n      continue;\n    }\n    if (isEscaped) {\n      isEscaped = false;\n      if (inString) {\n        tokens[len(tokens) - 1].text +=\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\n      }\n      continue;\n    }\n    if (c === \"\\\\\") {\n      isEscaped = true;\n      continue;\n    }\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({\n          typ: \"str\",\n          text: \"\",\n          errCtx: { invocationId, line, col },\n        });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      inComment = true;\n      if (emitComments) {\n        tokens.push({\n          typ: \"rem\",\n          text: \"\",\n          errCtx: { invocationId, line, col },\n        });\n      }\n      continue;\n    }\n    const errCtx: ErrCtx = { invocationId, line, col };\n    const isDigit = (ch: string) => sub(digits, ch);\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or convert into symbol\n    if (inNumber && !isDigit(c)) {\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const parens: { [ch: string]: Token[\"typ\"] } = {\n          \"[\": \"(\",\n          \"{\": \"(\",\n          \"(\": \"(\",\n          \")\": \")\",\n          \"}\": \")\",\n          \"]\": \")\",\n        };\n        const text = parens[c]!;\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps) {\n          if (c === \"[\") {\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\n          } else if (c === \"{\") {\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\n          }\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inSymbol = !inNumber;\n      let typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\nfunction segment(tokens: Token[]): Token[][] {\n  const segments: Token[][] = [[]];\n  let depth = 0;\n  tokens.forEach(token => {\n    segments[len(segments) - 1].push(token);\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\n    if (depth === 0) {\n      segments.push([]);\n    }\n  });\n  return segments;\n}\n\nfunction funcise(segments: Token[][]): NamedTokens[] {\n  const isFunc = (segment: Token[]) =>\n    len(segment) > 1 &&\n    segment[1].typ === \"sym\" &&\n    segment[1].text === \"function\";\n  const funcs = segments.filter(t => isFunc(t));\n  const entries = flat(segments.filter(t => !isFunc(t)));\n  const described = funcs.map(tokens => ({\n    name: tokens[2].text,\n    tokens: slice(tokens, 3),\n    errCtx: tokens[2].errCtx,\n  }));\n  return len(entries)\n    ? concat(described, [\n        {\n          name: \"entry\",\n          tokens: entries,\n          errCtx: entries[0].errCtx,\n        },\n      ])\n    : described;\n}\n\nfunction parseAllArgs(tokens: Token[], params: string[]) {\n  const body: ParserIns[] = [];\n  while (true) {\n    const exp = parseArg(tokens, params);\n    if (!len(exp)) {\n      break;\n    }\n    push(body, exp);\n  }\n  return body;\n}\n\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\n  const { exactArity, maxArity, minArity } = ops[op];\n  const aErr = (msg: string, amount: number) => [\n    <InvokeError>{\n      e: \"Arity\",\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\n      errCtx,\n    },\n  ];\n  if (exactArity !== undefined) {\n    if (nArg !== exactArity) {\n      return aErr(`exactly ${exactArity}`, exactArity);\n    }\n  } else {\n    if (minArity && !maxArity && nArg < minArity) {\n      return aErr(`at least ${minArity}`, minArity);\n    } else if (!minArity && maxArity && nArg > maxArity) {\n      return aErr(`at most ${maxArity}`, maxArity);\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\n    }\n  }\n}\n\nfunction parseForm(\n  tokens: Token[],\n  params: string[],\n  checkArity = true,\n): ParserIns[] {\n  const head = tokens.shift();\n  if (!head) {\n    return [];\n  }\n  const { typ, text, errCtx } = head;\n  let op = text;\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\n  if (op === \"catch\") {\n    if (tokens[0].typ !== \"(\") {\n      return err(\"argument 1 must be expression\");\n    }\n    const body = parseArg(tokens, params);\n    const when = parseAllArgs(tokens, params);\n    if (!len(body) || !len(when)) {\n      return err(\"must provide at least 2 arguments\");\n    }\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n  } else if (op === \"var\" || op === \"let\") {\n    const ins: Ins[] = [];\n    while (true) {\n      const def = parseArg(tokens, params);\n      if (len(ins) && !len(def)) {\n        return ins;\n      }\n      const val = parseArg(tokens, params);\n      if (!len(ins) && (!len(def) || !len(val))) {\n        return err(`must provide at least one declaration name and value`);\n      } else if (!len(val)) {\n        return err(`must provide a value after each declaration name`);\n      }\n      if (def[0].typ !== \"ref\") {\n        return err(\"declaration name must be symbol\");\n      }\n      push(ins, val);\n      ins.push({ typ: op, value: def[0].value, errCtx });\n    }\n  } else if (op === \"if\" || op === \"when\") {\n    const cond = parseArg(tokens, params);\n    if (!len(cond)) {\n      return err(\"must provide condition\");\n    }\n    const ins: ParserIns[] = cond;\n    if (op === \"if\") {\n      const ifT = parseArg(tokens, params);\n      if (!len(ifT)) {\n        return err(\"must provide a branch\");\n      }\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\n      push(ins, ifT);\n      const ifF = parseArg(tokens, params);\n      if (len(ifF)) {\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\n        push(ins, ifF);\n        if (len(parseArg(tokens, params))) {\n          return err(\"too many branches\");\n        }\n      } else {\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\n      }\n    } else {\n      const body = parseAllArgs(tokens, params);\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\n      push(ins, body);\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\n    }\n    return ins;\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\n    const args: ParserIns[][] = [];\n    let insCount = 0;\n    while (true) {\n      const arg = parseArg(tokens, params);\n      if (!len(arg)) {\n        break;\n      }\n      args.push(arg);\n      insCount += len(arg);\n    }\n    if (op === \"recur\") {\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\n    }\n    if (len(args) < 2) {\n      return err(\"requires at least two arguments\");\n    }\n    const ins: Ins[] = [];\n    if (op === \"while\") {\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\n      const head = args.shift()!;\n      push(ins, head);\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\n      args.forEach(as => push(ins, as));\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n      return ins;\n    }\n    insCount += len(args); //+1 for each if/or ins\n    insCount += toNum(op === \"and\");\n    const typ = op === \"and\" ? \"if\" : \"or\";\n    for (let a = 0; a < len(args); ++a) {\n      push(ins, args[a]);\n      insCount -= len(args[a]);\n      ins.push({ typ, value: insCount, errCtx });\n      --insCount;\n    }\n    if (op === \"and\") {\n      push(ins, [\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\n      ]);\n    } else {\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\n    }\n    return ins;\n  }\n  const headIns: Ins[] = [];\n  let nArgs = 0;\n  //Head is a form or parameter\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\n    tokens.unshift(head);\n    const ins = parseArg(tokens, params);\n    push(headIns, ins);\n  }\n  const body: Ins[] = [];\n  while (len(tokens)) {\n    const parsed = parseArg(tokens, params);\n    if (!len(parsed)) {\n      break;\n    }\n    ++nArgs;\n    push(body, parsed);\n  }\n  if (op === \"return\") {\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\n  }\n\n  //Operation arity check\n  if (ops[op] && checkArity) {\n    const errors = arityCheck(op, nArgs, errCtx);\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\n  }\n\n  if (len(headIns)) {\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  } else {\n    const value: Val =\n      typ === \"num\"\n        ? { t: \"num\", v: toNum(op) }\n        : starts(op, \":\")\n        ? { t: \"key\", v: op }\n        : ops[op]\n        ? { t: \"func\", v: op }\n        : op === \"true\" || op === \"false\"\n        ? { t: \"bool\", v: op === \"true\" }\n        : { t: \"str\", v: op };\n    headIns.push({ typ: \"val\", value, errCtx });\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  }\n  return [...body, ...headIns];\n}\n\nfunction parseArg(\n  tokens: Token[],\n  params: string[],\n  checkArity = true,\n): ParserIns[] {\n  if (!len(tokens)) {\n    return [];\n  }\n  const { typ, text, errCtx } = tokens.shift() as Token;\n  //Upon closure\n  if (\n    typ === \"sym\" &&\n    sub(\"#@\", text) &&\n    len(tokens) &&\n    tokens[0].typ === \"(\"\n  ) {\n    const texts = tokens.map(t => t.text);\n    const body = parseArg(tokens, params, text !== \"@\");\n    const value = [slice(texts, 0, len(texts) - len(tokens)).join(\" \"), body];\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\n  }\n  switch (typ) {\n    case \"str\":\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\n    case \"num\":\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\n    case \"sym\":\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(params, text)) {\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    case \"(\":\n      return parseForm(tokens, params, checkArity);\n    case \")\":\n    case \"rem\":\n      return [];\n    default:\n      return assertUnreachable(typ);\n  }\n}\n\nfunction partitionWhen<T>(\n  array: T[],\n  predicate: (item: T) => boolean,\n): [T[], T[]] {\n  const a: T[] = [],\n    b: T[] = [];\n  for (let i = 0, isB = false; i < len(array); ++i) {\n    isB ||= predicate(array[i]);\n    (isB ? b : a).push(array[i]);\n  }\n  return [a, b];\n}\n\nfunction syntaxise(\n  { name, tokens }: NamedTokens,\n  errCtx: ErrCtx,\n): [\"func\", Func] | [\"err\", InvokeError] {\n  const err = (m: string, eCtx = errCtx) =>\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\n  const [params, body] = partitionWhen(\n    tokens,\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\n  );\n  //In the case of e.g. (function (+))\n  if (name === \"(\") {\n    return err(\"nameless function\");\n  }\n  //In the case of e.g. (function)\n  if (!len(params) && !len(body)) {\n    return err(\"empty function body\");\n  }\n  if (len(body) && body[0].typ === \")\") {\n    if (len(params)) {\n      //In the case of e.g. (function f %) or (function x y z)\n      body.unshift(params.pop()!);\n    } else {\n      //In the case of e.g. (function name)\n      return err(\"empty function body\");\n    }\n  }\n  //In the case of e.g. (function entry x y z)\n  if (len(params) && !len(body)) {\n    body.push(params.pop()!);\n  }\n  const ins: ParserIns[] = [];\n  while (len(body)) {\n    push(\n      ins,\n      parseArg(\n        body,\n        params.map(p => p.text),\n      ),\n    );\n  }\n  const parseError = ins.find(i => i.typ === \"err\");\n  if (parseError) {\n    return err(<string>parseError.value, parseError.errCtx);\n  }\n  return [\"func\", { name, ins: <Ins[]>ins }];\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const invocationId = len(tokens) ? tokens[0].errCtx.invocationId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { invocationId, line, col });\n    }\n  }\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { invocationId, line, col });\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\nexport function parse(\n  code: string,\n  invocationId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, invocationId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const segments = segment(tokens);\n  const labelled = funcise(segments);\n  const funcsAndErrors = labelled.map(named =>\n    syntaxise(named, {\n      invocationId,\n      line: named.errCtx.line,\n      col: named.errCtx.col,\n    }),\n  );\n  const okFuncs: Func[] = [],\n    syntaxErrors: InvokeError[] = [];\n  funcsAndErrors.forEach(fae => {\n    if (fae[0] === \"err\") {\n      syntaxErrors.push(fae[1]);\n    } else {\n      okFuncs.push(fae[1]);\n    }\n  });\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name] = func));\n  return { errors: syntaxErrors, funcs };\n}\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\nimport { Ctx, Env, ExternalError, InvokeError, Val, ValAndErr } from \"./types\";\n\ntype State = { dict: Map<string, Val>; output: string };\n\nasync function get(state: State, key: string): Promise<ValAndErr> {\n  if (!state.dict.has(key)) {\n    return { value: { t: \"null\", v: undefined }, err: `\"${key} not found.` };\n  }\n  return { value: state.dict.get(key)!, err: undefined };\n}\n\nasync function set(\n  state: State,\n  key: string,\n  val: Val,\n): Promise<ExternalError> {\n  state.dict.set(key, val);\n  return undefined;\n}\n\nasync function exe(\n  state: State,\n  name: string,\n  args: Val[],\n): Promise<ValAndErr> {\n  const nullVal: Val = { t: \"null\", v: undefined };\n  switch (name) {\n    case \"print-str\":\n      state.output += args[0].v;\n      break;\n    case \"print\":\n    case \"test.function\":\n      state.output += args[0].v + \"\\n\";\n      break;\n    default:\n      return { value: nullVal, err: `operation ${name} does not exist` };\n  }\n  return { value: nullVal, err: undefined };\n}\n\nconst tests: {\n  name: string;\n  code: string;\n  err?: string[];\n  out?: string;\n}[] = [\n  //Basic snippets\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\n  {\n    name: \"Say Hello, world!\",\n    code: `(print \"Hello, world!\")`,\n    out: `Hello, world!\\nnull`,\n  },\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\n  {\n    name: \"Whens\",\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\n    out: `hi\\n[234 null]`,\n  },\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\n  {\n    name: \"and & short-circuit\",\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\n    out: `[false true]`,\n  },\n  {\n    name: \"or & short-circuit\",\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\n    out: `-> [true 1]`,\n  },\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\n  {\n    name: \"Key as operation\",\n    code: `(:age {:name \"Patrick\" :age 24})`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 1\",\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 2\",\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\n  },\n  {\n    name: \"Equalities\",\n    code: `[(= 1 2 1)\n            (!= 1 2 1)\n            (= \"Hello\" \"hello\")\n            (!= \"world\" \"world\")\n            (= [0 [1]] [0 [1]])]`,\n    out: `[false 1 false false [0 [1]]]`,\n  },\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\n  {\n    name: \"Define num and call\",\n    code: `(var f 1) (f [:a :b :c])`,\n    out: `:b`,\n  },\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\n  {\n    name: \"Sum vector of numbers\",\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\n    out: `[6 9]`,\n  },\n  {\n    name: \"Sum vectors of numbers\",\n    code: `(map + [1 2 3] [1 2 3 4])`,\n    out: `[2 4 6]`,\n  },\n  {\n    name: \"Filter by integer\",\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\n    out: `[[:a :b :c] \"hello\"]`,\n  },\n  {\n    name: \"Comments, short decimal\",\n    code: `;((print \"Hello\")\n           .456`,\n    out: `0.456`,\n  },\n  {\n    name: \"Dictionary into vector\",\n    code: `(into [1 2] {3 4 5 6})`,\n    out: `[1 2 [3 4] [5 6]]`,\n  },\n  {\n    name: \"Vector into dictionary\",\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\n    out: `{[0] 2, [2] 3}`,\n  },\n  {\n    name: \"While loop\",\n    code: `(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))`,\n    out: `543210`,\n  },\n  {\n    name: \"Catch error\",\n    code: `(catch\n             (:e (catch (+ 1 :a) (0 errors)))\n             (print \"hi\"))`,\n    out: `Type`,\n  },\n  //Basic functions and closures\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\n  {\n    name: \"Call greet func\",\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\n    out: `Hello!\\nnull`,\n  },\n  {\n    name: \"Call const value func\",\n    code: `(function const 123) (const)`,\n    out: `123`,\n  },\n  {\n    name: \"Call identity funcs\",\n    code: `(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]`,\n    out: `[123 456]`,\n  },\n  {\n    name: \"Call greet with name\",\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\n           (greeting \"Patrick\")`,\n    out: `Hello, Patrick!\\nnull`,\n  },\n  {\n    name: \"Call with too few args\",\n    code: `(function func a b c [a b c]) (func 1 2)`,\n    out: `[1 2 null]`,\n  },\n  {\n    name: \"Define func and call\",\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Anonymous parameters\",\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)`,\n    out: `false`,\n  },\n  {\n    name: \"Call parameter\",\n    code: `(function f x (x \"hello\")) (f print)`,\n    out: `hello\\nnull`,\n  },\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\n  {\n    name: \"Let num op and call\",\n    code: `(function f (let n 0) (n [1])) (f)`,\n    out: `1`,\n  },\n  {\n    name: \"Explicit return\",\n    code: `(function f (return 123) (print 456)) (f)`,\n    out: `123`,\n  },\n  {\n    name: \"Closure 1\",\n    code: `(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)`,\n    out: `20`,\n  },\n  {\n    name: \"Closure 2\",\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\n    out: `[0 2 4 5 6 8]`,\n  },\n  {\n    name: \"Closure 3\",\n    code: `(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]`,\n    out: `[20 40]`,\n  },\n  {\n    name: \"Func returns closure\",\n    code: `(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)`,\n    out: `4`,\n  },\n  {\n    name: \"Dictionary closure\",\n    code: `(function f x #{x 2})\n           (let closure (f :a))\n           (closure)`,\n    out: `{:a 2}`,\n  },\n  {\n    name: \"Vector closure\",\n    code: `(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Closure as head\",\n    code: `(#[% %1 %2] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 1\",\n    code: `(@[] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  //Runtime errors\n  {\n    name: \"String instead of number\",\n    code: `(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 \"hi\")`,\n    out: `4`,\n    err: [\"Type\"],\n  },\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\n  {\n    name: \"Expired let retrieve\",\n    code: `(function f (let a 1) a) (f) a`,\n    err: [\"Reference\"],\n  },\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\n  {\n    name: \"Loop budget\",\n    code: `(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))`,\n    err: [\"Budget\"],\n  },\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\n  //Complex functions\n  {\n    name: \"Fibonacci 13\",\n    code: `(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)`,\n    out: `233`,\n  },\n  {\n    name: \"dedupe (recur)\",\n    code: `(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])`,\n    out: `[1 2 3]`,\n  },\n  //Test environment functions\n  {\n    name: \"set get\",\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\n    out: `[5.5 5.5]`,\n  },\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\n  //Syntax errors\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\n  {\n    name: \"Imbalanced quotes 1\",\n    code: `(print \"Hello)`,\n    err: [\"Parse\", \"Parse\"],\n  },\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\n];\n\nexport async function doTests(\n  invoke: (\n    ctx: Ctx,\n    code: string,\n    invocationId: string,\n    print: boolean,\n  ) => Promise<InvokeError[]>,\n  terse: boolean = true,\n): Promise<string[]> {\n  const results: {\n    okErr: boolean;\n    okOut: boolean;\n    elapsedMs: number;\n    display: string;\n  }[] = [];\n  for (let t = 0; t < len(tests); ++t) {\n    const { name, code, err, out } = tests[t];\n    const state: State = {\n      dict: new Map<string, Val>(),\n      output: \"\",\n    };\n    const env: Env = { funcs: {}, vars: {} };\n    const startTime = getTimeMs();\n    const errors = await invoke(\n      {\n        get: (key: string) => get(state, key),\n        set: (key: string, val: Val) => set(state, key, val),\n        exe: (name: string, args: Val[]) => exe(state, name, args),\n        env,\n        loopBudget: 10000,\n        rangeBudget: 1000,\n        callBudget: 1000,\n        recurBudget: 10000,\n      },\n      code,\n      \"testing\",\n      true,\n    );\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\n    const okOut = !out || trim(state.output) === out;\n    const elapsedMs = getTimeMs() - startTime;\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\n      padEnd(`${t + 1}`, 3),\n      padEnd(name, 24),\n      padEnd(`${elapsedMs}ms`, 6),\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\n      okErr ||\n        errors.map(\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\n        ),\n    ];\n    results.push({\n      okErr,\n      okOut,\n      elapsedMs,\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\n    });\n  }\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\n  return concat(\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\n  );\n}\n","export const insituxVersion = 20211005;\nimport { arityCheck, parse } from \"./parse\";\nimport * as pf from \"./poly-fills\";\nconst { abs, cos, sin, tan, pi, sign, sqrt, floor, ceil, round, max, min } = pf;\nconst { logn, log2, log10 } = pf;\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\nconst { trim, trimStart, trimEnd } = pf;\nconst { getTimeMs, randInt, randNum } = pf;\nconst { isArray, isNum, len, objKeys, range, toNum } = pf;\nimport { doTests } from \"./test\";\nimport { assertUnreachable, Ins, ops, typeNames } from \"./types\";\nimport { Ctx, Dict, ErrCtx, Func, InvokeError, Val } from \"./types\";\n\nconst val2str = ({ v, t }: Val): string => {\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\n  switch (t) {\n    case \"bool\":\n      return `${v as boolean}`;\n    case \"num\":\n      return `${v as number}`;\n    case \"str\":\n    case \"key\":\n    case \"ref\":\n    case \"func\":\n      return v as string;\n    case \"clo\":\n      return `#${(v as Func).name}`;\n    case \"vec\":\n      return `[${(v as Val[]).map(quoted).join(\" \")}]`;\n    case \"dict\": {\n      const { keys, vals } = v as Dict;\n      const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\n      const entries = ks.map((k, i) => `${k} ${vs[i]}`);\n      return `{${entries.join(\", \")}}`;\n    }\n    case \"null\":\n      return \"null\";\n  }\n  return assertUnreachable(t);\n};\n\nlet stack: Val[] = [];\nlet lets: { [key: string]: Val }[] = [];\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\nconst _num = (v: number) => stack.push({ t: \"num\", v });\nconst _str = (v: string = \"\") => stack.push({ t: \"str\", v });\nconst _key = (v: string) => stack.push({ t: \"key\", v });\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\nconst num = ({ v }: Val) => v as number;\nconst str = ({ v }: Val) => v as string;\nconst vec = ({ v }: Val) => v as Val[];\nconst dic = ({ v }: Val) => v as Dict;\nconst clo = ({ v }: Val) => v as Func;\nconst asBoo = ({ t, v }: Val) => (t === \"bool\" ? (v as boolean) : t !== \"null\");\nexport const visStr = (val: Val): val is { t: \"str\"; v: string } =>\n  val.t === \"str\";\nexport const visNum = (val: Val): val is { t: \"num\"; v: number } =>\n  val.t === \"num\";\nexport const visVec = (val: Val): val is { t: \"vec\"; v: Val[] } =>\n  val.t === \"vec\";\nexport const visDic = (val: Val): val is { t: \"dict\"; v: Dict } =>\n  val.t === \"dict\";\nexport const visFun = (val: Val): val is { t: \"func\"; v: string } =>\n  val.t === \"func\";\nexport const visClo = (val: Val): val is { t: \"clo\"; v: Func } =>\n  val.t === \"clo\";\nexport const visKey = (val: Val): val is { t: \"key\"; v: string } =>\n  val.t === \"key\";\nexport const visBoo = (val: Val): val is { t: \"bool\"; v: boolean } =>\n  val.t === \"bool\";\n\nconst asArray = ({ t, v }: Val): Val[] =>\n  t === \"vec\"\n    ? slice(v as Val[])\n    : t === \"str\"\n    ? [...(v as string)].map(s => ({ t: \"str\", v: s }))\n    : t === \"dict\"\n    ? (v as Dict).keys.map((k, i) => ({\n        t: \"vec\",\n        v: [k, (v as Dict).vals[i]],\n      }))\n    : [];\n\nconst stringify = (vals: Val[]) =>\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\n\nconst toDict = (args: Val[]): Val => {\n  if (len(args) % 2 === 1) {\n    args.pop();\n  }\n  const keys = args.filter((_, i) => i % 2 === 0);\n  const vals = args.filter((_, i) => i % 2 === 1);\n  const ddKeys: Val[] = [],\n    ddVals: Val[] = [];\n  keys.forEach((key, i) => {\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\n    if (existingIdx === -1) {\n      ddKeys.push(key);\n      ddVals.push(vals[i]);\n    } else {\n      ddVals[existingIdx] = vals[i];\n    }\n  });\n  return {\n    t: \"dict\",\n    v: { keys: ddKeys, vals: ddVals },\n  };\n};\n\nconst typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\n  e: \"Type\",\n  m,\n  errCtx,\n});\n\nconst isVecEqual = (a: Val[], b: Val[]): boolean =>\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\n\nconst isDictEqual = (a: Val, b: Val): boolean => {\n  const [ad, bd] = [dic(a), dic(b)];\n  return len(ad.keys) === len(bd.keys) && isVecEqual(ad.keys, bd.keys);\n};\n\nconst isEqual = (a: Val, b: Val) => {\n  const { t } = a;\n  switch (t) {\n    case \"null\":\n      return true;\n    case \"bool\":\n      return a.v === b.v;\n    case \"num\":\n      return num(a) === num(b);\n    case \"vec\":\n      return isVecEqual(vec(a), vec(b));\n    case \"dict\":\n      return isDictEqual(a, b);\n    case \"str\":\n    case \"ref\":\n    case \"key\":\n    case \"func\":\n      return str(a) === str(b);\n    case \"clo\":\n      return clo(a).name === clo(b).name;\n  }\n  return assertUnreachable(t);\n};\n\nconst dictGet = ({ keys, vals }: Dict, key: Val) => {\n  const idx = keys.findIndex(k => isEqual(k, key));\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\n};\n\nconst dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    nVals[idx] = val;\n  } else {\n    nKeys.push(key);\n    nVals.push(val);\n  }\n  return <Dict>{ keys: nKeys, vals: nVals };\n};\n\nconst dictDrop = ({ keys, vals }: Dict, key: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    splice(nKeys, idx, 1);\n    splice(nVals, idx, 1);\n  }\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\n};\n\nfunction typeCheck(\n  op: string,\n  args: Val[],\n  errCtx: ErrCtx,\n): InvokeError[] | undefined {\n  const { types, onlyNum } = ops[op];\n  const nArg = len(args);\n  if (onlyNum) {\n    const nonNumArgIdx = args.findIndex(a => a.t !== \"num\");\n    if (nonNumArgIdx === -1) {\n      return;\n    }\n    const typeName = typeNames[args[nonNumArgIdx].t];\n    return [\n      typeErr(`${op} takes numeric arguments only, not ${typeName}`, errCtx),\n    ];\n  }\n  if (!types) {\n    return;\n  }\n  const typeViolations = types\n    .map((need, i) => {\n      if (i >= nArg) {\n        return false;\n      }\n      const argType = args[i].t;\n      const badType = typeNames[argType];\n      return isArray(need)\n        ? has(need, argType)\n          ? false\n          : `argument ${i + 1} must be either: ${need\n              .map(t => typeNames[t])\n              .join(\", \")}, not ${badType}`\n        : need === argType\n        ? false\n        : `argument ${i + 1} must be ${typeNames[need]}, not ${badType}`;\n    })\n    .filter(r => !!r);\n  return len(typeViolations)\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\n    : undefined;\n}\n\nasync function exeOp(\n  op: string,\n  args: Val[],\n  ctx: Ctx,\n  errCtx: ErrCtx,\n  checkArity: boolean,\n): Promise<InvokeError[] | undefined> {\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\n  //Optional arity check\n  if (checkArity) {\n    const violations = arityCheck(op, len(args), errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n  //Argument type check\n  {\n    const violations = typeCheck(op, args, errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n\n  switch (op) {\n    case \"str\":\n      stack.push({\n        t: \"str\",\n        v: stringify(args),\n      });\n      return;\n    case \"print\":\n    case \"print-str\":\n      {\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\n        _nul();\n      }\n      return;\n    case \"vec\":\n      _vec(args);\n      return;\n    case \"dict\": {\n      stack.push(toDict(args));\n      return;\n    }\n    case \"len\":\n      _num(\n        args[0].t === \"str\"\n          ? slen(str(args[0]))\n          : args[0].t === \"vec\"\n          ? len(vec(args[0]))\n          : len(dic(args[0]).keys),\n      );\n      return;\n    case \"to-num\":\n      if (isNum(args[0].v)) {\n        _num(toNum(args[0].v));\n      } else {\n        _nul();\n      }\n      return;\n    case \"to-key\":\n      _key(`:${val2str(args[0])}`);\n      return;\n    case \"!\":\n      _boo(!asBoo(args[0]));\n      return;\n    case \"=\":\n    case \"!=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\n          _boo(false);\n          return;\n        }\n      }\n      stack.push(args[0]);\n      return;\n    case \"-\":\n      _num(\n        len(args) === 1\n          ? -num(args[0])\n          : args.map(num).reduce((sum, n) => sum - n),\n      );\n      return;\n    case \"**\":\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\n      return;\n    case \"+\":\n      _num(args.map(num).reduce((sum, n) => sum + n));\n      return;\n    case \"*\":\n      _num(args.map(num).reduce((sum, n) => sum * n));\n      return;\n    case \"/\":\n      _num(args.map(num).reduce((sum, n) => sum / n));\n      return;\n    case \"//\":\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\n      return;\n    case \"rem\":\n      _num(args.map(num).reduce((sum, n) => sum % n));\n      return;\n    case \"min\":\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\n      return;\n    case \"max\":\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\n      return;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\n        if (\n          (op === \"<\" && a >= b) ||\n          (op === \">\" && a <= b) ||\n          (op === \"<=\" && a > b) ||\n          (op === \">=\" && a < b)\n        ) {\n          _boo(false);\n          return;\n        }\n      }\n      _boo(true);\n      return;\n    case \"inc\":\n      _num(<number>args[0].v + 1);\n      return;\n    case \"dec\":\n      _num(<number>args[0].v - 1);\n      return;\n    case \"abs\":\n      _num(abs(num(args[0])));\n      return;\n    case \"pi\":\n      _num(pi);\n      return;\n    case \"sin\":\n    case \"cos\":\n    case \"tan\":\n    case \"sqrt\":\n    case \"round\":\n    case \"floor\":\n    case \"ceil\":\n    case \"logn\":\n    case \"log2\":\n    case \"log10\":\n      _num(\n        { sin, cos, tan, sqrt, round, floor, ceil, logn, log2, log10 }[op](\n          num(args[0]),\n        ),\n      );\n      return;\n    case \"and\":\n      _boo(args.every(asBoo));\n      return;\n    case \"or\":\n      _boo(args.some(asBoo));\n      return;\n    case \"odd?\":\n    case \"even?\":\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\n      return;\n    case \"pos?\":\n    case \"neg?\":\n    case \"zero?\": {\n      const n = num(args[0]);\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\n      return;\n    }\n    case \"null?\":\n    case \"num?\":\n    case \"bool?\":\n    case \"str?\":\n    case \"dict?\":\n    case \"vec?\":\n    case \"key?\":\n    case \"func?\":\n      _boo(\n        (op === \"null?\" && args[0].t === \"null\") ||\n          (op === \"num?\" && args[0].t === \"num\") ||\n          (op === \"bool?\" && args[0].t === \"bool\") ||\n          (op === \"str?\" && args[0].t === \"str\") ||\n          (op === \"dict?\" && args[0].t === \"dict\") ||\n          (op === \"vec?\" && args[0].t === \"vec\") ||\n          (op === \"key?\" && args[0].t === \"key\") ||\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\n      );\n      return;\n    case \"has?\":\n      _boo(sub(str(args[0]), str(args[1])));\n      return;\n    case \"idx\": {\n      let i = -1;\n      if (args[0].t === \"str\") {\n        if (args[1].t !== \"str\") {\n          return tErr(\"strings can only contain strings\");\n        }\n        if (len(args) < 3) {\n          i = subIdx(str(args[0]), str(args[1]));\n        } else {\n          const arr = str(args[0]).split(\"\");\n          arr[num(args[2])] = str(args[1]);\n          _str(arr.join(\"\"));\n          return;\n        }\n      } else if (args[0].t === \"vec\") {\n        if (len(args) < 3) {\n          i = vec(args[0]).findIndex(a => isEqual(a, args[1]));\n        } else {\n          const v = asArray(args[0]);\n          v[num(args[2])] = args[1];\n          _vec(v);\n          return;\n        }\n      }\n      if (i === -1) {\n        _nul();\n      } else {\n        _num(i);\n      }\n      return;\n    }\n    case \"map\":\n    case \"for\":\n    case \"reduce\":\n    case \"filter\":\n    case \"remove\":\n    case \"find\":\n    case \"count\":\n      {\n        const closure = getExe(ctx, args.shift()!, errCtx);\n        const okT = (t: Val[\"t\"]) => t === \"vec\" || t === \"str\" || t === \"dict\";\n        const badArg =\n          op === \"map\" || op === \"for\"\n            ? args.findIndex(({ t }) => !okT(t))\n            : okT(args[0].t)\n            ? -1\n            : 0;\n        if (badArg !== -1) {\n          const badType = typeNames[args[badArg].t];\n          return tErr(\n            `argument 2 must be either: string, vector, dictionary, not ${badType}`,\n          );\n        }\n\n        if (op === \"for\") {\n          const arrays = args.map(asArray);\n          const lims = arrays.map(len);\n          const divisors = lims.map((_, i) =>\n            slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\n          );\n          divisors.unshift(1);\n          const lim = divisors.pop()!;\n          if (lim > ctx.loopBudget) {\n            return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\n          }\n          const array: Val[] = [];\n          for (let t = 0; t < lim; ++t) {\n            const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\n            const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\n            if (errors) {\n              return errors;\n            }\n            array.push(stack.pop()!);\n          }\n          _vec(array);\n          return;\n        }\n\n        if (op === \"map\") {\n          const arrays = args.map(asArray);\n          const shortest = min(...arrays.map(len));\n          const array: Val[] = [];\n          for (let i = 0; i < shortest; ++i) {\n            const errors = await closure(arrays.map(a => a[i]));\n            if (errors) {\n              return errors;\n            }\n            array.push(stack.pop()!);\n          }\n          _vec(array);\n          return;\n        }\n\n        const array = asArray(args.shift()!);\n        if (op !== \"reduce\") {\n          const isRemove = op === \"remove\",\n            isFind = op === \"find\",\n            isCount = op === \"count\";\n          const filtered: Val[] = [];\n          let count = 0;\n          for (let i = 0, lim = len(array); i < lim; ++i) {\n            const errors = await closure([array[i], ...args]);\n            if (errors) {\n              return errors;\n            }\n            const b = asBoo(stack.pop()!);\n            if (isCount) {\n              count += b ? 1 : 0;\n              continue;\n            }\n            if (isFind && b) {\n              stack.push(array[i]);\n              return;\n            }\n            if (!isFind && b !== isRemove) {\n              filtered.push(array[i]);\n            }\n          }\n          switch (op) {\n            case \"count\":\n              _num(count);\n              return;\n            case \"find\":\n              _nul();\n              return;\n            default:\n              _vec(filtered);\n              return;\n          }\n        }\n\n        if (!len(array)) {\n          if (len(args)) {\n            stack.push(args[0]);\n          } else {\n            _vec();\n          }\n          return;\n        }\n        if (len(array) < 2 && !len(args)) {\n          push(stack, array);\n          return;\n        }\n\n        let reduction: Val = (len(args) ? args : array).shift()!;\n        for (let i = 0, lim = len(array); i < lim; ++i) {\n          const errors = await closure([reduction, array[i]]);\n          if (errors) {\n            return errors;\n          }\n          reduction = stack.pop()!;\n        }\n        stack.push(reduction);\n      }\n      return;\n    case \"rand-int\":\n    case \"rand\":\n      {\n        const nArgs = len(args);\n        const [a, b] = [\n          nArgs < 2 ? 0 : num(args[0]),\n          nArgs === 0\n            ? 1 + toNum(op === \"rand-int\")\n            : nArgs === 1\n            ? num(args[0])\n            : num(args[1]),\n        ];\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\n      }\n      return;\n    case \"do\":\n    case \"val\":\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\n      return;\n    case \"..\":\n    case \"...\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      let flatArgs: Val[] = args;\n      if (op === \"..\") {\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? vec(a) : [a])));\n      } else {\n        const a = flatArgs.pop()!;\n        push(flatArgs, flat([a.t === \"vec\" ? vec(a) : [a]]));\n      }\n      return await closure(flatArgs);\n    }\n    case \"into\": {\n      const a0v = args[0].t === \"vec\";\n      const a1v = args[1].t === \"vec\";\n      if (a0v) {\n        _vec(concat(vec(args[0]), a1v ? vec(args[1]) : asArray(args[1])));\n      } else {\n        if (a1v) {\n          const v1 = asArray(args[1]);\n          stack.push(toDict(concat(flat(asArray(args[0]).map(vec)), v1)));\n        } else {\n          const { keys, vals } = dic(args[0]);\n          const d1 = dic(args[1]);\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\n        }\n      }\n      return;\n    }\n    case \"push\": {\n      if (args[0].t === \"vec\") {\n        const v = vec(args[0]);\n        if (len(args) < 3) {\n          _vec(concat(v, [args[1]]));\n        } else {\n          const n = num(args[2]);\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\n        }\n      } else {\n        if (len(args) < 3) {\n          stack.push(dictDrop(dic(args[0]), args[1]));\n        } else {\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\n        }\n      }\n      return;\n    }\n    case \"sect\": {\n      const v = args[0];\n      const isVec = v.t === \"vec\";\n      const vlen = isVec ? len(vec(v)) : slen(str(v));\n      let a = 0,\n        b = vlen;\n      switch (len(args)) {\n        case 1:\n          a = 1;\n          break;\n        case 2: {\n          const del = num(args[1]);\n          if (del < 0) {\n            b += del;\n          } else {\n            a += del;\n          }\n          break;\n        }\n        case 3: {\n          const skip = num(args[1]);\n          const take = num(args[2]);\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\n          b = (take < 0 ? b : a) + take;\n          break;\n        }\n      }\n      a = max(a, 0);\n      b = min(b, vlen);\n      if (a > b) {\n        (isVec ? _vec : _str)();\n        return;\n      }\n      if (isVec) {\n        _vec(slice(vec(v), a, b));\n      } else {\n        _str(substr(str(args[0]), a, b - a));\n      }\n      return;\n    }\n    case \"reverse\":\n      if (args[0].t === \"str\") {\n        _str(stringify(reverse(asArray(args[0]))));\n      } else {\n        _vec(reverse(asArray(args[0])));\n      }\n      return;\n    case \"sort\": {\n      if (!len(vec(args[0]))) {\n        _vec();\n        return;\n      }\n      const src = asArray(args[0]);\n      const mapped: Val[][] = [];\n      if (len(args) === 1) {\n        push(\n          mapped,\n          src.map(v => [v, v]),\n        );\n      } else {\n        const closure = getExe(ctx, args.pop()!, errCtx);\n        for (let i = 0, lim = len(src); i < lim; ++i) {\n          const errors = await closure([src[i]]);\n          if (errors) {\n            return errors;\n          }\n          mapped.push([src[i], stack.pop()!]);\n        }\n      }\n      const okT = mapped[0][1].t;\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\n        return tErr(\"can only sort by all number or all string\");\n      }\n      if (visNum(mapped[0][1])) {\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\n      } else {\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\n      }\n      _vec(mapped.map(([v]) => v));\n      return;\n    }\n    case \"range\": {\n      const [a, b, s] = args.map(num);\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\n      const [x, y] =\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\n      const step = sign((y - x) * (s || 1)) * (s || 1);\n      const count = ceil(abs((y - x) / step));\n      if (!count) {\n        _vec([]);\n        return;\n      }\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"range budget depleted\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      const nums = range(count).map(n => n * step + x);\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\n      return;\n    }\n    case \"empty?\":\n      _boo(!len(asArray(args[0])));\n      return;\n    case \"keys\":\n    case \"vals\":\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\n      return;\n    case \"split\":\n      _vec(\n        str(args[0])\n          .split(len(args) > 1 ? str(args[1]) : \" \")\n          .map(v => <Val>{ t: \"str\", v }),\n      );\n      return;\n    case \"join\":\n      _str(\n        vec(args[0])\n          .map(val2str)\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\n      );\n      return;\n    case \"starts-with?\":\n      _boo(starts(str(args[0]), str(args[1])));\n      return;\n    case \"ends-with?\":\n      _boo(ends(str(args[0]), str(args[1])));\n      return;\n    case \"upper-case\":\n    case \"lower-case\":\n    case \"trim\":\n    case \"trim-start\":\n    case \"trim-end\":\n      _str(\n        (op === \"upper-case\"\n          ? upperCase\n          : op === \"lower-case\"\n          ? lowerCase\n          : op === \"trim\"\n          ? trim\n          : op === \"trim-start\"\n          ? trimStart\n          : trimEnd)(str(args[0])),\n      );\n      return;\n    case \"str*\": {\n      const text = str(args[0]);\n      _str(\n        range(max(num(args[1]), 0))\n          .map(n => text)\n          .join(\"\"),\n      );\n      return;\n    }\n    case \"time\":\n      _num(getTimeMs());\n      return;\n    case \"version\":\n      _num(insituxVersion);\n      return;\n    case \"tests\":\n      {\n        const tests = await doTests(invoke, !(len(args) && asBoo(args[0])));\n        const summary = tests.pop()!;\n        for (const test of tests) {\n          await exeOp(\"print\", [{ v: test, t: \"str\" }], ctx, errCtx, false);\n        }\n        _str(summary);\n      }\n      return;\n    case \"symbols\":\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\n      return;\n    case \"eval\": {\n      delete ctx.env.funcs[\"entry\"];\n      const sLen = len(stack);\n      const errors = await parseAndExe(ctx, str(args[0]), errCtx.invocationId);\n      if (errors) {\n        errors.forEach(e => {\n          e.errCtx.invocationId = \"evaluated\";\n        });\n        return [\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\n          ...errors,\n        ];\n      }\n      if (sLen === len(stack)) {\n        _nul();\n      }\n      return;\n    }\n    case \"reset\":\n      ctx.env.vars = {};\n      ctx.env.funcs = {};\n      lets = [];\n      _nul();\n      return;\n  }\n\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\n}\n\nfunction getExe(\n  ctx: Ctx,\n  op: Val,\n  errCtx: ErrCtx,\n  checkArity = true,\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\n  const monoArityError = [{ e: \"Arity\", m: `one argument required`, errCtx }];\n  if (visStr(op) || visFun(op)) {\n    const name = op.v;\n    if (ops[name]) {\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\n    }\n    if (name in ctx.env.funcs) {\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\n    }\n    if (name in ctx.env.vars) {\n      return getExe(ctx, ctx.env.vars[name], errCtx);\n    }\n    if (name in lets[len(lets) - 1]) {\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\n    }\n    if (starts(name, \"$\")) {\n      return async (params: Val[]) => {\n        if (!len(params)) {\n          return monoArityError;\n        }\n        const err = await ctx.set(substr(name, 1), params[0]);\n        stack.push(params[0]);\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n      };\n    }\n    return async (params: Val[]) => {\n      const { err, value } = await ctx.exe(name, params);\n      if (!err) {\n        stack.push(value);\n      }\n      return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n    };\n  } else if (visClo(op)) {\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\n  } else if (visKey(op)) {\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      if (params[0].t !== \"dict\") {\n        const badType = typeNames[params[0].t];\n        return [\n          typeErr(\n            `keyword as operation argument must be dictionary, not ${badType}`,\n            errCtx,\n          ),\n        ];\n      }\n      stack.push(dictGet(dic(params[0]), op));\n      return;\n    };\n  } else if (visNum(op)) {\n    const n = floor(op.v);\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const a = params[0];\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\n        const badType = typeNames[a.t];\n        return [\n          typeErr(\n            `number as operation argument must be string, vector, or dictionary, not ${badType}`,\n            errCtx,\n          ),\n        ];\n      }\n      const arr = asArray(a);\n      if (abs(n) >= len(arr)) {\n        _nul();\n      } else if (n < 0) {\n        stack.push(arr[len(arr) + n]);\n      } else {\n        stack.push(arr[n]);\n      }\n      return;\n    };\n  } else if (visVec(op)) {\n    const { v } = op;\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const found = v.find(val => isEqual(val, params[0]));\n      if (found) {\n        stack.push(found);\n      } else {\n        _nul();\n      }\n      return;\n    };\n  } else if (visDic(op)) {\n    const dict = op.v;\n    return async (params: Val[]) => {\n      if (len(params) === 1) {\n        stack.push(dictGet(dict, params[0]));\n      } else if (len(params) === 2) {\n        _dic(dictSet(dict, params[0], params[1]));\n      } else {\n        return [\n          {\n            e: \"Arity\",\n            m: \"dictionary as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      return;\n    };\n  } else if (visBoo(op)) {\n    const cond = op.v;\n    return async (params: Val[]) => {\n      if (!len(params) || len(params) > 2) {\n        return [\n          {\n            e: \"Arity\",\n            m: \"boolean as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      stack.push(\n        cond\n          ? params[0]\n          : len(params) > 1\n          ? params[1]\n          : { t: \"null\", v: undefined },\n      );\n      return;\n    };\n  }\n  return async _ => [\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\n  ];\n}\n\nfunction errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n\nexport async function exeFunc(\n  ctx: Ctx,\n  func: Func,\n  args: Val[],\n  inClosure = false,\n): Promise<InvokeError[] | undefined> {\n  --ctx.callBudget;\n  if (!inClosure) {\n    lets.push({});\n  }\n  const stackLen = len(stack);\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\n    const { typ, value, errCtx } = func.ins[i];\n\n    const tooManyLoops = ctx.loopBudget < 1;\n    if (tooManyLoops || ctx.callBudget < 1) {\n      return [\n        {\n          e: \"Budget\",\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\n          errCtx,\n        },\n      ];\n    }\n\n    switch (typ) {\n      case \"val\":\n        stack.push(value as Val);\n        break;\n      case \"var\":\n        ctx.env.vars[value as string] = stack[len(stack) - 1];\n        break;\n      case \"let\":\n        lets[len(lets) - 1][value as string] = stack[len(stack) - 1];\n        break;\n      case \"npa\":\n      case \"upa\":\n        {\n          const paramIdx = value as number;\n          if (paramIdx === -1) {\n            _vec(args);\n          } else if (len(args) <= paramIdx) {\n            _nul();\n          } else {\n            stack.push(args[paramIdx]);\n          }\n        }\n        break;\n      case \"ref\":\n        {\n          const name = value as string;\n          if (ops[name]) {\n            _fun(name);\n          } else if (starts(name, \"$\")) {\n            const { value, err } = await ctx.get(substr(name, 1));\n            if (err) {\n              return [{ e: \"External\", m: err, errCtx }];\n            }\n            stack.push(value);\n          } else if (name in ctx.env.vars) {\n            stack.push(ctx.env.vars[name]);\n          } else if (name in lets[len(lets) - 1]) {\n            stack.push(lets[len(lets) - 1][name]);\n          } else if (name in ctx.env.funcs) {\n            _fun(name);\n          } else {\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\n          }\n        }\n        break;\n      case \"exe\":\n        {\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\n          const nArgs = value as number;\n          const params = splice(stack, len(stack) - nArgs, nArgs);\n          const errors = await closure(params);\n          if (errors) {\n            if (i + 1 !== lim && func.ins[i + 1].typ === \"cat\") {\n              ++i;\n              lets[len(lets) - 1][\"errors\"] = {\n                t: \"vec\",\n                v: errorsToDict(errors),\n              };\n              break;\n            }\n            return errors;\n          }\n        }\n        break;\n      case \"or\":\n        if (asBoo(stack[len(stack) - 1])) {\n          i += value as number;\n        } else {\n          stack.pop();\n        }\n        break;\n      case \"if\":\n        if (!asBoo(stack.pop()!)) {\n          i += value as number;\n        }\n        break;\n      case \"jmp\":\n      case \"cat\":\n        i += value as number;\n        break;\n      case \"loo\":\n        i += value as number;\n        --ctx.loopBudget;\n        break;\n      case \"pop\":\n        splice(stack, len(stack) - (value as number), value as number);\n        break;\n      case \"ret\":\n        if (value as boolean) {\n          splice(stack, 0, len(stack) - 1);\n        } else {\n          _nul();\n        }\n        i = lim;\n        break;\n      case \"rec\":\n        {\n          lets[len(lets) - 1] = {};\n          i = -1;\n          const nArgs = value as number;\n          args = splice(stack, len(stack) - nArgs, nArgs);\n          --ctx.recurBudget;\n          if (!ctx.recurBudget) {\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\n          }\n        }\n        continue;\n      case \"clo\":\n      case \"par\":\n        {\n          let [name, ins] = value as [string, Ins[]];\n          const isCapture = ({ typ, value }: Ins) =>\n            (typ === \"ref\" &&\n              !ins.find(i => i.typ === \"let\" && i.value === value)) ||\n            typ === \"npa\";\n          const derefFunc: Func = {\n            name: \"\",\n            ins: ins.filter(isCapture),\n          };\n          const errors = await exeFunc(ctx, derefFunc, args, true);\n          if (errors) {\n            return errors;\n          }\n          const numIns = len(derefFunc.ins);\n          const captures = splice(stack, len(stack) - numIns, numIns);\n          ins = ins.map(ins =>\n            isCapture(ins)\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\n              : ins,\n          );\n          //Rewrite partial closure to #(... func [args] args)\n          if (typ === \"par\") {\n            const { value, errCtx } = ins.pop()!;\n            const f = ins.pop()!;\n            ins.unshift({ typ: \"val\", value: f.value, errCtx });\n            ins.push({ typ: \"upa\", value: -1, errCtx });\n            ins.push({\n              typ: \"val\",\n              value: <Val>{ t: \"str\", v: \"...\" },\n              errCtx,\n            });\n            ins.push({ typ: \"exe\", value: <number>value + 2, errCtx });\n          }\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins } });\n        }\n        break;\n      default:\n        assertUnreachable(typ);\n    }\n  }\n  if (!inClosure) {\n    lets.pop();\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\n  }\n  return;\n}\n\nasync function parseAndExe(\n  ctx: Ctx,\n  code: string,\n  invocationId: string,\n): Promise<InvokeError[] | undefined> {\n  const parsed = parse(code, invocationId);\n  if (len(parsed.errors)) {\n    return parsed.errors;\n  }\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\n  if (!(\"entry\" in ctx.env.funcs)) {\n    return;\n  }\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\n}\n\nexport async function invoke(\n  ctx: Ctx,\n  code: string,\n  invocationId: string,\n  printResult = false,\n): Promise<InvokeError[]> {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  const errors = await parseAndExe(ctx, code, invocationId);\n  ctx.callBudget = callBudget;\n  ctx.recurBudget = recurBudget;\n  ctx.loopBudget = loopBudget;\n  ctx.rangeBudget = rangeBudget;\n  delete ctx.env.funcs[\"entry\"];\n  if (!errors && printResult && len(stack)) {\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(stack[len(stack) - 1]) }]);\n  }\n  stack = [];\n  lets = [];\n  return errors ?? [];\n}\n\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\n  let syms = alsoSyntax ? [\"function\"] : [];\n  syms = concat(syms, objKeys(ops));\n  syms = concat(syms, objKeys(ctx.env.funcs));\n  syms = concat(syms, objKeys(ctx.env.vars));\n  const hidden = [\"entry\"];\n  return syms.filter(o => !has(hidden, o));\n}\n","import { invoke } from \".\";\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\nimport { Ctx } from \"./types\";\n\nexport type ErrorOutput = {\n  type: \"message\" | \"error\";\n  text: string;\n}[];\n\nconst invocations = new Map<string, string>();\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\n\nexport async function invoker(ctx: Ctx, code: string): Promise<ErrorOutput> {\n  const uuid = getTimeMs().toString();\n  invocations.set(uuid, code);\n  const errors = await invoke(ctx, code, uuid, true);\n  let out: ErrorOutput = [];\n  errors.forEach(({ e, m, errCtx: { line, col, invocationId } }) => {\n    const invocation = invocations.get(invocationId);\n    if (!invocation) {\n      out.push({\n        type: \"message\",\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\n      });\n      return;\n    }\n    const lineText = invocation.split(\"\\n\")[line - 1];\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\n    const half1 = trimStart(substr(lineText, 0, col - 1));\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\n    if (!sym) {\n      const half2 = substr(lineText, col);\n      out.push({ type: \"error\", text: lineText[col - 1] });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    } else {\n      const half2 = substr(lineText, col - 1 + slen(sym));\n      out.push({ type: \"error\", text: sym });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    }\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\n  });\n  return out;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","pi","PI","logn","log","log2","log10","ops","print","exactArity","returns","minArity","onlyNum","inc","dec","and","or","rem","vec","dict","types","maxArity","map","for","reduce","filter","remove","find","count","rand","while","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","typeNames","null","num","bool","ref","func","clo","nullVal","t","v","parseAllArgs","tokens","params","body","exp","parseArg","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","checkArity","typ","text","shift","texts","head","err","when","ins","def","cond","ifT","ifF","args","insCount","arg","forEach","as","headIns","nArgs","unshift","parsed","errors","parseForm","parse","code","invocationId","stringError","makeCollsOps","emitComments","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","i","l","c","nextCh","n","isWhite","isDigit","ch","isParen","tokenise","tokenErrors","countTyp","numL","numR","untimely","r","direction","lim","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","segments","token","segment","labelled","isFunc","entries","described","name","funcise","funcsAndErrors","named","eCtx","array","predicate","isB","partitionWhen","pop","p","parseError","syntaxise","okFuncs","syntaxErrors","fae","async","state","set","exe","output","out","doTests","invoke","terse","results","Map","env","vars","startTime","loopBudget","rangeBudget","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","sum","numPassed","val2str","quoted","ks","vs","k","stack","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","dic","asBoo","visNum","asArray","stringify","cat","toDict","_","ddKeys","ddVals","existingIdx","findIndex","isEqual","typeErr","isVecEqual","some","ad","bd","isDictEqual","dictGet","dictSet","nKeys","nVals","exeOp","ctx","tErr","violations","nonNumArgIdx","typeName","typeViolations","need","argType","badType","typeCheck","every","closure","getExe","okT","badArg","arrays","lims","divisors","argIdxs","d","shortest","isRemove","isFind","isCount","filtered","reduction","flatArgs","a0v","a1v","v1","d1","dictDrop","isVec","vlen","del","skip","take","src","mapped","edgeCase","step","nums","summary","test","alsoSyntax","syms","hidden","sLen","parseAndExe","monoArityError","exeFunc","visClo","visKey","visVec","found","visDic","visBoo","errorsToDict","newKey","inClosure","stackLen","tooManyLoops","paramIdx","isCapture","derefFunc","numIns","captures","f","printResult","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}