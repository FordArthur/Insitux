{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict };\r\n\r\nexport type ErrCtx = { invocationId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ExternalError = undefined | string;\r\nexport type ValAndErr = { value: Val; err?: ExternalError };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\nexport type Ctx = {\r\n  set: (key: string, val: Val) => Promise<ExternalError>;\r\n  get: (key: string) => Promise<ValAndErr>;\r\n  exe: (name: string, args: Val[]) => Promise<ValAndErr>;\r\n  env: Env;\r\n  loopBudget: number;\r\n  rangeBudget: number;\r\n  callBudget: number;\r\n  recurBudget: number;\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\"; value: number } //number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"rec\"; value: number } //Recur, number of args\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\r\n);\r\n\r\nexport const ops: {\r\n  [name: string]: {\r\n    minArity?: number;\r\n    maxArity?: number;\r\n    exactArity?: number;\r\n    numeric?: true | \"in only\";\r\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\r\n    returns?: Val[\"t\"][];\r\n  };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { exactArity: 1, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    types: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]], returns: [\"num\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: { minArity: 2, returns: [\"vec\"] },\r\n  remove: { minArity: 2, returns: [\"vec\"] },\r\n  find: { minArity: 2 },\r\n  count: { minArity: 2, returns: [\"num\"] },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  while: {},\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    types: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    types: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    types: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"], returns: [\"vec\"] },\r\n  keys: { exactArity: 1, types: [\"dict\"] },\r\n  vals: { exactArity: 1, types: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: true },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    types: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"], returns: [\"str\"] },\r\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"], returns: [\"str\"] },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, types: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum, isArray } = pf;\r\nimport { ErrCtx, Func, Funcs, Ins, ops, typeNames, Val } from \"./types\";\r\nimport { assertUnreachable } from \"./types\";\r\nimport { InvokeError, typeErr, keyOpErr, numOpErr } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invocationId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      } else if (emitComments) {\r\n        tokens[len(tokens) - 1].text += c;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { invocationId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      if (emitComments) {\r\n        tokens.push({\r\n          typ: \"rem\",\r\n          text: \"\",\r\n          errCtx: { invocationId, line, col },\r\n        });\r\n      }\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invocationId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps) {\r\n          if (c === \"[\") {\r\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n          } else if (c === \"{\") {\r\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseAllArgs(tokens: Token[], params: string[]) {\r\n  const body: ParserIns[] = [];\r\n  while (true) {\r\n    const exp = parseArg(tokens, params);\r\n    if (!len(exp)) {\r\n      break;\r\n    }\r\n    push(body, exp);\r\n  }\r\n  return body;\r\n}\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0])\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nfunction parseForm(\r\n  tokens: Token[],\r\n  params: string[],\r\n  checkArity = true,\r\n): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\r\n  if (op === \"catch\") {\r\n    if (tokens[0].typ !== \"(\") {\r\n      return err(\"argument 1 must be expression\");\r\n    }\r\n    const body = parseArg(tokens, params);\r\n    const when = parseAllArgs(tokens, params);\r\n    if (!len(body) || !len(when)) {\r\n      return err(\"must provide at least 2 arguments\");\r\n    }\r\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const ins: Ins[] = [];\r\n    while (true) {\r\n      const defIns = parseArg(tokens, params);\r\n      if (len(ins) && !len(defIns)) {\r\n        return ins;\r\n      }\r\n      const val = parseArg(tokens, params);\r\n      if (!len(ins) && (!len(defIns) || !len(val))) {\r\n        return err(`must provide at least one declaration name and value`);\r\n      } else if (!len(val)) {\r\n        return err(`must provide a value after each declaration name`);\r\n      }\r\n      const def = defIns[0];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\");\r\n      }\r\n      push(ins, val);\r\n      ins.push({ typ: op, value: def.value, errCtx });\r\n    }\r\n  } else if (op === \"if\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        if (len(parseArg(tokens, params))) {\r\n          return err(\"too many branches\");\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n      }\r\n    } else {\r\n      const body = parseAllArgs(tokens, params);\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\r\n    const args: ParserIns[][] = [];\r\n    let insCount = 0;\r\n    while (true) {\r\n      const arg = parseArg(tokens, params);\r\n      if (!len(arg)) {\r\n        break;\r\n      }\r\n      args.push(arg);\r\n      insCount += len(arg);\r\n    }\r\n    if (op === \"recur\") {\r\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\r\n    }\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  let nArgs = 0;\r\n  //Head is a form or parameter\r\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    push(headIns, ins);\r\n  }\r\n  const body: Ins[] = [];\r\n  while (len(tokens)) {\r\n    const parsed = parseArg(tokens, params);\r\n    if (!len(parsed)) {\r\n      break;\r\n    }\r\n    ++nArgs;\r\n    push(body, parsed);\r\n  }\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n\r\n  //Operation arity check, optionally disabled for partial closures\r\n  if (ops[op] && checkArity) {\r\n    const errors = arityCheck(op, nArgs, errCtx);\r\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\r\n    if (!errors) {\r\n      //Upgrade some math and logic functions to their fast counterparts\r\n      if (nArgs === 2 && ops[`fast${op}`]) {\r\n        op = `fast${op}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (len(headIns)) {\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  } else {\r\n    const value: Val =\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op };\r\n    headIns.push({ typ: \"val\", value, errCtx });\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  }\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction parseArg(\r\n  tokens: Token[],\r\n  params: string[],\r\n  checkArity = true,\r\n): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  //Upon closure\r\n  if (\r\n    typ === \"sym\" &&\r\n    sub(\"#@\", text) &&\r\n    len(tokens) &&\r\n    tokens[0].typ === \"(\"\r\n  ) {\r\n    const texts = tokens.map(t => t.text);\r\n    const body = parseArg(tokens, params, text !== \"@\");\r\n    const err = body.find(t => t.typ === \"err\");\r\n    if (err) {\r\n      return [err];\r\n    }\r\n    const value: [string, Ins[]] = [\r\n      slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\r\n      <Ins[]>body,\r\n    ];\r\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\r\n  }\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(params, text)) {\r\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params, checkArity);\r\n    case \")\":\r\n    case \"rem\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): [\"func\", Func] | [\"err\", InvokeError] {\r\n  const err = (m: string, eCtx = errCtx) =>\r\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\r\n  const firstNonParam = tokens.findIndex(\r\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\r\n  );\r\n  const params = slice(tokens, 0, firstNonParam);\r\n  const body = slice(tokens, firstNonParam);\r\n  //In the case of e.g. (function (+))\r\n  if (name === \"(\") {\r\n    return err(\"nameless function\");\r\n  }\r\n  //In the case of e.g. (function)\r\n  if (!len(params) && !len(body)) {\r\n    return err(\"empty function body\");\r\n  }\r\n  if (len(body) && body[0].typ === \")\") {\r\n    if (len(params)) {\r\n      //In the case of e.g. (function f %) or (function x y z)\r\n      body.unshift(params.pop()!);\r\n    } else {\r\n      //In the case of e.g. (function name)\r\n      return err(\"empty function body\");\r\n    }\r\n  }\r\n  //In the case of e.g. (function entry x y z)\r\n  if (len(params) && !len(body)) {\r\n    body.push(params.pop()!);\r\n  }\r\n  const ins: ParserIns[] = [];\r\n  while (len(body)) {\r\n    push(\r\n      ins,\r\n      parseArg(\r\n        body,\r\n        params.map(p => p.text),\r\n      ),\r\n    );\r\n  }\r\n  const parseError = ins.find(i => i.typ === \"err\");\r\n  if (parseError) {\r\n    return err(<string>parseError.value, parseError.errCtx);\r\n  }\r\n  return [\"func\", { name, ins: <Ins[]>ins }];\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invocationId = len(tokens) ? tokens[0].errCtx.invocationId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invocationId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invocationId, line, col });\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n        }\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"cat\":\r\n      case \"or\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const errors = insErrorDetect(ins.value[1]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"pop\":\r\n      case \"rec\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invocationId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invocationId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      invocationId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  funcsAndErrors.forEach(fae => {\r\n    if (fae[0] === \"err\") {\r\n      errors.push(fae[1]);\r\n    } else {\r\n      okFuncs.push(fae[1]);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, ExternalError, InvokeError, Val, ValAndErr } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nasync function get(state: State, key: string): Promise<ValAndErr> {\r\n  if (!state.dict.has(key)) {\r\n    return { value: { t: \"null\", v: undefined }, err: `\"${key} not found.` };\r\n  }\r\n  return { value: state.dict.get(key)!, err: undefined };\r\n}\r\n\r\nasync function set(\r\n  state: State,\r\n  key: string,\r\n  val: Val,\r\n): Promise<ExternalError> {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nasync function exe(\r\n  state: State,\r\n  name: string,\r\n  args: Val[],\r\n): Promise<ValAndErr> {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"print-str\":\r\n      state.output += args[0].v;\r\n      break;\r\n    case \"print\":\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { value: nullVal, err: `operation ${name} does not exist` };\r\n  }\r\n  return { value: nullVal, err: undefined };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes 1\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\", \"Parse\"],\r\n  },\r\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type-errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n];\r\n\r\nexport async function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invocationId: string,\r\n    print: boolean,\r\n  ) => Promise<InvokeError[]>,\r\n  terse: boolean = true,\r\n): Promise<string[]> {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const errors = await invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      \"testing\",\r\n      true,\r\n    );\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","export const insituxVersion = 20211010;\r\nimport { arityCheck, parse, typeCheck } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, typeNames } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops } from \"./types\";\r\nimport { InvokeError, typeErr, numOpErr, keyOpErr } from \"./types\";\r\n\r\nconst val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return `#${val.v.name}`;\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nlet stack: Val[] = [];\r\nlet lets: { [key: string]: Val }[] = [];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v: string = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\nconst num = ({ v }: Val) => v as number;\r\nconst str = ({ v }: Val) => v as string;\r\nconst vec = ({ v }: Val) => v as Val[];\r\nconst dic = ({ v }: Val) => v as Dict;\r\nconst asBoo = (val: Val) => (val.t === \"bool\" ? val.v : val.t !== \"null\");\r\n\r\nconst asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nconst stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nconst isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nconst isEqual = (a: Val, b: Val) => {\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nconst dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nconst dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nconst dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nasync function exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): Promise<InvokeError[] | undefined> {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(\r\n      op,\r\n      args.map(a => [a.t]),\r\n      errCtx,\r\n    );\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      {\r\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return;\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"round\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, round, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\r\n      );\r\n      return;\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        } else {\r\n          const arr = args[0].v.split(\"\");\r\n          arr[num(args[2])] = args[1].v;\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = slice(args[0].v);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\":\r\n      {\r\n        const closure = getExe(ctx, args.shift()!, errCtx);\r\n        const okT = (t: Val[\"t\"]) => t === \"vec\" || t === \"str\" || t === \"dict\";\r\n        const badArg =\r\n          op === \"map\" || op === \"for\"\r\n            ? args.findIndex(({ t }) => !okT(t))\r\n            : okT(args[0].t)\r\n            ? -1\r\n            : 0;\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument 2 must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n\r\n        if (op === \"for\") {\r\n          const arrays = args.map(asArray);\r\n          const lims = arrays.map(len);\r\n          const divisors = lims.map((_, i) =>\r\n            slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n          );\r\n          divisors.unshift(1);\r\n          const lim = divisors.pop()!;\r\n          if (lim > ctx.loopBudget) {\r\n            return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n          }\r\n          const array: Val[] = [];\r\n          for (let t = 0; t < lim; ++t) {\r\n            const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n            const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n            if (errors) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return;\r\n        }\r\n\r\n        if (op === \"map\") {\r\n          const arrays = args.map(asArray);\r\n          const shortest = min(...arrays.map(len));\r\n          const array: Val[] = [];\r\n          for (let i = 0; i < shortest; ++i) {\r\n            const errors = await closure(arrays.map(a => a[i]));\r\n            if (errors) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return;\r\n        }\r\n\r\n        const array = asArray(args.shift()!);\r\n        if (op !== \"reduce\") {\r\n          const isRemove = op === \"remove\",\r\n            isFind = op === \"find\",\r\n            isCount = op === \"count\";\r\n          const filtered: Val[] = [];\r\n          let count = 0;\r\n          for (let i = 0, lim = len(array); i < lim; ++i) {\r\n            const errors = await closure([array[i], ...args]);\r\n            if (errors) {\r\n              return errors;\r\n            }\r\n            const b = asBoo(stack.pop()!);\r\n            if (isCount) {\r\n              count += b ? 1 : 0;\r\n              continue;\r\n            }\r\n            if (isFind && b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n            if (!isFind && b !== isRemove) {\r\n              filtered.push(array[i]);\r\n            }\r\n          }\r\n          switch (op) {\r\n            case \"count\":\r\n              _num(count);\r\n              return;\r\n            case \"find\":\r\n              _nul();\r\n              return;\r\n            default:\r\n              _vec(filtered);\r\n              return;\r\n          }\r\n        }\r\n\r\n        if (!len(array)) {\r\n          if (len(args)) {\r\n            stack.push(args[0]);\r\n          } else {\r\n            _vec();\r\n          }\r\n          return;\r\n        }\r\n        if (len(array) < 2 && !len(args)) {\r\n          push(stack, array);\r\n          return;\r\n        }\r\n\r\n        let reduction: Val = (len(args) ? args : array).shift()!;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = await closure([reduction, array[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          reduction = stack.pop()!;\r\n        }\r\n        stack.push(reduction);\r\n      }\r\n      return;\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return await closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      if (!len(vec(args[0]))) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const src = asArray(args[0]);\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = await closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (mapped[0][1].t === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"range budget depleted\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[0])\r\n          .split(len(args) > 1 ? str(args[1]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(\r\n        vec(args[0])\r\n          .map(val2str)\r\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\r\n      );\r\n      return;\r\n    case \"starts-with?\":\r\n    case \"ends-with?\":\r\n      _boo((op === \"starts-with?\" ? starts : ends)(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(num(args[1]), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str((await doTests(invoke, !(len(args) && asBoo(args[0])))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const invocationId = `${errCtx.invocationId} eval`;\r\n      const errors = await parseAndExe(ctx, str(args[0]), invocationId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\r\n  const monoArityError = [{ e: \"Arity\", m: `one argument required`, errCtx }];\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets[len(lets) - 1]) {\r\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return async (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = await ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return async (params: Val[]) => {\r\n      const { err, value } = await ctx.exe(name, params);\r\n      if (!err) {\r\n        stack.push(value);\r\n      }\r\n      return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return async (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dictionary as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return async _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nexport async function exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): Promise<InvokeError[] | undefined> {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"npa\":\r\n      case \"upa\":\r\n        {\r\n          const paramIdx = ins.value;\r\n          if (paramIdx === -1) {\r\n            _vec(args);\r\n          } else if (len(args) <= paramIdx) {\r\n            _nul();\r\n          } else {\r\n            stack.push(args[paramIdx]);\r\n          }\r\n        }\r\n        break;\r\n      case \"ref\":\r\n        {\r\n          const name = ins.value;\r\n          if (ops[name]) {\r\n            _fun(name);\r\n          } else if (starts(name, \"$\")) {\r\n            const { value, err } = await ctx.get(substr(name, 1));\r\n            if (err) {\r\n              return [{ e: \"External\", m: err, errCtx }];\r\n            }\r\n            stack.push(value);\r\n          } else if (name in ctx.env.vars) {\r\n            stack.push(ctx.env.vars[name]);\r\n          } else if (name in lets[len(lets) - 1]) {\r\n            stack.push(lets[len(lets) - 1][name]);\r\n          } else if (name in ctx.env.funcs) {\r\n            _fun(name);\r\n          } else {\r\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n          }\r\n        }\r\n        break;\r\n      case \"exe\":\r\n        {\r\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\r\n          const nArgs = ins.value;\r\n          const params = splice(stack, len(stack) - nArgs, nArgs);\r\n          const errors = await closure(params);\r\n          if (errors) {\r\n            //Find next catch statement\r\n            const nextCat = slice(func.ins, i).findIndex(\r\n              ins => ins.typ === \"cat\",\r\n            );\r\n            if (nextCat !== -1) {\r\n              i += nextCat;\r\n              lets[len(lets) - 1][\"errors\"] = {\r\n                t: \"vec\",\r\n                v: errorsToDict(errors),\r\n              };\r\n              break;\r\n            }\r\n            return errors;\r\n          }\r\n        }\r\n        break;\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, 0, len(stack) - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"rec\":\r\n        {\r\n          lets[len(lets) - 1] = {};\r\n          i = -1;\r\n          const nArgs = ins.value;\r\n          args = splice(stack, len(stack) - nArgs, nArgs);\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n        }\r\n        continue;\r\n      case \"clo\":\r\n      case \"par\":\r\n        {\r\n          let [name, cins] = ins.value;\r\n          const isCapture = ({ typ, value }: Ins, i: number) =>\r\n            (typ === \"ref\" &&\r\n              !cins.find(i => i.typ === \"let\" && i.value === value)) ||\r\n            typ === \"npa\" ||\r\n            (typ === \"val\" && cins[i + 1].typ === \"exe\");\r\n          const derefFunc: Func = {\r\n            name: \"\",\r\n            ins: cins\r\n              .map((ins, i) => {\r\n                if (i + 1 === len(cins)) {\r\n                  return ins;\r\n                }\r\n                const possibleLet =\r\n                  ins.typ === \"val\" &&\r\n                  ins.value.t === \"str\" &&\r\n                  cins[i + 1].typ === \"exe\" &&\r\n                  lets[len(lets) - 1][ins.value.v];\r\n                return possibleLet\r\n                  ? <Ins>{ typ: \"val\", value: possibleLet }\r\n                  : ins;\r\n              })\r\n              .filter(isCapture),\r\n          };\r\n          const errors = await exeFunc(ctx, derefFunc, args, true);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const numIns = len(derefFunc.ins);\r\n          const captures = splice(stack, len(stack) - numIns, numIns);\r\n          cins = cins.map((ins, i) =>\r\n            isCapture(ins, i)\r\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\r\n              : ins,\r\n          );\r\n          //Rewrite partial closure to #(... func [args] args)\r\n          if (ins.typ === \"par\") {\r\n            const { value: exeNumArgs, errCtx } = cins.pop()!;\r\n            cins.unshift(cins.pop()!);\r\n            cins.push({ typ: \"upa\", value: -1, errCtx });\r\n            cins.push({\r\n              typ: \"val\",\r\n              value: <Val>{ t: \"str\", v: \"...\" },\r\n              errCtx,\r\n            });\r\n            cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\r\n          }\r\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nasync function parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n): Promise<InvokeError[] | undefined> {\r\n  const parsed = parse(code, invocationId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nexport async function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n  printResult = false,\r\n): Promise<InvokeError[]> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  const errors = await parseAndExe(ctx, code, invocationId);\r\n  ctx.callBudget = callBudget;\r\n  ctx.recurBudget = recurBudget;\r\n  ctx.loopBudget = loopBudget;\r\n  ctx.rangeBudget = rangeBudget;\r\n  delete ctx.env.funcs[\"entry\"];\r\n  if (!errors && printResult && len(stack)) {\r\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(stack[len(stack) - 1]) }]);\r\n  }\r\n  stack = [];\r\n  lets = [];\r\n  return errors ?? [];\r\n}\r\n\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax ? [\"function\"] : [];\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  return syms.filter(o => !has(hidden, o));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type ErrorOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport async function invoker(ctx: Ctx, code: string): Promise<ErrorOutput> {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const errors = await invoke(ctx, code, uuid, true);\r\n  let out: ErrorOutput = [];\r\n  errors.forEach(({ e, m, errCtx: { line, col, invocationId } }) => {\r\n    const invocation = invocations.get(invocationId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","inc","dec","and","or","rem","vec","dict","types","maxArity","map","for","reduce","filter","remove","find","count","rand","while","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","typeNames","null","num","bool","ref","func","clo","typeErr","m","errCtx","e","numOpErr","names","t","keyOpErr","nullVal","v","parseAllArgs","tokens","params","body","exp","parseArg","arityCheck","op","nArg","aErr","msg","amount","typeCheck","args","optimistic","onlyNum","nonNumArgIdx","findIndex","typeViolations","need","i","argTypes","some","r","checkArity","typ","text","shift","texts","err","head","when","ins","defIns","def","cond","ifT","ifF","insCount","arg","forEach","as","headIns","nArgs","unshift","parsed","errors","parseForm","insErrorDetect","fins","stack","lim","pop","badMatch","okTypes","headIs","badArg","parse","code","invocationId","stringError","makeCollsOps","emitComments","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","l","c","nextCh","n","isWhite","isDigit","ch","isParen","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","funcsAndErrors","segments","isFunc","entries","described","name","funcise","token","segment","named","eCtx","firstNonParam","p","parseError","syntaxise","okFuncs","fae","f","async","state","set","exe","output","out","val2str","quoted","ks","vs","k","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","dic","asBoo","asArray","stringify","cat","toDict","_","ddKeys","ddVals","existingIdx","isEqual","isVecEqual","bd","dictGet","dictSet","nKeys","nVals","getExe","ctx","monoArityError","tErr","violations","sum","every","closure","okT","arrays","lims","divisors","loopBudget","argIdxs","d","shortest","array","isRemove","isFind","isCount","filtered","reduction","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","edgeCase","step","rangeBudget","nums","invoke","terse","results","Map","env","vars","startTime","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","found","errorsToDict","newKey","inClosure","stackLen","tooManyLoops","paramIdx","nextCat","cins","isCapture","derefFunc","possibleLet","numIns","captures","exeNumArgs","printResult","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}