{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict };\r\n\r\nexport type ErrCtx = { sourceId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\nexport type Ctx = {\r\n  set: (key: string, val: Val) => Promise<string | undefined>;\r\n  get: (key: string) => Promise<ValOrErr>;\r\n  exe: (name: string, args: Val[]) => Promise<ValOrErr>;\r\n  env: Env;\r\n  loopBudget: number;\r\n  rangeBudget: number;\r\n  callBudget: number;\r\n  recurBudget: number;\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exp\"; value: number } //Marks the start of an expression as head for potential partial closures\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\"; value: number } //number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"rec\"; value: number } //Recur, number of args\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\r\n);\r\n\r\nexport const ops: {\r\n  [name: string]: {\r\n    minArity?: number;\r\n    maxArity?: number;\r\n    exactArity?: number;\r\n    numeric?: true | \"in only\";\r\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\r\n    returns?: Val[\"t\"][];\r\n  };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    types: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]], returns: [\"num\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3, types: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  filter: {\r\n    minArity: 2,\r\n    types: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    types: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  find: { minArity: 2, types: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: { minArity: 2, types: [[], [\"vec\", \"dict\", \"str\"]], returns: [\"num\"] },\r\n  repeat: { minArity: 2, types: [[], \"num\"] },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  while: {},\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    types: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    types: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    types: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"], returns: [\"vec\"] },\r\n  keys: { exactArity: 1, types: [\"dict\"] },\r\n  vals: { exactArity: 1, types: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    types: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"], returns: [\"str\"] },\r\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"], returns: [\"str\"] },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, types: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { isEqual } from \"./checks\";\r\nimport { len, slice, splice } from \"./poly-fills\";\r\nimport { Dict, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return `#${val.v.name}`;\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, Func, InvokeError, ops, typeNames, Val } from \"./types\";\r\nimport { assertUnreachable } from \"./types\";\r\nimport { dic, str, vec } from \"./val\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\r\nimport { assertUnreachable, InvokeError } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  sourceId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      } else if (emitComments) {\r\n        tokens[len(tokens) - 1].text += c;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      if (emitComments) {\r\n        tokens.push({\r\n          typ: \"rem\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps) {\r\n          if (c === \"[\") {\r\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n          } else if (c === \"{\") {\r\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseAllArgs(tokens: Token[], params: string[]) {\r\n  const body: ParserIns[] = [];\r\n  while (true) {\r\n    const exp = parseArg(tokens, params);\r\n    if (!len(exp)) {\r\n      break;\r\n    }\r\n    push(body, exp);\r\n  }\r\n  return body;\r\n}\r\n\r\nfunction parseForm(\r\n  tokens: Token[],\r\n  params: string[],\r\n  inPartial = true,\r\n): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\r\n  if (op === \"catch\") {\r\n    if (tokens[0].typ !== \"(\") {\r\n      return err(\"argument 1 must be expression\");\r\n    }\r\n    const body = parseArg(tokens, params);\r\n    const when = parseAllArgs(tokens, params);\r\n    if (!len(body) || !len(when)) {\r\n      return err(\"must provide at least 2 arguments\");\r\n    }\r\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const ins: Ins[] = [];\r\n    while (true) {\r\n      const defIns = parseArg(tokens, params);\r\n      if (len(ins) && !len(defIns)) {\r\n        return ins;\r\n      }\r\n      const val = parseArg(tokens, params);\r\n      if (!len(ins) && (!len(defIns) || !len(val))) {\r\n        return err(`must provide at least one declaration name and value`);\r\n      } else if (!len(val)) {\r\n        return err(`must provide a value after each declaration name`);\r\n      }\r\n      const def = defIns[0];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\");\r\n      }\r\n      push(ins, val);\r\n      ins.push({ typ: op, value: def.value, errCtx });\r\n    }\r\n  } else if (op === \"if\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        if (len(parseArg(tokens, params))) {\r\n          return err(\"too many branches\");\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n      }\r\n    } else {\r\n      const body = parseAllArgs(tokens, params);\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\r\n    const args: ParserIns[][] = [];\r\n    let insCount = 0;\r\n    while (true) {\r\n      const arg = parseArg(tokens, params);\r\n      if (!len(arg)) {\r\n        break;\r\n      }\r\n      args.push(arg);\r\n      insCount += len(arg);\r\n    }\r\n    if (op === \"recur\") {\r\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\r\n    }\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  let nArgs = 0;\r\n  //Head is a expression or parameter\r\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    if (inPartial) {\r\n      headIns.push({ typ: \"exp\", value: len(ins), errCtx });\r\n    }\r\n    push(headIns, ins);\r\n  }\r\n  const body: Ins[] = [];\r\n  while (len(tokens)) {\r\n    const parsed = parseArg(tokens, params);\r\n    if (!len(parsed)) {\r\n      break;\r\n    }\r\n    ++nArgs;\r\n    push(body, parsed);\r\n  }\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n\r\n  //Operation arity check, optionally disabled for partial closures\r\n  if (ops[op] && !inPartial) {\r\n    const errors = arityCheck(op, nArgs, errCtx);\r\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\r\n    if (!errors) {\r\n      //Upgrade some math and logic functions to their fast counterparts\r\n      if (nArgs === 2 && ops[`fast${op}`]) {\r\n        op = `fast${op}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (len(headIns)) {\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  } else {\r\n    const value: Val =\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op };\r\n    headIns.push({ typ: \"val\", value, errCtx });\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  }\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction parseArg(\r\n  tokens: Token[],\r\n  params: string[],\r\n  inPartial = false,\r\n): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  //Upon closure\r\n  if (\r\n    typ === \"sym\" &&\r\n    sub(\"#@\", text) &&\r\n    len(tokens) &&\r\n    tokens[0].typ === \"(\"\r\n  ) {\r\n    const texts = tokens.map(t => t.text);\r\n    const body = parseArg(tokens, params, text === \"@\");\r\n    const err = body.find(t => t.typ === \"err\");\r\n    if (err) {\r\n      return [err];\r\n    }\r\n    const value: [string, Ins[]] = [\r\n      slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\r\n      <Ins[]>body,\r\n    ];\r\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\r\n  }\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(params, text)) {\r\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params, inPartial);\r\n    case \")\":\r\n    case \"rem\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): [\"func\", Func] | [\"err\", InvokeError] {\r\n  const err = (m: string, eCtx = errCtx) =>\r\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\r\n  const firstNonParam = tokens.findIndex(\r\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\r\n  );\r\n  const params = slice(tokens, 0, firstNonParam);\r\n  const body = slice(tokens, firstNonParam);\r\n  //In the case of e.g. (function (+))\r\n  if (name === \"(\") {\r\n    return err(\"nameless function\");\r\n  }\r\n  //In the case of e.g. (function)\r\n  if (!len(params) && !len(body)) {\r\n    return err(\"empty function body\");\r\n  }\r\n  if (len(body) && body[0].typ === \")\") {\r\n    if (len(params)) {\r\n      //In the case of e.g. (function f %) or (function x y z)\r\n      body.unshift(params.pop()!);\r\n    } else {\r\n      //In the case of e.g. (function name)\r\n      return err(\"empty function body\");\r\n    }\r\n  }\r\n  //In the case of e.g. (function entry x y z)\r\n  if (len(params) && !len(body)) {\r\n    body.push(params.pop()!);\r\n  }\r\n  const ins: ParserIns[] = [];\r\n  while (len(body)) {\r\n    push(\r\n      ins,\r\n      parseArg(\r\n        body,\r\n        params.map(p => p.text),\r\n      ),\r\n    );\r\n  }\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const x = ins[i];\r\n    if (x.typ === \"err\") {\r\n      return err(x.value, x.errCtx);\r\n    }\r\n  }\r\n  return [\"func\", { name, ins: <Ins[]>ins }];\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"exp\":\r\n      case \"cat\":\r\n      case \"or\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const errors = insErrorDetect(ins.value[1]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"pop\":\r\n      case \"rec\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  sourceId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, sourceId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      sourceId: sourceId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  funcsAndErrors.forEach(fae => {\r\n    if (fae[0] === \"err\") {\r\n      errors.push(fae[1]);\r\n    } else {\r\n      okFuncs.push(fae[1]);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nasync function get(state: State, key: string): Promise<ValOrErr> {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key} not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nasync function set(\r\n  state: State,\r\n  key: string,\r\n  val: Val,\r\n): Promise<string | undefined> {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nasync function exe(state: State, name: string, args: Val[]): Promise<ValOrErr> {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"print-str\":\r\n      state.output += args[0].v;\r\n      break;\r\n    case \"print\":\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation ${name} does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes 1\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\", \"Parse\"],\r\n  },\r\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type-errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n];\r\n\r\nexport async function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    sourceId: string,\r\n    print: boolean,\r\n  ) => Promise<InvokeResult>,\r\n  terse = true,\r\n): Promise<string[]> {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = await invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      \"testing\",\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","export const insituxVersion = 20211013;\r\nimport { asBoo, isEqual } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, num, str, stringify, toDict, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet } from \"./val\";\r\n\r\nlet stack: Val[] = [];\r\nlet lets: { [key: string]: Val }[] = [];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nasync function exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): Promise<InvokeError[] | undefined> {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(\r\n      op,\r\n      args.map(a => [a.t]),\r\n      errCtx,\r\n    );\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      {\r\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return;\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[1].v;\r\n        _num(round(<number>args[0].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\r\n      );\r\n      return;\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        } else {\r\n          const arr = args[0].v.split(\"\");\r\n          arr[num(args[2])] = args[1].v;\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = slice(args[0].v);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = await closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      const array = asArray(args.shift()!);\r\n      if (op !== \"reduce\") {\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = await closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        _vec(filtered);\r\n        return;\r\n      }\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = await closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = await closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return await closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      if (!len(vec(args[0]))) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const src = asArray(args[0]);\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = await closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (mapped[0][1].t === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[0])\r\n          .split(len(args) > 1 ? str(args[1]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(\r\n        vec(args[0])\r\n          .map(val2str)\r\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\r\n      );\r\n      return;\r\n    case \"starts-with?\":\r\n    case \"ends-with?\":\r\n      _boo((op === \"starts-with?\" ? starts : ends)(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(num(args[1]), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str((await doTests(invoke, !(len(args) && asBoo(args[0])))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const sourceId = `${errCtx.sourceId} eval`;\r\n      const errors = await parseAndExe(ctx, str(args[0]), sourceId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\r\n  const monoArityError = [\r\n    {\r\n      e: \"Arity\",\r\n      m: `${typeNames[op.t]} as op requires one sole argument`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets[len(lets) - 1]) {\r\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return async (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = await ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return async (params: Val[]) => {\r\n      const valAndErr = await ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return async (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dictionary as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return async _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nasync function exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): Promise<InvokeError[] | undefined> {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"npa\":\r\n      case \"upa\":\r\n        {\r\n          const paramIdx = ins.value;\r\n          if (paramIdx === -1) {\r\n            _vec(args);\r\n          } else if (len(args) <= paramIdx) {\r\n            _nul();\r\n          } else {\r\n            stack.push(args[paramIdx]);\r\n          }\r\n        }\r\n        break;\r\n      case \"ref\":\r\n        {\r\n          const name = ins.value;\r\n          if (ops[name]) {\r\n            _fun(name);\r\n          } else if (starts(name, \"$\")) {\r\n            const valAndErr = await ctx.get(substr(name, 1));\r\n            if (valAndErr.kind === \"err\") {\r\n              return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n            }\r\n            stack.push(valAndErr.value);\r\n          } else if (name in ctx.env.vars) {\r\n            stack.push(ctx.env.vars[name]);\r\n          } else if (name in lets[len(lets) - 1]) {\r\n            stack.push(lets[len(lets) - 1][name]);\r\n          } else if (name in ctx.env.funcs) {\r\n            _fun(name);\r\n          } else {\r\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n          }\r\n        }\r\n        break;\r\n      case \"exe\":\r\n        {\r\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\r\n          const nArgs = ins.value;\r\n          const params = splice(stack, len(stack) - nArgs, nArgs);\r\n          const errors = await closure(params);\r\n          if (errors) {\r\n            //Find next catch statement\r\n            const nextCat = slice(func.ins, i).findIndex(\r\n              ins => ins.typ === \"cat\",\r\n            );\r\n            if (nextCat !== -1) {\r\n              i += nextCat;\r\n              lets[len(lets) - 1][\"errors\"] = {\r\n                t: \"vec\",\r\n                v: errorsToDict(errors),\r\n              };\r\n              break;\r\n            }\r\n            return errors;\r\n          }\r\n        }\r\n        break;\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, 0, len(stack) - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"rec\":\r\n        {\r\n          lets[len(lets) - 1] = {};\r\n          i = -1;\r\n          const nArgs = ins.value;\r\n          args = splice(stack, len(stack) - nArgs, nArgs);\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n        }\r\n        continue;\r\n      case \"clo\":\r\n      case \"par\":\r\n        {\r\n          const name = ins.value[0];\r\n          let cins = ins.value[1];\r\n          const isCapture = ({ typ, value }: Ins, i: number) =>\r\n            (typ === \"ref\" &&\r\n              !cins.find(i => i.typ === \"let\" && i.value === value)) ||\r\n            typ === \"npa\" ||\r\n            (typ === \"val\" && i + 1 !== len(cins) && cins[i + 1].typ === \"exe\");\r\n          const derefFunc: Func = {\r\n            name: \"\",\r\n            ins: cins\r\n              .map((ins, i) => {\r\n                if (i + 1 === len(cins)) {\r\n                  return ins;\r\n                }\r\n                const possibleLet =\r\n                  ins.typ === \"val\" &&\r\n                  ins.value.t === \"str\" &&\r\n                  cins[i + 1].typ === \"exe\" &&\r\n                  lets[len(lets) - 1][ins.value.v];\r\n                return possibleLet\r\n                  ? <Ins>{ typ: \"val\", value: possibleLet }\r\n                  : ins;\r\n              })\r\n              .filter(isCapture),\r\n          };\r\n          const errors = await exeFunc(ctx, derefFunc, args, true);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const numIns = len(derefFunc.ins);\r\n          const captures = splice(stack, len(stack) - numIns, numIns);\r\n          cins = cins.map((ins, i) =>\r\n            isCapture(ins, i)\r\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\r\n              : ins,\r\n          );\r\n          //Rewrite partial closure to #(... func [args] args)\r\n          if (ins.typ === \"par\") {\r\n            const { value: exeNumArgs, errCtx } = cins.pop()!;\r\n            //If has expression as head\r\n            if (len(cins) > 0 && cins[len(cins) - 1].typ === \"exe\") {\r\n              const headStartIdx = cins.findIndex(i => i.typ === \"exp\");\r\n              const head = splice(cins, headStartIdx, len(cins) - headStartIdx);\r\n              push(head, cins);\r\n              cins = head;\r\n            } else {\r\n              cins.unshift(cins.pop()!);\r\n            }\r\n            cins.push({ typ: \"upa\", value: -1, errCtx });\r\n            cins.push({\r\n              typ: \"val\",\r\n              value: <Val>{ t: \"str\", v: \"...\" },\r\n              errCtx,\r\n            });\r\n            cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\r\n          }\r\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\r\n        }\r\n        break;\r\n      case \"exp\":\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nasync function parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n): Promise<InvokeError[] | undefined> {\r\n  const parsed = parse(code, sourceId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param sourceId A unique ID used in immediate or future invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n *          or the final value of the invocation.\r\n */\r\nexport async function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n  printResult = false,\r\n): Promise<InvokeResult> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  const errors = await parseAndExe(ctx, code, sourceId);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, lets] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(value) }]);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param args The arguments to pass to the function.\r\n * @returns Invocation errors caused during execution of the function,\r\n *          or the final value of the invocation,\r\n *          or undefined if the function was not found.\r\n */\r\nexport async function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  args: Val[],\r\n): Promise<InvokeResult | undefined> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  const errors = await exeFunc(ctx, ctx.env.funcs[funcName], args);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  const value = stack.pop()!;\r\n  [stack, lets] = [[], []];\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations, (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax ? [\"function\", \"let\", \"var\"] : [];\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  return syms.filter(o => !has(hidden, o));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport async function invoker(ctx: Ctx, code: string): Promise<InvokeOutput> {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const valOrErrs = await invoke(ctx, code, uuid, true);\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, sourceId } }) => {\r\n    const invocation = invocations.get(sourceId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","rem","vec","dict","types","map","for","reduce","filter","remove","find","count","repeat","rand","while","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","typeNames","null","num","bool","ref","func","clo","v","dic","stringify","cat","val2str","quoted","t","name","ks","vs","k","i","asArray","toDict","args","pop","_","ddKeys","ddVals","forEach","existingIdx","findIndex","isEqual","dictGet","dictSet","nKeys","nVals","asBoo","isVecEqual","some","bd","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","optimistic","onlyNum","nonNumArgIdx","names","typeErr","typeViolations","need","argTypes","r","numOpErr","keyOpErr","nullVal","parseAllArgs","tokens","params","body","exp","parseArg","inPartial","typ","text","shift","texts","err","head","when","ins","defIns","def","cond","ifT","ifF","insCount","arg","as","headIns","nArgs","unshift","parsed","errors","parseForm","insErrorDetect","fins","stack","lim","badMatch","okTypes","headIs","badArg","parse","code","sourceId","stringError","makeCollsOps","emitComments","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","l","c","nextCh","n","isWhite","isDigit","ch","isParen","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","funcsAndErrors","segments","isFunc","entries","described","funcise","token","segment","named","eCtx","firstNonParam","p","syntaxise","okFuncs","fae","f","async","state","kind","set","exe","output","out","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","getExe","ctx","checkArity","monoArityError","tErr","violations","sum","every","closure","arrays","lims","divisors","loopBudget","argIdxs","d","shortest","array","isRemove","isFind","isCount","filtered","reduction","toRepeat","result","rangeBudget","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","newKey","inClosure","stackLen","tooManyLoops","paramIdx","nextCat","cins","isCapture","derefFunc","possibleLet","numIns","captures","exeNumArgs","headStartIdx","printResult","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}