{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const pi = Math.PI;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;","export type Val = {\r\n  v: Val[] | Dict | undefined | string | number | boolean | Func;\r\n  t:\r\n    | \"null\"\r\n    | \"str\"\r\n    | \"num\"\r\n    | \"bool\"\r\n    | \"key\"\r\n    | \"ref\"\r\n    | \"vec\"\r\n    | \"dict\"\r\n    | \"func\"\r\n    | \"clo\";\r\n};\r\n\r\nexport type ErrCtx = { invocationId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ExternalError = undefined | string;\r\nexport type ValAndErr = { value: Val; err?: ExternalError };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n  lets: { [key: string]: Val }[];\r\n};\r\n\r\nexport type Ctx = {\r\n  set: (key: string, val: Val) => Promise<ExternalError>;\r\n  get: (key: string) => Promise<ValAndErr>;\r\n  exe: (name: string, args: Val[]) => Promise<ValAndErr>;\r\n  env: Env;\r\n  loopBudget: number;\r\n  rangeBudget: number;\r\n  callBudget: number;\r\n  recurBudget: number;\r\n};\r\n\r\nexport type InsType =\r\n  | \"val\"  //Stack Val\r\n  | \"npa\"  //Named parameter\r\n  | \"upa\"  //Unnamed parameter\r\n  | \"var\"\r\n  | \"let\"\r\n  | \"ref\"\r\n  | \"exe\"\r\n  | \"if\"\r\n  | \"jmp\"  //Inexpensive jump\r\n  | \"loo\"  //Expensive jump\r\n  | \"pop\"  //Truncate stack\r\n  | \"or\"\r\n  | \"ret\"  //Return\r\n  | \"rec\"  //Recur\r\n  | \"cat\"  //Catch\r\n  | \"clo\"; //Closure\r\nexport type Ins = {\r\n  typ: InsType;\r\n  value: unknown;\r\n  errCtx: ErrCtx;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: {\r\n    minArity?: number;\r\n    maxArity?: number;\r\n    exactArity?: number;\r\n    onlyNum?: boolean;\r\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  };\r\n} = {\r\n  print: {},\r\n  \"print-str\": {},\r\n  \"!\": { exactArity: 1 },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, onlyNum: true },\r\n  \"-\": { minArity: 1, onlyNum: true },\r\n  \"*\": { minArity: 2, onlyNum: true },\r\n  \"/\": { minArity: 2, onlyNum: true },\r\n  \"//\": { minArity: 2, onlyNum: true },\r\n  \"**\": { minArity: 1, onlyNum: true },\r\n  \"<\": { minArity: 2, onlyNum: true },\r\n  \">\": { minArity: 2, onlyNum: true },\r\n  \"<=\": { minArity: 2, onlyNum: true },\r\n  \">=\": { minArity: 2, onlyNum: true },\r\n  inc: { exactArity: 1, onlyNum: true },\r\n  dec: { exactArity: 1, onlyNum: true },\r\n  min: { minArity: 2, onlyNum: true },\r\n  max: { minArity: 2, onlyNum: true },\r\n  abs: { exactArity: 1, onlyNum: true },\r\n  pi: { exactArity: 0 },\r\n  sqrt: { exactArity: 1, onlyNum: true },\r\n  round: { exactArity: 1, onlyNum: true },\r\n  floor: { exactArity: 1, onlyNum: true },\r\n  ceil: { exactArity: 1, onlyNum: true },\r\n  logn: { exactArity: 1, onlyNum: true },\r\n  log2: { exactArity: 1, onlyNum: true },\r\n  log10: { exactArity: 1, onlyNum: true },\r\n  \"odd?\": { exactArity: 1, onlyNum: true },\r\n  \"even?\": { exactArity: 1, onlyNum: true },\r\n  \"pos?\": { exactArity: 1, onlyNum: true },\r\n  \"neg?\": { exactArity: 1, onlyNum: true },\r\n  \"zero?\": { exactArity: 1, onlyNum: true },\r\n  \"null?\": { exactArity: 1 },\r\n  \"num?\": { exactArity: 1 },\r\n  \"bool?\": { exactArity: 1 },\r\n  \"str?\": { exactArity: 1 },\r\n  \"vec?\": { exactArity: 1 },\r\n  \"dict?\": { exactArity: 1 },\r\n  \"key?\": { exactArity: 1 },\r\n  \"func?\": { exactArity: 1 },\r\n  rem: { minArity: 2, onlyNum: true },\r\n  sin: { exactArity: 1, onlyNum: true },\r\n  cos: { exactArity: 1, onlyNum: true },\r\n  tan: { exactArity: 1, onlyNum: true },\r\n  vec: {},\r\n  dict: {},\r\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\r\n  \"to-num\": { exactArity: 1, types: [[\"str\", \"num\"]] },\r\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]] },\r\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]] },\r\n  map: { minArity: 2 },\r\n  for: { minArity: 2 },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: { minArity: 2 },\r\n  remove: { minArity: 2 },\r\n  find: { minArity: 2 },\r\n  count: { minArity: 2 },\r\n  str: {},\r\n  rand: { maxArity: 2, onlyNum: true },\r\n  \"rand-int\": { maxArity: 2, onlyNum: true },\r\n  while: {},\r\n  \"..\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    types: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n  },\r\n  push: { minArity: 2, maxArity: 3, types: [[\"vec\", \"dict\"]] },\r\n  sect: { minArity: 1, maxArity: 3, types: [[\"vec\", \"str\"], \"num\", \"num\"] },\r\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]] },\r\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"] },\r\n  keys: { exactArity: 1, types: [\"dict\"] },\r\n  vals: { exactArity: 1, types: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, types: [\"num\", \"num\", \"num\"] },\r\n  \"empty?\": { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\r\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"] },\r\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"] },\r\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  \"lower-case\": { exactArity: 1, types: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, types: [\"str\"] },\r\n  trim: { exactArity: 1, types: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, types: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, types: [\"str\"] },\r\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"] },\r\n  time: { exactArity: 0 },\r\n  version: { exactArity: 0 },\r\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"] },\r\n  symbols: { exactArity: 0 },\r\n  eval: { exactArity: 1, types: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ErrCtx, Func, Funcs, Ins, InvokeError, ops, Val } from \"./types\";\r\nimport { assertUnreachable } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"ref\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Omit<Ins, \"typ\"> & { typ: Ins[\"typ\"] | \"def\" | \"err\" };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invocationId: string,\r\n  makeCollsOps = true,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      } else {\r\n        tokens[len(tokens) - 1].text += c;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { invocationId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      tokens.push({\r\n        typ: \"rem\",\r\n        text: \"\",\r\n        errCtx: { invocationId, line, col },\r\n      });\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invocationId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps) {\r\n          if (c === \"[\") {\r\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n          } else if (c === \"{\") {\r\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inSymbol = !inNumber;\r\n      let typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      if (len(tokens)) {\r\n        const { typ: t, text } = tokens[len(tokens) - 1];\r\n        if (t === \"sym\" && (text === \"var\" || text === \"let\")) {\r\n          typ = \"ref\";\r\n        }\r\n      }\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseAllArgs(tokens: Token[], params: string[]) {\r\n  const body: ParserIns[] = [];\r\n  while (true) {\r\n    const exp = parseArg(tokens, params);\r\n    if (!len(exp)) {\r\n      break;\r\n    }\r\n    push(body, exp);\r\n  }\r\n  return body;\r\n}\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseForm(tokens: Token[], params: string[]): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\r\n  if (op === \"catch\") {\r\n    if (tokens[0].typ !== \"(\") {\r\n      return err(\"argument 1 must be expression\");\r\n    }\r\n    const body = parseArg(tokens, params);\r\n    const when = parseAllArgs(tokens, params);\r\n    if (!len(body) || !len(when)) {\r\n      return err(\"must provide at least 2 arguments\");\r\n    }\r\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const [def, val] = [parseArg(tokens, params), parseArg(tokens, params)];\r\n    const tooManyArgs = len(parseArg(tokens, params));\r\n    if (!len(def) || !len(val) || tooManyArgs) {\r\n      return err(\r\n        `must provide declaration name and value${tooManyArgs ? \" only\" : \"\"}`,\r\n      );\r\n    }\r\n    if (def[0].typ !== \"def\") {\r\n      return err(\"declaration name must be symbol\");\r\n    }\r\n    return [...val, { typ: op, value: def[0].value, errCtx }];\r\n  } else if (op === \"if\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        if (len(parseArg(tokens, params))) {\r\n          return err(\"too many branches\");\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n      }\r\n    } else {\r\n      const body = parseAllArgs(tokens, params);\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\r\n    const args: ParserIns[][] = [];\r\n    let insCount = 0;\r\n    while (true) {\r\n      const arg = parseArg(tokens, params);\r\n      if (!len(arg)) {\r\n        break;\r\n      }\r\n      args.push(arg);\r\n      insCount += len(arg);\r\n    }\r\n    if (op === \"recur\") {\r\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\r\n    }\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  let nArgs = 0;\r\n  //Head is a form or parameter\r\n  if (typ === \"(\" || has(params, text) || starts(text, \"#\")) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    push(headIns, ins);\r\n  }\r\n  const body: Ins[] = [];\r\n  while (len(tokens)) {\r\n    const parsed = parseArg(tokens, params);\r\n    if (!len(parsed)) {\r\n      break;\r\n    }\r\n    ++nArgs;\r\n    push(body, parsed);\r\n  }\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n\r\n  //Operation arity check\r\n  if (ops[op]) {\r\n    const errors = arityCheck(op, nArgs, errCtx);\r\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\r\n  }\r\n\r\n  if (len(headIns)) {\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  } else {\r\n    const value: Val =\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op };\r\n    headIns.push({ typ: \"val\", value, errCtx });\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  }\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction parseArg(tokens: Token[], params: string[]): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  //Upon closure\r\n  if (typ === \"sym\" && text === \"#\" && len(tokens) && tokens[0].typ === \"(\") {\r\n    const texts = tokens.map(t => t.text);\r\n    const body = parseArg(tokens, params);\r\n    const value = [slice(texts, 0, len(texts) - len(tokens)).join(\" \"), body];\r\n    return [{ typ: \"clo\", value, errCtx }];\r\n  }\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"#\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(params, text)) {\r\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"ref\":\r\n      return [{ typ: \"def\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params);\r\n    case \")\":\r\n    case \"rem\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\nfunction partitionWhen<T>(\r\n  array: T[],\r\n  predicate: (item: T) => boolean,\r\n): [T[], T[]] {\r\n  const a: T[] = [],\r\n    b: T[] = [];\r\n  for (let i = 0, isB = false; i < len(array); ++i) {\r\n    isB ||= predicate(array[i]);\r\n    (isB ? b : a).push(array[i]);\r\n  }\r\n  return [a, b];\r\n}\r\n\r\nfunction partition<T>(array: T[], predicate: (item: T) => boolean): [T[], T[]] {\r\n  const a: T[] = [],\r\n    b: T[] = [];\r\n  array.forEach(x => (predicate(x) ? b : a).push(x));\r\n  return [a, b];\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): {\r\n  func?: Func;\r\n  err?: InvokeError;\r\n} {\r\n  const [params, body] = partitionWhen(\r\n    tokens,\r\n    t => t.typ !== \"sym\" || t.text === \"#\",\r\n  );\r\n  //In the case of e.g. (function (+))\r\n  if (name === \"(\") {\r\n    return { err: { e: \"Parse\", m: \"nameless function\", errCtx } };\r\n  }\r\n  //In the case of e.g. (function)\r\n  if (!len(params) && !len(body)) {\r\n    return { err: { e: \"Parse\", m: \"empty function body\", errCtx } };\r\n  }\r\n  if (len(body) && body[0].typ === \")\") {\r\n    if (len(params)) {\r\n      //In the case of e.g. (function f #) or (function x y z)\r\n      body.unshift(params.pop()!);\r\n    } else {\r\n      //In the case of e.g. (function name)\r\n      return { err: { e: \"Parse\", m: \"empty function body\", errCtx } };\r\n    }\r\n  }\r\n  //In the case of e.g. (function entry x y z)\r\n  if (len(params) && !len(body)) {\r\n    body.push(params.pop()!);\r\n  }\r\n  const ins: ParserIns[] = [];\r\n  while (len(body)) {\r\n    push(\r\n      ins,\r\n      parseArg(\r\n        body,\r\n        params.map(p => p.text),\r\n      ),\r\n    );\r\n  }\r\n  const parseErrors = ins.filter(i => i.typ === \"err\");\r\n  if (len(parseErrors)) {\r\n    return {\r\n      err: {\r\n        e: \"Parse\",\r\n        m: <string>parseErrors[0].value,\r\n        errCtx: parseErrors[0].errCtx,\r\n      },\r\n    };\r\n  }\r\n  return { func: { name, ins: <Ins[]>ins } };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction errorDetect(\r\n  stringError: number[] | undefined,\r\n  tokens: Token[],\r\n  invocationId: string,\r\n) {\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invocationId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invocationId, line, col });\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invocationId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invocationId);\r\n  const errors = errorDetect(stringError, tokens, invocationId);\r\n  if (len(errors)) {\r\n    return { errors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      invocationId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const [funcArr, synErrors] = partition(funcsAndErrors, fae => !!fae.err);\r\n  push(\r\n    errors,\r\n    synErrors.map(fae => fae.err!),\r\n  );\r\n  const funcs: Funcs = {};\r\n  funcArr.forEach(({ func }) => (funcs[func!.name] = func!));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, ExternalError, InvokeError, Val, ValAndErr } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nasync function get(state: State, key: string): Promise<ValAndErr> {\r\n  if (!state.dict.has(key)) {\r\n    return { value: { t: \"null\", v: undefined }, err: `\"${key} not found.` };\r\n  }\r\n  return { value: state.dict.get(key)!, err: undefined };\r\n}\r\n\r\nasync function set(\r\n  state: State,\r\n  key: string,\r\n  val: Val,\r\n): Promise<ExternalError> {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nasync function exe(\r\n  state: State,\r\n  name: string,\r\n  args: Val[],\r\n): Promise<ValAndErr> {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"print-str\":\r\n      state.output += args[0].v;\r\n      break;\r\n    case \"print\":\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { value: nullVal, err: `operation ${name} does not exist` };\r\n  }\r\n  return { value: nullVal, err: undefined };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `(:age {:name \"Patrick\" :age 24})`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543215`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (+ 1 :a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 #)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + #) (len #)) #1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? #)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x #])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[# #1 #2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes 1\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\", \"Parse\"],\r\n  },\r\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport async function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invocationId: string,\r\n    print: boolean,\r\n  ) => Promise<InvokeError[]>,\r\n  terse: boolean = true,\r\n): Promise<string[]> {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {}, lets: [] };\r\n    const startTime = getTimeMs();\r\n    const errors = await invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      \"testing\",\r\n      true,\r\n    );\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [testNum, testName, testElapsed, testErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${testNum} ${testName} ${testElapsed} ${okOut} ${testErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","export const insituxVersion = 20210929;\r\nimport { arityCheck, parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, pi, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isArray, isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, Ins, ops, typeNames } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, InvokeError, Val } from \"./types\";\r\n\r\nconst val2str = ({ v, t }: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  switch (t) {\r\n    case \"bool\":\r\n      return `${v as boolean}`;\r\n    case \"num\":\r\n      return `${v as number}`;\r\n    case \"str\":\r\n    case \"key\":\r\n    case \"ref\":\r\n    case \"func\":\r\n      return v as string;\r\n    case \"clo\":\r\n      return `#${(v as Func).name}`;\r\n    case \"vec\":\r\n      return `[${(v as Val[]).map(quoted).join(\" \")}]`;\r\n    case \"dict\": {\r\n      const { keys, vals } = v as Dict;\r\n      const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n      const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n      return `{${entries.join(\", \")}}`;\r\n    }\r\n    case \"null\":\r\n      return \"null\";\r\n  }\r\n  return assertUnreachable(t);\r\n};\r\n\r\nlet stack: Val[] = [];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v: string = \"\") => stack.push({ t: \"str\", v });\r\nconst _key = (v: string) => stack.push({ t: \"key\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\nconst num = ({ v }: Val) => v as number;\r\nconst str = ({ v }: Val) => v as string;\r\nconst vec = ({ v }: Val) => v as Val[];\r\nconst dic = ({ v }: Val) => v as Dict;\r\nconst clo = ({ v }: Val) => v as Func;\r\nconst asBoo = ({ t, v }: Val) => (t === \"bool\" ? (v as boolean) : t !== \"null\");\r\nexport const visStr = (val: Val): val is { t: \"str\"; v: string } =>\r\n  val.t === \"str\";\r\nexport const visNum = (val: Val): val is { t: \"num\"; v: number } =>\r\n  val.t === \"num\";\r\nexport const visVec = (val: Val): val is { t: \"vec\"; v: Val[] } =>\r\n  val.t === \"vec\";\r\nexport const visDic = (val: Val): val is { t: \"dict\"; v: Dict } =>\r\n  val.t === \"dict\";\r\nexport const visFun = (val: Val): val is { t: \"func\"; v: string } =>\r\n  val.t === \"func\";\r\nexport const visClo = (val: Val): val is { t: \"clo\"; v: Func } =>\r\n  val.t === \"clo\";\r\nexport const visKey = (val: Val): val is { t: \"key\"; v: string } =>\r\n  val.t === \"key\";\r\nexport const visBoo = (val: Val): val is { t: \"bool\"; v: boolean } =>\r\n  val.t === \"bool\";\r\n\r\nconst asArray = ({ t, v }: Val): Val[] =>\r\n  t === \"vec\"\r\n    ? slice(v as Val[])\r\n    : t === \"str\"\r\n    ? [...(v as string)].map(s => ({ t: \"str\", v: s }))\r\n    : t === \"dict\"\r\n    ? (v as Dict).keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, (v as Dict).vals[i]],\r\n      }))\r\n    : [];\r\n\r\nconst stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nconst typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nconst isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nconst isDictEqual = (a: Val, b: Val): boolean => {\r\n  const [ad, bd] = [dic(a), dic(b)];\r\n  return len(ad.keys) === len(bd.keys) && isVecEqual(ad.keys, bd.keys);\r\n};\r\n\r\nconst isEqual = (a: Val, b: Val) => {\r\n  const { t } = a;\r\n  switch (t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return num(a) === num(b);\r\n    case \"vec\":\r\n      return isVecEqual(vec(a), vec(b));\r\n    case \"dict\":\r\n      return isDictEqual(a, b);\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return clo(a).name === clo(b).name;\r\n  }\r\n  return assertUnreachable(t);\r\n};\r\n\r\nconst dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nconst dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nconst dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nfunction typeCheck(\r\n  op: string,\r\n  args: Val[],\r\n  errCtx: ErrCtx,\r\n): InvokeError[] | undefined {\r\n  const { types, onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(a => a.t !== \"num\");\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const typeName = typeNames[args[nonNumArgIdx].t];\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${typeName}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg) {\r\n        return false;\r\n      }\r\n      const argType = args[i].t;\r\n      const badType = typeNames[argType];\r\n      return isArray(need)\r\n        ? has(need, argType)\r\n          ? false\r\n          : `argument ${i + 1} must be either: ${need\r\n              .map(t => typeNames[t])\r\n              .join(\", \")}, not ${badType}`\r\n        : need === argType\r\n        ? false\r\n        : `argument ${i + 1} must be ${typeNames[need]}, not ${badType}`;\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nasync function exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): Promise<InvokeError[] | undefined> {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(op, args, errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      {\r\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return;\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(str(args[0]))\r\n          : args[0].t === \"vec\"\r\n          ? len(vec(args[0]))\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      _key(`:${val2str(args[0])}`);\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(num(args[0])));\r\n      return;\r\n    case \"pi\":\r\n      _num(pi);\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"round\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, round, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\r\n      );\r\n      return;\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(str(args[0]), str(args[1]));\r\n        } else {\r\n          const arr = str(args[0]).split(\"\");\r\n          arr[num(args[2])] = str(args[1]);\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = vec(args[0]).findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = asArray(args[0]);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\":\r\n      {\r\n        const closure = getExe(ctx, args.shift()!, errCtx);\r\n        const okT = (t: Val[\"t\"]) => t === \"vec\" || t === \"str\" || t === \"dict\";\r\n        const badArg =\r\n          op === \"map\" || op === \"for\"\r\n            ? args.findIndex(({ t }) => !okT(t))\r\n            : okT(args[0].t)\r\n            ? -1\r\n            : 0;\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument 2 must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n\r\n        if (op === \"for\") {\r\n          const arrays = args.map(asArray);\r\n          const lims = arrays.map(len);\r\n          const divisors = lims.map((_, i) =>\r\n            slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n          );\r\n          divisors.unshift(1);\r\n          const lim = divisors.pop()!;\r\n          if (lim > ctx.loopBudget) {\r\n            return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n          }\r\n          const array: Val[] = [];\r\n          for (let t = 0; t < lim; ++t) {\r\n            const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n            const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n            if (errors) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return;\r\n        }\r\n\r\n        if (op === \"map\") {\r\n          const arrays = args.map(asArray);\r\n          const shortest = min(...arrays.map(len));\r\n          const array: Val[] = [];\r\n          for (let i = 0; i < shortest; ++i) {\r\n            const errors = await closure(arrays.map(a => a[i]));\r\n            if (errors) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return;\r\n        }\r\n\r\n        const array = asArray(args.shift()!);\r\n        if (op !== \"reduce\") {\r\n          const isRemove = op === \"remove\",\r\n            isFind = op === \"find\",\r\n            isCount = op === \"count\";\r\n          const filtered: Val[] = [];\r\n          let count = 0;\r\n          for (let i = 0, lim = len(array); i < lim; ++i) {\r\n            const errors = await closure([array[i], ...args]);\r\n            if (errors) {\r\n              return errors;\r\n            }\r\n            const b = asBoo(stack.pop()!);\r\n            if (isCount) {\r\n              count += b ? 1 : 0;\r\n              continue;\r\n            }\r\n            if (isFind && b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n            if (!isFind && b !== isRemove) {\r\n              filtered.push(array[i]);\r\n            }\r\n          }\r\n          switch (op) {\r\n            case \"count\":\r\n              _num(count);\r\n              return;\r\n            case \"find\":\r\n              _nul();\r\n              return;\r\n            default:\r\n              _vec(filtered);\r\n              return;\r\n          }\r\n        }\r\n\r\n        if (!len(array)) {\r\n          if (len(args)) {\r\n            stack.push(args[0]);\r\n          } else {\r\n            _vec();\r\n          }\r\n          return;\r\n        }\r\n        if (len(array) < 2 && !len(args)) {\r\n          push(stack, array);\r\n          return;\r\n        }\r\n\r\n        let reduction: Val = (len(args) ? args : array).shift()!;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = await closure([reduction, array[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          reduction = stack.pop()!;\r\n        }\r\n        stack.push(reduction);\r\n      }\r\n      return;\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \"..\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      return await closure(flat(args.map(a => (a.t === \"vec\" ? vec(a) : [a]))));\r\n    }\r\n    case \"into\": {\r\n      const a0v = args[0].t === \"vec\";\r\n      const a1v = args[1].t === \"vec\";\r\n      if (a0v) {\r\n        _vec(concat(vec(args[0]), a1v ? vec(args[1]) : asArray(args[1])));\r\n      } else {\r\n        if (a1v) {\r\n          const v1 = asArray(args[1]);\r\n          stack.push(toDict(concat(flat(asArray(args[0]).map(vec)), v1)));\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = vec(args[0]);\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const isVec = v.t === \"vec\";\r\n      const vlen = isVec ? len(vec(v)) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (isVec ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (isVec) {\r\n        _vec(slice(vec(v), a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      if (!len(vec(args[0]))) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const src = asArray(args[0]);\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = await closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (visNum(mapped[0][1])) {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"range budget depleted\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[0])\r\n          .split(len(args) > 1 ? str(args[1]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(\r\n        vec(args[0])\r\n          .map(val2str)\r\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\r\n      );\r\n      return;\r\n    case \"starts-with?\":\r\n      _boo(starts(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"ends-with?\":\r\n      _boo(ends(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(num(args[1]), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      {\r\n        const tests = await doTests(invoke, !(len(args) && asBoo(args[0])));\r\n        const summary = tests.pop()!;\r\n        for (const test of tests) {\r\n          await exeOp(\"print\", [{ v: test, t: \"str\" }], ctx, errCtx, false);\r\n        }\r\n        _str(summary);\r\n      }\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const errors = await parseAndExe(ctx, str(args[0]), errCtx.invocationId);\r\n      if (errors) {\r\n        errors.forEach(e => {\r\n          e.errCtx.invocationId = \"evaluated\";\r\n        });\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      ctx.env.lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\r\n  const monoArityError = [{ e: \"Arity\", m: `one argument required`, errCtx }];\r\n  if (visStr(op) || visFun(op)) {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in ctx.env.lets[len(ctx.env.lets) - 1]) {\r\n      return getExe(ctx, ctx.env.lets[len(ctx.env.lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return async (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = await ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return async (params: Val[]) => {\r\n      const { err, value } = await ctx.exe(name, params);\r\n      if (!err) {\r\n        stack.push(value);\r\n      }\r\n      return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n    };\r\n  } else if (visClo(op)) {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (visKey(op)) {\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t !== \"dict\") {\r\n        const badType = typeNames[params[0].t];\r\n        return [\r\n          typeErr(\r\n            `keyword as operation argument must be dictionary, not ${badType}`,\r\n            errCtx,\r\n          ),\r\n        ];\r\n      }\r\n      stack.push(dictGet(dic(params[0]), op));\r\n      return;\r\n    };\r\n  } else if (visNum(op)) {\r\n    const n = floor(op.v);\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        const badType = typeNames[a.t];\r\n        return [\r\n          typeErr(\r\n            `number as operation argument must be string, vector, or dictionary, not ${badType}`,\r\n            errCtx,\r\n          ),\r\n        ];\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (visVec(op)) {\r\n    const { v } = op;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (visDic(op)) {\r\n    const dict = op.v;\r\n    return async (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dictionary as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (visBoo(op)) {\r\n    const cond = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return async _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nexport async function exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): Promise<InvokeError[] | undefined> {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    ctx.env.lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const { typ, value, errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (typ) {\r\n      case \"val\":\r\n        stack.push(value as Val);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[value as string] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        ctx.env.lets[len(ctx.env.lets) - 1][value as string] =\r\n          stack[len(stack) - 1];\r\n        break;\r\n      case \"npa\":\r\n      case \"upa\":\r\n        {\r\n          const paramIdx = value as number;\r\n          if (paramIdx === -1) {\r\n            _vec(args);\r\n          } else if (len(args) <= paramIdx) {\r\n            _nul();\r\n          } else {\r\n            stack.push(args[paramIdx]);\r\n          }\r\n        }\r\n        break;\r\n      case \"ref\":\r\n        {\r\n          const name = value as string;\r\n          if (ops[name]) {\r\n            _fun(name);\r\n          } else if (starts(name, \"$\")) {\r\n            const { value, err } = await ctx.get(substr(name, 1));\r\n            if (err) {\r\n              return [{ e: \"External\", m: err, errCtx }];\r\n            }\r\n            stack.push(value);\r\n          } else if (name in ctx.env.vars) {\r\n            stack.push(ctx.env.vars[name]);\r\n          } else if (name in ctx.env.lets[len(ctx.env.lets) - 1]) {\r\n            stack.push(ctx.env.lets[len(ctx.env.lets) - 1][name]);\r\n          } else if (name in ctx.env.funcs) {\r\n            _fun(name);\r\n          } else {\r\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n          }\r\n        }\r\n        break;\r\n      case \"exe\":\r\n        {\r\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\r\n          const nArgs = value as number;\r\n          const params = splice(stack, len(stack) - nArgs, nArgs);\r\n          const errors = await closure(params);\r\n          if (errors) {\r\n            if (i + 1 !== lim && func.ins[i + 1].typ === \"cat\") {\r\n              ++i;\r\n              ctx.env.lets[len(ctx.env.lets) - 1][\"errors\"] = {\r\n                t: \"vec\",\r\n                v: errorsToDict(errors),\r\n              };\r\n              break;\r\n            }\r\n            return errors;\r\n          }\r\n        }\r\n        break;\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += value as number;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += value as number;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += value as number;\r\n        break;\r\n      case \"loo\":\r\n        i += value as number;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - (value as number), value as number);\r\n        break;\r\n      case \"ret\":\r\n        if (value as boolean) {\r\n          splice(stack, 0, len(stack) - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"rec\":\r\n        {\r\n          ctx.env.lets[len(ctx.env.lets) - 1] = {};\r\n          i = -1;\r\n          const nArgs = value as number;\r\n          args = splice(stack, len(stack) - nArgs, nArgs);\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n        }\r\n        continue;\r\n      case \"clo\":\r\n        {\r\n          let [name, ins] = value as [string, Ins[]];\r\n          const isCapture = ({ typ, value }: Ins) =>\r\n            (typ === \"ref\" &&\r\n              !ins.find(i => i.typ === \"let\" && i.value === value)) ||\r\n            typ === \"npa\";\r\n          const derefFunc: Func = {\r\n            name: \"\",\r\n            ins: ins.filter(isCapture),\r\n          };\r\n          const errors = await exeFunc(ctx, derefFunc, args, true);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const numIns = len(derefFunc.ins);\r\n          const captures = splice(stack, len(stack) - numIns, numIns);\r\n          ins = ins.map(ins =>\r\n            isCapture(ins)\r\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\r\n              : ins,\r\n          );\r\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins } });\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(typ);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    ctx.env.lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nasync function parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n): Promise<InvokeError[] | undefined> {\r\n  const parsed = parse(code, invocationId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nexport async function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n  printResult = false,\r\n): Promise<InvokeError[]> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  const errors = await parseAndExe(ctx, code, invocationId);\r\n  ctx.env.lets = [];\r\n  ctx.callBudget = callBudget;\r\n  ctx.recurBudget = recurBudget;\r\n  ctx.loopBudget = loopBudget;\r\n  ctx.rangeBudget = rangeBudget;\r\n  delete ctx.env.funcs[\"entry\"];\r\n  if (!errors && printResult && len(stack)) {\r\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(stack[len(stack) - 1]) }]);\r\n  }\r\n  stack = [];\r\n  return errors ?? [];\r\n}\r\n\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax ? [\"function\"] : [];\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  return syms.filter(o => !has(hidden, o));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type ErrorOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport async function invoker(ctx: Ctx, code: string): Promise<ErrorOutput> {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const errors = await invoke(ctx, code, uuid, true);\r\n  let out: ErrorOutput = [];\r\n  errors.forEach(({ e, m, errCtx: { line, col, invocationId } }) => {\r\n    const invocation = invocations.get(invocationId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","pi","PI","logn","log","log2","log10","ops","print","exactArity","minArity","onlyNum","inc","dec","rem","vec","dict","types","maxArity","map","for","reduce","filter","remove","find","count","rand","while","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","typeNames","null","num","bool","ref","func","clo","nullVal","t","v","parseAllArgs","tokens","params","body","exp","parseArg","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typ","text","shift","texts","head","err","when","def","tooManyArgs","cond","ins","ifT","ifF","args","insCount","arg","forEach","as","headIns","nArgs","unshift","parsed","errors","parseForm","parse","code","invocationId","stringError","makeCollsOps","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","i","l","c","nextCh","n","isWhite","isDigit","ch","isParen","tokenise","countTyp","numL","numR","untimely","r","direction","lim","depth","findParenImbalance","emptyHead","lastWasL","errorDetect","funcs","funcsAndErrors","segments","isFunc","entries","described","name","funcise","token","segment","named","array","predicate","isB","partitionWhen","pop","p","parseErrors","syntaxise","funcArr","synErrors","fae","partition","async","state","set","exe","output","out","doTests","invoke","terse","results","Map","env","vars","lets","startTime","loopBudget","rangeBudget","callBudget","recurBudget","okErr","okOut","elapsedMs","testNum","testName","testElapsed","testErrors","display","totalMs","sum","numPassed","val2str","quoted","ks","vs","k","stack","_boo","_num","_str","_vec","_dic","_nul","_fun","dic","asBoo","visNum","asArray","stringify","cat","toDict","_","ddKeys","ddVals","existingIdx","findIndex","isEqual","typeErr","isVecEqual","some","ad","bd","isDictEqual","dictGet","dictSet","nKeys","nVals","exeOp","ctx","checkArity","tErr","violations","nonNumArgIdx","typeName","typeViolations","need","argType","badType","typeCheck","closure","getExe","okT","badArg","arrays","lims","divisors","argIdxs","d","shortest","isRemove","isFind","isCount","filtered","reduction","a0v","a1v","v1","d1","dictDrop","isVec","vlen","del","skip","take","src","mapped","edgeCase","step","nums","summary","test","alsoSyntax","syms","hidden","sLen","parseAndExe","monoArityError","exeFunc","visClo","visKey","visVec","found","visDic","visBoo","errorsToDict","newKey","inClosure","stackLen","tooManyLoops","paramIdx","isCapture","derefFunc","numIns","captures","printResult","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}