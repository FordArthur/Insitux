{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/types.ts","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/startup"],"sourcesContent":["export const insituxVersion = 20210915;\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, pi, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isArray, isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, ops, typeNames } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, InvokeError, Val } from \"./types\";\r\n\r\nconst val2str = ({ v, t }: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  switch (t) {\r\n    case \"bool\":\r\n      return `${v as boolean}`;\r\n    case \"num\":\r\n      return `${v as number}`;\r\n    case \"str\":\r\n    case \"key\":\r\n    case \"ref\":\r\n      return v as string;\r\n    case \"vec\":\r\n      return `[${(v as Val[]).map(quoted).join(\" \")}]`;\r\n    case \"dict\": {\r\n      const { keys, vals } = v as Dict;\r\n      const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n      const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n      return `{${entries.join(\", \")}}`;\r\n    }\r\n    case \"null\":\r\n      return \"null\";\r\n    case \"func\":\r\n      return `<${v}>`;\r\n  }\r\n  return assertUnreachable(t);\r\n};\r\n\r\nlet stack: Val[] = [];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v: string = \"\") => stack.push({ t: \"str\", v });\r\nconst _key = (v: string) => stack.push({ t: \"key\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\nconst num = ({ v }: Val) => v as number;\r\nconst str = ({ v }: Val) => v as string;\r\nconst vec = ({ v }: Val) => v as Val[];\r\nconst dic = ({ v }: Val) => v as Dict;\r\nconst asBoo = ({ t, v }: Val) => (t === \"bool\" ? (v as boolean) : t !== \"null\");\r\nexport const visStr = (val: Val): val is { t: \"str\"; v: string } =>\r\n  val.t === \"str\";\r\nexport const visNum = (val: Val): val is { t: \"num\"; v: number } =>\r\n  val.t === \"num\";\r\nexport const visVec = (val: Val): val is { t: \"vec\"; v: Val[] } =>\r\n  val.t === \"vec\";\r\nexport const visDic = (val: Val): val is { t: \"dict\"; v: Dict } =>\r\n  val.t === \"dict\";\r\nexport const visFun = (val: Val): val is { t: \"func\"; v: string } =>\r\n  val.t === \"func\";\r\nexport const visKey = (val: Val): val is { t: \"key\"; v: string } =>\r\n  val.t === \"key\";\r\nexport const visBoo = (val: Val): val is { t: \"bool\"; v: boolean } =>\r\n  val.t == \"bool\";\r\n\r\nconst asArray = ({ t, v }: Val): Val[] =>\r\n  t === \"vec\"\r\n    ? slice(v as Val[])\r\n    : t === \"str\"\r\n    ? [...(v as string)].map(s => ({ t: \"str\", v: s }))\r\n    : t === \"dict\"\r\n    ? (v as Dict).keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, (v as Dict).vals[i]],\r\n      }))\r\n    : [];\r\n\r\nconst stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nconst typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nconst isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nconst isDictEqual = (a: Val, b: Val): boolean => {\r\n  const [ad, bd] = [dic(a), dic(b)];\r\n  return len(ad.keys) === len(bd.keys) && isVecEqual(ad.keys, bd.keys);\r\n};\r\n\r\nconst isEqual = (a: Val, b: Val) => {\r\n  const { t } = a;\r\n  switch (t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return num(a) === num(b);\r\n    case \"vec\":\r\n      return isVecEqual(vec(a), vec(b));\r\n    case \"dict\":\r\n      return isDictEqual(a, b);\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n  }\r\n  return assertUnreachable(t);\r\n};\r\n\r\nconst dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nconst dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nconst dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nfunction exeOpViolations(op: string, args: Val[], errCtx: ErrCtx) {\r\n  const { types, exactArity, maxArity, minArity, onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(a => a.t !== \"num\");\r\n    if (nonNumArgIdx === -1) {\r\n      return [];\r\n    }\r\n    const typeName = typeNames[args[nonNumArgIdx].t];\r\n    return [typeErr(`numeric arguments only, not ${typeName}`, errCtx)];\r\n  }\r\n  if (!types) {\r\n    return [];\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg) {\r\n        return false;\r\n      }\r\n      const argType = args[i].t;\r\n      const badType = typeNames[argType];\r\n      return isArray(need)\r\n        ? has(need, argType)\r\n          ? false\r\n          : `argument ${i + 1} must be either: ${need\r\n              .map(t => typeNames[t])\r\n              .join(\", \")}, not ${badType}`\r\n        : need === argType\r\n        ? false\r\n        : `argument ${i + 1} must be ${typeNames[need]}, not ${badType}`;\r\n    })\r\n    .filter(r => !!r);\r\n  return typeViolations.map(v => typeErr(<string>v, errCtx));\r\n}\r\n\r\nasync function exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n): Promise<InvokeError[]> {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Argument arity and type checks\r\n  {\r\n    const violations = exeOpViolations(op, args, errCtx);\r\n    if (len(violations)) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"execute-last\":\r\n      return await getExe(ctx, args.pop()!, errCtx)(args);\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return [];\r\n    case \"print\":\r\n    case \"print-str\":\r\n      {\r\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\r\n        _nul();\r\n      }\r\n      return [];\r\n    case \"vec\":\r\n      _vec(args);\r\n      return [];\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return [];\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(str(args[0]))\r\n          : args[0].t === \"vec\"\r\n          ? len(vec(args[0]))\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return [];\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return [];\r\n    case \"to-key\":\r\n      _key(`:${val2str(args[0])}`);\r\n      return [];\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return [];\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return [];\r\n        }\r\n      }\r\n      _boo(true);\r\n      return [];\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return [];\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return [];\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return [];\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return [];\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return [];\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return [];\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return [];\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return [];\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return [];\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return [];\r\n        }\r\n      }\r\n      _boo(true);\r\n      return [];\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return [];\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return [];\r\n    case \"abs\":\r\n      _num(abs(num(args[0])));\r\n      return [];\r\n    case \"pi\":\r\n      _num(pi);\r\n      return [];\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"round\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, round, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return [];\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return [];\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return [];\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && args[0].t === \"func\"),\r\n      );\r\n      return [];\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return [];\r\n    case \"idx\": {\r\n      let i: number = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        i = subIdx(str(args[0]), str(args[1]));\r\n      } else if (args[0].t === \"vec\") {\r\n        i = vec(args[0]).findIndex(a => isEqual(a, args[1]));\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return [];\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n      {\r\n        const closure = getExe(ctx, args.shift()!, errCtx);\r\n        const okT = (t: Val[\"t\"]) => t === \"vec\" || t === \"str\" || t === \"dict\";\r\n        const badArg =\r\n          op === \"map\" || op === \"for\"\r\n            ? args.findIndex(({ t }) => !okT(t))\r\n            : okT(args[0].t)\r\n            ? -1\r\n            : 0;\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument 2 must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n\r\n        if (op === \"for\") {\r\n          const arrays = args.map(asArray);\r\n          const lims = arrays.map(len);\r\n          const divisors = lims.map((_, i) =>\r\n            slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n          );\r\n          divisors.unshift(1);\r\n          const lim = divisors.pop()!;\r\n          if (lim > ctx.loopBudget) {\r\n            return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n          }\r\n          const array: Val[] = [];\r\n          for (let t = 0; t < lim; ++t) {\r\n            const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n            const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n            if (len(errors)) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return [];\r\n        }\r\n\r\n        if (op === \"map\") {\r\n          const arrays = args.map(asArray);\r\n          const shortest = min(...arrays.map(a => len(a)));\r\n          const array: Val[] = [];\r\n          for (let i = 0; i < shortest; ++i) {\r\n            const errors = await closure(arrays.map(a => a[i]));\r\n            if (len(errors)) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return [];\r\n        }\r\n\r\n        const array = asArray(args.shift()!);\r\n        const isRemove = op === \"remove\";\r\n        if (op === \"filter\" || isRemove) {\r\n          const filtered: Val[] = [];\r\n          for (let i = 0, lim = len(array); i < lim; ++i) {\r\n            const errors = await closure([array[i], ...args]);\r\n            if (len(errors)) {\r\n              return errors;\r\n            }\r\n            if (asBoo(stack.pop()!) !== isRemove) {\r\n              filtered.push(array[i]);\r\n            }\r\n          }\r\n          _vec(filtered);\r\n          return [];\r\n        }\r\n\r\n        if (len(array) < 2) {\r\n          push(stack, array);\r\n          return [];\r\n        }\r\n        let reduction: Val = (len(args) ? args : array).shift()!;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = await closure([reduction, array[i]]);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          reduction = stack.pop()!;\r\n        }\r\n        stack.push(reduction);\r\n      }\r\n      return [];\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return [];\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return [];\r\n    case \"..\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      return await closure(flat(args.map(a => (a.t === \"vec\" ? vec(a) : [a]))));\r\n    }\r\n    case \"into\": {\r\n      const a0v = args[0].t === \"vec\";\r\n      const a1v = args[1].t === \"vec\";\r\n      if (a0v) {\r\n        _vec(concat(vec(args[0]), a1v ? vec(args[1]) : asArray(args[1])));\r\n      } else {\r\n        if (a1v) {\r\n          const v1 = asArray(args[1]);\r\n          stack.push(toDict(concat(flat(asArray(args[0]).map(vec)), v1)));\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return [];\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(asArray(args[0]), [args[1]]));\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return [];\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const isVec = v.t === \"vec\";\r\n      const vlen = isVec ? len(vec(v)) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (isVec ? _vec : _str)();\r\n        return [];\r\n      }\r\n      if (isVec) {\r\n        _vec(slice(vec(v), a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return [];\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return [];\r\n    case \"sort\": {\r\n      if (!len(vec(args[0]))) {\r\n        _vec();\r\n        return [];\r\n      }\r\n      const src = asArray(args[0]);\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = await closure([src[i]]);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (visNum(mapped[0][1])) {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return [];\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return [];\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"range budget depleted\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return [];\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return [];\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return [];\r\n    case \"split\":\r\n      _vec(\r\n        str(args[0])\r\n          .split(len(args) > 1 ? str(args[1]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return [];\r\n    case \"join\":\r\n      _str(\r\n        vec(args[0])\r\n          .map(val2str)\r\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\r\n      );\r\n      return [];\r\n    case \"starts-with?\":\r\n      _boo(starts(str(args[0]), str(args[1])));\r\n      return [];\r\n    case \"ends-with?\":\r\n      _boo(ends(str(args[0]), str(args[1])));\r\n      return [];\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return [];\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return [];\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return [];\r\n    case \"tests\":\r\n      {\r\n        const tests = await doTests(invoke, !(len(args) && asBoo(args[0])));\r\n        const summary = tests.pop()!;\r\n        for (const test of tests) {\r\n          await exeOp(\"print\", [{ v: test, t: \"str\" }], ctx, errCtx);\r\n        }\r\n        _str(summary);\r\n      }\r\n      return [];\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const errors = await parseAndExe(ctx, str(args[0]), errCtx.invocationId);\r\n      if (len(errors)) {\r\n        return [{ e: \"Eval\", m: \"error within evaluated code\", errCtx }];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n): (params: Val[]) => Promise<InvokeError[]> {\r\n  const monoArityError = [{ e: \"Arity\", m: `one argument required`, errCtx }];\r\n  if (visStr(op) || visFun(op)) {\r\n    const str = op.v;\r\n    if (ops[str]) {\r\n      return (params: Val[]) => exeOp(str, params, ctx, errCtx);\r\n    }\r\n    if (str in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[str], params);\r\n    }\r\n    if (str in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[str], errCtx);\r\n    }\r\n    if (str in ctx.env.lets[len(ctx.env.lets) - 1]) {\r\n      return getExe(ctx, ctx.env.lets[len(ctx.env.lets) - 1][str], errCtx);\r\n    }\r\n    if (starts(str, \"$\")) {\r\n      return async (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = await ctx.set(substr(str, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : [];\r\n      };\r\n    }\r\n    return async (params: Val[]) => {\r\n      const { err, value } = await ctx.exe(str, params);\r\n      if (!err) {\r\n        stack.push(value);\r\n      }\r\n      return err ? [{ e: \"External\", m: err, errCtx }] : [];\r\n    };\r\n  } else if (visKey(op)) {\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t !== \"dict\") {\r\n        const badType = typeNames[params[0].t];\r\n        return [\r\n          typeErr(`argument 1 must be dictionary, not ${badType}`, errCtx),\r\n        ];\r\n      }\r\n      stack.push(dictGet(dic(params[0]), op));\r\n      return [];\r\n    };\r\n  } else if (visNum(op)) {\r\n    const n = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        const badType = typeNames[a.t];\r\n        return [\r\n          typeErr(\r\n            `argument must be string, vector, or dictionary, not ${badType}`,\r\n            errCtx,\r\n          ),\r\n        ];\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return [];\r\n    };\r\n  } else if (visVec(op)) {\r\n    const { v } = op;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return [];\r\n    };\r\n  } else if (visDic(op)) {\r\n    const dict = op.v;\r\n    return async (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dict as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return [];\r\n    };\r\n  } else if (visBoo(op)) {\r\n    const cond = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return [];\r\n    };\r\n  }\r\n  return async _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nexport async function exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n): Promise<InvokeError[]> {\r\n  --ctx.callBudget;\r\n  ctx.env.lets.push({});\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const { typ, value, errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (typ) {\r\n      case \"nul\":\r\n        _nul();\r\n        break;\r\n      case \"boo\":\r\n        _boo(value as boolean);\r\n        break;\r\n      case \"num\":\r\n        _num(value as number);\r\n        break;\r\n      case \"str\":\r\n        _str(value as string);\r\n        break;\r\n      case \"key\":\r\n        _key(value as string);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[value as string] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        ctx.env.lets[len(ctx.env.lets) - 1][value as string] =\r\n          stack[len(stack) - 1];\r\n        break;\r\n      case \"par\":\r\n        {\r\n          const paramIdx = value as number;\r\n          if (paramIdx === -1) {\r\n            _vec(args);\r\n          } else if (len(args) <= paramIdx) {\r\n            _nul();\r\n          } else {\r\n            stack.push(args[paramIdx]);\r\n          }\r\n        }\r\n        break;\r\n      case \"ref\":\r\n        {\r\n          const name = value as string;\r\n          if (ops[name]) {\r\n            _fun(name);\r\n          } else if (starts(name, \"$\")) {\r\n            const { value, err } = await ctx.get(substr(name, 1));\r\n            if (err) {\r\n              return [{ e: \"External\", m: err, errCtx }];\r\n            }\r\n            stack.push(value);\r\n          } else if (name in ctx.env.vars) {\r\n            stack.push(ctx.env.vars[name]);\r\n          } else if (name in ctx.env.lets[len(ctx.env.lets) - 1]) {\r\n            stack.push(ctx.env.lets[len(ctx.env.lets) - 1][name]);\r\n          } else if (name in ctx.env.funcs) {\r\n            _fun(name);\r\n          } else {\r\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n          }\r\n        }\r\n        break;\r\n      case \"op\":\r\n      case \"exe\":\r\n        {\r\n          let [op, nArgs] = value as [Val, number];\r\n          const params = splice(stack, len(stack) - nArgs, nArgs);\r\n          if (len(params) !== nArgs) {\r\n            return [{ e: \"Unexpected\", m: `${op} stack depleted`, errCtx }];\r\n          }\r\n          //Tail-call optimisation\r\n          if (i === lim - 1 && visStr(op) && op.v === func.name) {\r\n            ctx.env.lets[len(ctx.env.lets) - 1] = {};\r\n            i = -1;\r\n            args = params;\r\n            --ctx.recurBudget;\r\n            if (!ctx.recurBudget) {\r\n              return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n            }\r\n            continue;\r\n          }\r\n          const closure = getExe(ctx, op, errCtx);\r\n          const errors = await closure(params);\r\n          if (len(errors)) {\r\n            if (i + 1 !== lim && func.ins[i + 1].typ === \"cat\") {\r\n              _vec(errorsToDict(errors));\r\n              break;\r\n            }\r\n            return errors;\r\n          }\r\n        }\r\n        break;\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += value as number;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += value as number;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n        i += value as number;\r\n        break;\r\n      case \"loo\":\r\n        i += value as number;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - (value as number), value as number);\r\n        break;\r\n      case \"ret\":\r\n        if (value as boolean) {\r\n          splice(stack, 0, len(stack) - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"cat\":\r\n        break;\r\n      default:\r\n        assertUnreachable(typ);\r\n    }\r\n  }\r\n  ctx.env.lets.pop();\r\n  return [];\r\n}\r\n\r\nasync function parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n): Promise<InvokeError[]> {\r\n  const parsed = parse(code, invocationId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return [];\r\n  }\r\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nexport async function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n  printResult = false,\r\n): Promise<InvokeError[]> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  const errors = await parseAndExe(ctx, code, invocationId);\r\n  ctx.env.lets = [];\r\n  ctx.callBudget = callBudget;\r\n  ctx.recurBudget = recurBudget;\r\n  ctx.loopBudget = loopBudget;\r\n  ctx.rangeBudget = rangeBudget;\r\n  delete ctx.env.funcs[\"entry\"];\r\n  if (!len(errors) && printResult && len(stack)) {\r\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(stack[len(stack) - 1]) }]);\r\n  }\r\n  stack = [];\r\n  return errors;\r\n}\r\n\r\nexport function symbols(ctx: Ctx): string[] {\r\n  let syms = [\"function\"];\r\n  syms = concat(\r\n    syms,\r\n    objKeys(ops).filter(o => o !== \"execute-last\"),\r\n  );\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  return syms;\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type ErrorOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ]/;\r\n\r\nexport async function invoker(ctx: Ctx, code: string): Promise<ErrorOutput> {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const errors = await invoke(ctx, code, uuid, true);\r\n  let out: ErrorOutput = [];\r\n  errors.forEach(({ e, m, errCtx: { line, col, invocationId } }) => {\r\n    const lineText = invocations.get(invocationId)!.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + sym.length);\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}","import * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ErrCtx, Func, Funcs, Ins, InvokeError, ops } from \"./types\";\r\nimport { assertUnreachable } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"ref\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Omit<Ins, \"typ\"> & { typ: Ins[\"typ\"] | \"def\" | \"err\" };\r\n\r\nfunction tokenise(code: string, invocationId: string) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { invocationId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invocationId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text, errCtx });\r\n        if (c === \"[\") {\r\n          tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n        } else if (c === \"{\") {\r\n          tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inSymbol = !inNumber;\r\n      let typ: \"sym\" | \"num\" | \"ref\" = inSymbol ? \"sym\" : \"num\";\r\n      if (len(tokens)) {\r\n        const { typ: t, text } = tokens[len(tokens) - 1];\r\n        if (t === \"sym\" && (text === \"var\" || text === \"let\")) {\r\n          typ = \"ref\";\r\n        }\r\n      }\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseForm(tokens: Token[], params: string[]): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\r\n  if (op === \"catch\") {\r\n    const body = parseArg(tokens, params);\r\n    if (!len(body)) {\r\n      return err(\"must provide one argument\");\r\n    }\r\n    return [...body, { typ: \"cat\", errCtx }];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const [def, val] = [parseArg(tokens, params), parseArg(tokens, params)];\r\n    if (!len(def) || !len(val) || len(parseArg(tokens, params))) {\r\n      return err(\"must provide reference name and value only\");\r\n    }\r\n    return [...val, { typ: op, value: def[0].value, errCtx }];\r\n  } else if (op === \"if\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        if (len(parseArg(tokens, params))) {\r\n          return err(\"too many branches\");\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"nul\", value: undefined, errCtx });\r\n      }\r\n    } else {\r\n      const body: ParserIns[] = [];\r\n      while (true) {\r\n        const exp = parseArg(tokens, params);\r\n        if (!len(exp)) {\r\n          break;\r\n        }\r\n        push(body, exp);\r\n      }\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"nul\", value: undefined, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n    const args: ParserIns[][] = [];\r\n    let insCount = 0;\r\n    while (true) {\r\n      const arg = parseArg(tokens, params);\r\n      if (!len(arg)) {\r\n        break;\r\n      }\r\n      args.push(arg);\r\n      insCount += len(arg);\r\n    }\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"boo\", value: true, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"boo\", value: false, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"boo\", value: false, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  let args = 0;\r\n  //Head is a form or parameter\r\n  if (typ === \"(\" || has(params, text) || starts(text, \"#\")) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    push(headIns, ins);\r\n    op = \"execute-last\";\r\n    ++args;\r\n  }\r\n  const body: Ins[] = [];\r\n  while (len(tokens)) {\r\n    const parsed = parseArg(tokens, params);\r\n    if (!len(parsed)) {\r\n      break;\r\n    }\r\n    ++args;\r\n    push(body, parsed);\r\n  }\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n  headIns.push({\r\n    typ: ops[op] ? \"op\" : \"exe\",\r\n    value: [\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op },\r\n      args,\r\n    ],\r\n    errCtx,\r\n  });\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction parseArg(tokens: Token[], params: string[]): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"str\", value: text, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"num\", value: toNum(text), errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [{ typ: \"boo\", value: text === \"true\", errCtx }];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"nul\", value: undefined, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"key\", value: text, errCtx }];\r\n      } else if (starts(text, \"#\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"nul\", errCtx }];\r\n        }\r\n        return [{ typ: \"par\", value, errCtx }];\r\n      } else if (has(params, text)) {\r\n        return [{ typ: \"par\", value: params.indexOf(text), errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"par\", value: -1, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"ref\":\r\n      return [{ typ: \"def\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params);\r\n    case \")\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\nfunction partitionWhen<T>(\r\n  array: T[],\r\n  predicate: (item: T) => boolean,\r\n): [T[], T[]] {\r\n  const a: T[] = [],\r\n    b: T[] = [];\r\n  for (let i = 0, isB = false; i < len(array); ++i) {\r\n    isB ||= predicate(array[i]);\r\n    (isB ? b : a).push(array[i]);\r\n  }\r\n  return [a, b];\r\n}\r\n\r\nfunction partition<T>(array: T[], predicate: (item: T) => boolean): [T[], T[]] {\r\n  const a: T[] = [],\r\n    b: T[] = [];\r\n  array.forEach(x => (predicate(x) ? b : a).push(x));\r\n  return [a, b];\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): {\r\n  func?: Func;\r\n  err?: InvokeError;\r\n} {\r\n  const [params, body] = partitionWhen(tokens, t => t.typ !== \"sym\");\r\n  //In the case of e.g. (function (+))\r\n  if (name === \"(\") {\r\n    return { err: { e: \"Parse\", m: \"nameless function\", errCtx } };\r\n  }\r\n  //In the case of e.g. (function)\r\n  if (!len(params) && !len(body)) {\r\n    return { err: { e: \"Parse\", m: \"empty function body\", errCtx } };\r\n  }\r\n  if (len(body) && body[0].typ === \")\") {\r\n    if (len(params)) {\r\n      //In the case of e.g. (function f #) or (function x y z)\r\n      body.unshift(params.pop()!);\r\n    } else {\r\n      //In the case of e.g. (function name)\r\n      return { err: { e: \"Parse\", m: \"empty function body\", errCtx } };\r\n    }\r\n  }\r\n  //In the case of e.g. (function entry x y z)\r\n  if (len(params) && !len(body)) {\r\n    body.push(params.pop()!);\r\n  }\r\n  const ins: ParserIns[] = [];\r\n  while (len(body)) {\r\n    push(\r\n      ins,\r\n      parseArg(\r\n        body,\r\n        params.map(p => p.text),\r\n      ),\r\n    );\r\n  }\r\n  const parseErrors = ins.filter(i => i.typ === \"err\");\r\n  if (len(parseErrors)) {\r\n    return {\r\n      err: {\r\n        e: \"Parse\",\r\n        m: <string>parseErrors[0].value,\r\n        errCtx: parseErrors[0].errCtx,\r\n      },\r\n    };\r\n  }\r\n  return { func: { name, ins: <Ins[]>ins } };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction errorDetect(\r\n  stringError: number[] | undefined,\r\n  tokens: Token[],\r\n  invocationId: string,\r\n) {\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invocationId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invocationId, line, col });\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invocationId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invocationId);\r\n  const errors = errorDetect(stringError, tokens, invocationId);\r\n  if (len(errors)) {\r\n    return { errors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      invocationId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const [funcArr, synErrors] = partition(funcsAndErrors, fae => !!fae.err);\r\n  push(\r\n    errors,\r\n    synErrors.map(fae => fae.err!),\r\n  );\r\n  const funcs: Funcs = {};\r\n  funcArr.forEach(({ func }) => (funcs[func!.name] = func!));\r\n  return { errors, funcs };\r\n}\r\n","export const toNum = (x: unknown): number => Number(x);\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const pi = Math.PI;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, ExternalError, InvokeError, Val, ValAndErr } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nasync function get(state: State, key: string): Promise<ValAndErr> {\r\n  if (!state.dict.has(key)) {\r\n    return { value: { t: \"null\", v: undefined }, err: `\"${key} not found.` };\r\n  }\r\n  return { value: state.dict.get(key)!, err: undefined };\r\n}\r\n\r\nasync function set(\r\n  state: State,\r\n  key: string,\r\n  val: Val,\r\n): Promise<ExternalError> {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nasync function exe(\r\n  state: State,\r\n  name: string,\r\n  args: Val[],\r\n): Promise<ValAndErr> {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"print-str\":\r\n      state.output += args[0].v;\r\n      break;\r\n    case \"print\":\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { value: nullVal, err: \"operation does not exist\" };\r\n  }\r\n  return { value: nullVal, err: undefined };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `(:age {:name \"Patrick\" :age 24})`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false true false false true]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543215`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(:e (0 (catch (+))))`,\r\n    out: `Arity`,\r\n  },\r\n  //Basic functions\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 #)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + #) (len #)) #1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (tail-call optim)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (dedupe (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes 1\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\", \"Parse\"],\r\n  },\r\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport async function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invocationId: string,\r\n    print: boolean,\r\n  ) => Promise<InvokeError[]>,\r\n  terse: boolean = true,\r\n): Promise<string[]> {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {}, lets: [] };\r\n    const startTime = getTimeMs();\r\n    const errors = await invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      \"testing\",\r\n      true,\r\n    );\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [testNum, testName, testElapsed, testErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${testNum} ${testName} ${testElapsed} ${okOut} ${testErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`----- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","export type Val = {\r\n  v: Val[] | Dict | undefined | string | number | boolean | Func;\r\n  t: \"null\" | \"str\" | \"num\" | \"bool\" | \"key\" | \"ref\" | \"vec\" | \"dict\" | \"func\";\r\n};\r\n\r\nexport type ErrCtx = { invocationId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ExternalError = undefined | string;\r\nexport type ValAndErr = { value: Val; err?: ExternalError };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n  lets: { [key: string]: Val }[];\r\n};\r\n\r\nexport type Ctx = {\r\n  set: (key: string, val: Val) => Promise<ExternalError>;\r\n  get: (key: string) => Promise<ValAndErr>;\r\n  exe: (name: string, args: Val[]) => Promise<ValAndErr>;\r\n  env: Env;\r\n  loopBudget: number;\r\n  rangeBudget: number;\r\n  callBudget: number;\r\n  recurBudget: number;\r\n};\r\n\r\nexport type InsType =\r\n  | \"nul\"\r\n  | \"boo\"\r\n  | \"num\"\r\n  | \"str\"\r\n  | \"key\"\r\n  | \"par\"\r\n  | \"var\"\r\n  | \"let\"\r\n  | \"ref\"\r\n  | \"op\"\r\n  | \"exe\"\r\n  | \"if\"\r\n  | \"jmp\" //Inexpensive jump\r\n  | \"loo\" //Expensive jump\r\n  | \"pop\" //Truncate stack\r\n  | \"or\"\r\n  | \"ret\"\r\n  | \"cat\";\r\nexport type Ins = {\r\n  typ: InsType;\r\n  value?: unknown;\r\n  errCtx: ErrCtx;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: {\r\n    minArity?: number;\r\n    maxArity?: number;\r\n    exactArity?: number;\r\n    onlyNum?: boolean;\r\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  };\r\n} = {\r\n  print: {},\r\n  \"print-str\": {},\r\n  \"execute-last\": {},\r\n  \"!\": { exactArity: 1 },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, onlyNum: true },\r\n  \"-\": { minArity: 1, onlyNum: true },\r\n  \"*\": { minArity: 2, onlyNum: true },\r\n  \"/\": { minArity: 2, onlyNum: true },\r\n  \"//\": { minArity: 2, onlyNum: true },\r\n  \"**\": { minArity: 1, onlyNum: true },\r\n  \"<\": { minArity: 2, onlyNum: true },\r\n  \">\": { minArity: 2, onlyNum: true },\r\n  \"<=\": { minArity: 2, onlyNum: true },\r\n  \">=\": { minArity: 2, onlyNum: true },\r\n  inc: { exactArity: 1, onlyNum: true },\r\n  dec: { exactArity: 1, onlyNum: true },\r\n  min: { minArity: 2, onlyNum: true },\r\n  max: { minArity: 2, onlyNum: true },\r\n  abs: { exactArity: 1, onlyNum: true },\r\n  pi: { exactArity: 0 },\r\n  sqrt: { exactArity: 1, onlyNum: true },\r\n  round: { exactArity: 1, onlyNum: true },\r\n  floor: { exactArity: 1, onlyNum: true },\r\n  ceil: { exactArity: 1, onlyNum: true },\r\n  logn: { exactArity: 1, onlyNum: true },\r\n  log2: { exactArity: 1, onlyNum: true },\r\n  log10: { exactArity: 1, onlyNum: true },\r\n  \"odd?\": { exactArity: 1, onlyNum: true },\r\n  \"even?\": { exactArity: 1, onlyNum: true },\r\n  \"pos?\": { exactArity: 1, onlyNum: true },\r\n  \"neg?\": { exactArity: 1, onlyNum: true },\r\n  \"zero?\": { exactArity: 1, onlyNum: true },\r\n  \"null?\": { exactArity: 1 },\r\n  \"num?\": { exactArity: 1 },\r\n  \"bool?\": { exactArity: 1 },\r\n  \"str?\": { exactArity: 1 },\r\n  \"vec?\": { exactArity: 1 },\r\n  \"dict?\": { exactArity: 1 },\r\n  \"key?\": { exactArity: 1 },\r\n  \"func?\": { exactArity: 1 },\r\n  rem: { minArity: 2, onlyNum: true },\r\n  sin: { exactArity: 1, onlyNum: true },\r\n  cos: { exactArity: 1, onlyNum: true },\r\n  tan: { exactArity: 1, onlyNum: true },\r\n  vec: {},\r\n  dict: {},\r\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\r\n  \"to-num\": { exactArity: 1, types: [[\"str\", \"num\"]] },\r\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]] },\r\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  idx: { exactArity: 2, types: [[\"str\", \"vec\"]] },\r\n  map: { minArity: 2 },\r\n  for: { minArity: 2 },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: { minArity: 2 },\r\n  remove: { minArity: 2 },\r\n  str: {},\r\n  rand: { maxArity: 2, onlyNum: true },\r\n  \"rand-int\": { maxArity: 2, onlyNum: true },\r\n  while: {},\r\n  \"..\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    types: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n  },\r\n  push: { minArity: 2, maxArity: 3, types: [[\"vec\", \"dict\"]] },\r\n  sect: { minArity: 1, maxArity: 3, types: [[\"vec\", \"str\"], \"num\", \"num\"] },\r\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]] },\r\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"] },\r\n  keys: { exactArity: 1, types: [\"dict\"] },\r\n  vals: { exactArity: 1, types: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, types: [\"num\", \"num\", \"num\"] },\r\n  \"empty?\": { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\r\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"] },\r\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"] },\r\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  \"lower-case\": { exactArity: 1, types: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, types: [\"str\"] },\r\n  trim: { exactArity: 1, types: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, types: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, types: [\"str\"] },\r\n  time: { exactArity: 0 },\r\n  version: { exactArity: 0 },\r\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"] },\r\n  eval: { exactArity: 1, types: [\"str\"] },\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(669);\n"],"names":["insituxVersion","abs","cos","sin","tan","pi","sign","sqrt","floor","ceil","round","max","min","pf","logn","log2","log10","concat","has","flat","push","reverse","slice","splice","sortBy","ends","slen","starts","sub","subIdx","substr","upperCase","lowerCase","trim","trimStart","trimEnd","getTimeMs","randInt","randNum","isArray","isNum","len","objKeys","range","toNum","val2str","v","t","quoted","map","join","keys","vals","ks","vs","k","i","assertUnreachable","stack","_boo","_num","_str","_key","_vec","_dic","_nul","undefined","_fun","num","str","vec","dic","asBoo","visStr","val","visNum","visVec","visDic","visFun","visKey","visBoo","asArray","s","stringify","reduce","cat","toDict","args","pop","filter","_","ddKeys","ddVals","forEach","key","existingIdx","findIndex","isEqual","typeErr","m","errCtx","e","isVecEqual","a","b","some","x","ad","bd","isDictEqual","dictGet","idx","dictSet","nKeys","nVals","async","exeOp","op","ctx","tErr","msg","violations","types","exactArity","maxArity","minArity","onlyNum","ops","nArg","aErr","amount","nonNumArgIdx","typeName","typeNames","need","argType","badType","r","exeOpViolations","getExe","exe","lim","sum","n","closure","shift","okT","badArg","arrays","lims","divisors","l","unshift","loopBudget","array","argIdxs","d","errors","shortest","isRemove","filtered","reduction","nArgs","a0v","a1v","v1","d1","dictDrop","isVec","vlen","del","skip","take","src","mapped","y","edgeCase","step","count","rangeBudget","nums","split","tests","doTests","invoke","summary","test","env","funcs","sLen","parseAndExe","invocationId","monoArityError","params","exeFunc","vars","lets","err","set","value","arr","found","find","dict","cond","errorsToDict","newKey","line","col","func","callBudget","ins","typ","tooManyLoops","paramIdx","name","get","recurBudget","code","parsed","parse","printResult","syms","o","invocations","Map","uuid","toString","out","lineText","sym","half1","type","text","padEnd","half2","length","strIdx","parseArg","tokens","indexOf","head","body","def","ifT","ifF","exp","insCount","arg","as","headIns","parseForm","stringError","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","c","nextCh","isWhite","isDigit","ch","isParen","tokenise","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","errorDetect","funcsAndErrors","segments","isFunc","segment","entries","described","funcise","token","named","predicate","isB","partitionWhen","p","parseErrors","syntaxise","funcArr","synErrors","fae","partition","Number","start","end","numDel","isNaN","Array","substring","includes","startsWith","endsWith","add","by","sort","toLowerCase","toUpperCase","Math","random","Object","Date","getTime","PI","log","state","nullVal","output","terse","results","startTime","okErr","okOut","elapsedMs","testNum","testName","testElapsed","testErrors","display","totalMs","numPassed","print","inc","dec","rem","for","remove","rand","while","into","sect","do","time","version","eval","null","bool","ref","_x","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}