{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = (arr: unknown[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;","export type Val =\n  | { t: \"vec\"; v: Val[] }\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\n  | { t: \"null\"; v: undefined }\n  | { t: \"bool\"; v: boolean }\n  | { t: \"num\"; v: number }\n  | { t: \"clo\"; v: Func }\n  | { t: \"dict\"; v: Dict };\n\nexport type ErrCtx = { sourceId: string; line: number; col: number };\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\nexport type ValOrErr =\n  | { kind: \"val\"; value: Val }\n  | { kind: \"err\"; err: string };\n/**\n * @summary \"empty\" occurs when there was only function declaration;\n *          \"val\" occurs when there were no errors and there is a final value;\n *          \"errors\" occurs when there were any errors.\n */\nexport type InvokeResult =\n  | { kind: \"empty\" }\n  | { kind: \"val\"; value: Val }\n  | { kind: \"errors\"; errors: InvokeError[] };\n\nexport type Dict = {\n  keys: Val[];\n  vals: Val[];\n};\n\nexport type Func = {\n  name: string;\n  ins: Ins[];\n};\nexport type Funcs = { [key: string]: Func };\nexport type Env = {\n  funcs: Funcs;\n  vars: { [key: string]: Val };\n};\n\nexport type Ctx = {\n  set: (key: string, val: Val) => Promise<string | undefined>;\n  get: (key: string) => Promise<ValOrErr>;\n  exe: (name: string, args: Val[]) => Promise<ValOrErr>;\n  env: Env;\n  loopBudget: number;\n  rangeBudget: number;\n  callBudget: number;\n  recurBudget: number;\n};\n\nexport type Ins = { errCtx: ErrCtx } & (\n  | { typ: \"val\"; value: Val }\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\n  | { typ: \"exp\"; value: number } //Marks the start of an expression as head for potential partial closures\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\"; value: number } //number of instructions\n  | { typ: \"ret\"; value: boolean } //Return, with value?\n  | { typ: \"rec\"; value: number } //Recur, number of args\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\n);\n\nexport const ops: {\n  [name: string]: {\n    minArity?: number;\n    maxArity?: number;\n    exactArity?: number;\n    numeric?: true | \"in only\";\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\n    returns?: Val[\"t\"][];\n  };\n} = {\n  print: { returns: [\"null\"] },\n  \"print-str\": { returns: [\"null\"] },\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\n  \"=\": { minArity: 2 },\n  \"!=\": { minArity: 2 },\n  \"+\": { minArity: 2, numeric: true },\n  \"-\": { minArity: 1, numeric: true },\n  \"*\": { minArity: 2, numeric: true },\n  \"/\": { minArity: 2, numeric: true },\n  \"//\": { minArity: 2, numeric: true },\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\n  \"<\": { minArity: 2, numeric: true },\n  \">\": { minArity: 2, numeric: true },\n  \"<=\": { minArity: 2, numeric: true },\n  \">=\": { minArity: 2, numeric: true },\n  \"fast=\": { exactArity: 2 },\n  \"fast!=\": { exactArity: 2 },\n  \"fast+\": { exactArity: 2, numeric: true },\n  \"fast-\": { exactArity: 2, numeric: true },\n  \"fast*\": { exactArity: 2, numeric: true },\n  \"fast/\": { exactArity: 2, numeric: true },\n  \"fast//\": { exactArity: 2, numeric: true },\n  \"fast<\": { exactArity: 2, numeric: true },\n  \"fast>\": { exactArity: 2, numeric: true },\n  \"fast<=\": { exactArity: 2, numeric: true },\n  \"fast>=\": { exactArity: 2, numeric: true },\n  inc: { exactArity: 1, numeric: true },\n  dec: { exactArity: 1, numeric: true },\n  min: { minArity: 2, numeric: true },\n  max: { minArity: 2, numeric: true },\n  abs: { exactArity: 1, numeric: true },\n  sqrt: { exactArity: 1, numeric: true },\n  round: { minArity: 1, maxArity: 2, numeric: true },\n  floor: { exactArity: 1, numeric: true },\n  ceil: { exactArity: 1, numeric: true },\n  logn: { exactArity: 1, numeric: true },\n  log2: { exactArity: 1, numeric: true },\n  log10: { exactArity: 1, numeric: true },\n  and: { minArity: 1 },\n  or: { minArity: 1 },\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\n  rem: { minArity: 2, numeric: true },\n  sin: { exactArity: 1, numeric: true },\n  cos: { exactArity: 1, numeric: true },\n  tan: { exactArity: 1, numeric: true },\n  vec: { returns: [\"vec\"] },\n  dict: { returns: [\"dict\"] },\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\n  \"to-num\": {\n    exactArity: 1,\n    types: [[\"str\", \"num\"]],\n    returns: [\"num\", \"null\"],\n  },\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]], returns: [\"key\"] },\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]], returns: [\"num\"] },\n  map: { minArity: 2, returns: [\"vec\"] },\n  for: { minArity: 2, returns: [\"vec\"] },\n  reduce: { minArity: 2, maxArity: 3, types: [[], [\"vec\", \"dict\", \"str\"]] },\n  filter: {\n    minArity: 2,\n    types: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\"],\n  },\n  remove: {\n    minArity: 2,\n    types: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\"],\n  },\n  find: { minArity: 2, types: [[], [\"vec\", \"dict\", \"str\"]] },\n  count: { minArity: 2, types: [[], [\"vec\", \"dict\", \"str\"]], returns: [\"num\"] },\n  repeat: { minArity: 2, types: [[], \"num\"] },\n  str: { returns: [\"str\"] },\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \"..\": { minArity: 2 },\n  \"...\": { minArity: 2 },\n  into: {\n    exactArity: 2,\n    types: [\n      [\"vec\", \"dict\"],\n      [\"vec\", \"dict\"],\n    ],\n    returns: [\"vec\", \"dict\"],\n  },\n  push: {\n    minArity: 2,\n    maxArity: 3,\n    types: [[\"vec\", \"dict\"]],\n    returns: [\"vec\", \"dict\"],\n  },\n  sect: {\n    minArity: 1,\n    maxArity: 3,\n    types: [[\"vec\", \"str\"], \"num\", \"num\"],\n    returns: [\"vec\", \"str\"],\n  },\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"], returns: [\"vec\"] },\n  keys: { exactArity: 1, types: [\"dict\"] },\n  vals: { exactArity: 1, types: [\"dict\"] },\n  do: { minArity: 1 },\n  val: { minArity: 1 },\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\n  \"empty?\": {\n    exactArity: 1,\n    types: [[\"str\", \"vec\", \"dict\"]],\n    returns: [\"bool\"],\n  },\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"], returns: [\"vec\"] },\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"], returns: [\"str\"] },\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"lower-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"upper-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  trim: { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"trim-start\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"trim-end\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"], returns: [\"str\"] },\n  time: { exactArity: 0, returns: [\"num\"] },\n  version: { exactArity: 0, returns: [\"num\"] },\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"], returns: [\"str\"] },\n  symbols: { exactArity: 0, returns: [\"vec\"] },\n  eval: { exactArity: 1, types: [\"str\"] },\n  reset: { exactArity: 0 },\n};\n\nexport const typeNames = {\n  null: \"null\",\n  str: \"string\",\n  num: \"number\",\n  bool: \"boolean\",\n  key: \"keyword\",\n  ref: \"reference\",\n  vec: \"vector\",\n  dict: \"dictionary\",\n  func: \"function\",\n  clo: \"closure\",\n};\n\nexport const assertUnreachable = (_x: never): never => <never>0;\n","import { has, isArray, len } from \"./poly-fills\";\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\n\nexport const asBoo = (val: Val) =>\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\n\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\n  const { exactArity, maxArity, minArity } = ops[op];\n  const aErr = (msg: string, amount: number) => [\n    <InvokeError>{\n      e: \"Arity\",\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\n      errCtx,\n    },\n  ];\n  if (exactArity !== undefined) {\n    if (nArg !== exactArity) {\n      return aErr(`exactly ${exactArity}`, exactArity);\n    }\n  } else {\n    if (minArity && !maxArity && nArg < minArity) {\n      return aErr(`at least ${minArity}`, minArity);\n    } else if (!minArity && maxArity && nArg > maxArity) {\n      return aErr(`at most ${maxArity}`, maxArity);\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\n    }\n  }\n}\n\nexport function typeCheck(\n  op: string,\n  args: Val[\"t\"][][],\n  errCtx: ErrCtx,\n  optimistic = false,\n): InvokeError[] | undefined {\n  const { types, numeric: onlyNum } = ops[op];\n  const nArg = len(args);\n  if (onlyNum) {\n    const nonNumArgIdx = args.findIndex(\n      a =>\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\n    );\n    if (nonNumArgIdx === -1) {\n      return;\n    }\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\n    return [\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\n    ];\n  }\n  if (!types) {\n    return;\n  }\n  const typeViolations = types\n    .map((need, i) => {\n      if (i >= nArg || !args[i]) {\n        return false;\n      }\n      const argTypes = args[i]!;\n      if (isArray(need)) {\n        if (\n          !len(need) ||\n          (optimistic\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\n            : len(argTypes) === 1 && has(need, argTypes[0]))\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        const needs = need.map(t => typeNames[t]).join(\", \");\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\n      } else {\n        if (\n          optimistic\n            ? !len(argTypes) || has(argTypes, need)\n            : len(argTypes) === 1 && need === argTypes[0]\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\n      }\n    })\n    .filter(r => !!r);\n  return len(typeViolations)\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\n    : undefined;\n}\n\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\n  e: \"Type\",\n  m,\n  errCtx,\n});\n\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\nimport * as pf from \"./poly-fills\";\nconst { concat, has, flat, push, slice, splice } = pf;\nconst { slen, starts, sub, substr, strIdx } = pf;\nconst { isNum, len, toNum } = pf;\nimport { ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\nimport { assertUnreachable, InvokeError } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype NamedTokens = {\n  name: string;\n  tokens: Token[];\n  errCtx: ErrCtx;\n};\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\nconst nullVal: Val = { t: \"null\", v: undefined };\n\nexport function tokenise(\n  code: string,\n  sourceId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const digits = \"0123456789\";\n  let inString = false,\n    isEscaped = false,\n    inStringAt = [0, 0],\n    inSymbol = false,\n    inNumber = false,\n    inComment = false,\n    line = 1,\n    col = 0;\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (inComment) {\n      if (c === \"\\n\") {\n        inComment = false;\n        ++line;\n        col = 0;\n      } else if (emitComments) {\n        tokens[len(tokens) - 1].text += c;\n      }\n      continue;\n    }\n    if (isEscaped) {\n      isEscaped = false;\n      if (inString) {\n        tokens[len(tokens) - 1].text +=\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\n      }\n      continue;\n    }\n    if (c === \"\\\\\") {\n      isEscaped = true;\n      continue;\n    }\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({\n          typ: \"str\",\n          text: \"\",\n          errCtx: { sourceId: sourceId, line, col },\n        });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      inComment = true;\n      if (emitComments) {\n        tokens.push({\n          typ: \"rem\",\n          text: \"\",\n          errCtx: { sourceId: sourceId, line, col },\n        });\n      }\n      continue;\n    }\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\n    const isDigit = (ch: string) => sub(digits, ch);\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or convert into symbol\n    if (inNumber && !isDigit(c)) {\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const parens: { [ch: string]: Token[\"typ\"] } = {\n          \"[\": \"(\",\n          \"{\": \"(\",\n          \"(\": \"(\",\n          \")\": \")\",\n          \"}\": \")\",\n          \"]\": \")\",\n        };\n        const text = parens[c]!;\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps) {\n          if (c === \"[\") {\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\n          } else if (c === \"{\") {\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\n          }\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inSymbol = !inNumber;\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\nfunction segment(tokens: Token[]): Token[][] {\n  const segments: Token[][] = [[]];\n  let depth = 0;\n  tokens.forEach(token => {\n    segments[len(segments) - 1].push(token);\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\n    if (depth === 0) {\n      segments.push([]);\n    }\n  });\n  return segments;\n}\n\nfunction funcise(segments: Token[][]): NamedTokens[] {\n  const isFunc = (segment: Token[]) =>\n    len(segment) > 1 &&\n    segment[1].typ === \"sym\" &&\n    segment[1].text === \"function\";\n  const funcs = segments.filter(t => isFunc(t));\n  const entries = flat(segments.filter(t => !isFunc(t)));\n  const described = funcs.map(tokens => ({\n    name: tokens[2].text,\n    tokens: slice(tokens, 3),\n    errCtx: tokens[2].errCtx,\n  }));\n  return len(entries)\n    ? concat(described, [\n        {\n          name: \"entry\",\n          tokens: entries,\n          errCtx: entries[0].errCtx,\n        },\n      ])\n    : described;\n}\n\nfunction parseAllArgs(tokens: Token[], params: string[]) {\n  const body: ParserIns[] = [];\n  while (true) {\n    const exp = parseArg(tokens, params);\n    if (!len(exp)) {\n      break;\n    }\n    push(body, exp);\n  }\n  return body;\n}\n\nfunction parseForm(\n  tokens: Token[],\n  params: string[],\n  inPartial = true,\n): ParserIns[] {\n  const head = tokens.shift();\n  if (!head) {\n    return [];\n  }\n  const { typ, text, errCtx } = head;\n  let op = text;\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\n  if (op === \"catch\") {\n    if (tokens[0].typ !== \"(\") {\n      return err(\"argument 1 must be expression\");\n    }\n    const body = parseArg(tokens, params);\n    const when = parseAllArgs(tokens, params);\n    if (!len(body) || !len(when)) {\n      return err(\"must provide at least 2 arguments\");\n    }\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n  } else if (op === \"var\" || op === \"let\") {\n    const ins: Ins[] = [];\n    while (true) {\n      const defIns = parseArg(tokens, params);\n      if (len(ins) && !len(defIns)) {\n        return ins;\n      }\n      const val = parseArg(tokens, params);\n      if (!len(ins) && (!len(defIns) || !len(val))) {\n        return err(`must provide at least one declaration name and value`);\n      } else if (!len(val)) {\n        return err(`must provide a value after each declaration name`);\n      }\n      const def = defIns[0];\n      if (def.typ !== \"ref\") {\n        return err(\"declaration name must be symbol\");\n      }\n      push(ins, val);\n      ins.push({ typ: op, value: def.value, errCtx });\n    }\n  } else if (op === \"if\" || op === \"if!\" || op === \"when\") {\n    const cond = parseArg(tokens, params);\n    if (!len(cond)) {\n      return err(\"must provide condition\");\n    }\n    const ins: ParserIns[] = cond;\n    if (op === \"if!\") {\n      ins.push({ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx });\n      ins.push({ typ: \"exe\", value: 1, errCtx });\n    }\n    if (op === \"if\" || op === \"if!\") {\n      const ifT = parseArg(tokens, params);\n      if (!len(ifT)) {\n        return err(\"must provide a branch\");\n      }\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\n      push(ins, ifT);\n      const ifF = parseArg(tokens, params);\n      if (len(ifF)) {\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\n        push(ins, ifF);\n        if (len(parseArg(tokens, params))) {\n          return err(\"too many branches\");\n        }\n      } else {\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\n      }\n    } else {\n      const body = parseAllArgs(tokens, params);\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\n      push(ins, body);\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\n    }\n    return ins;\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\n    const args: ParserIns[][] = [];\n    let insCount = 0;\n    while (true) {\n      const arg = parseArg(tokens, params);\n      if (!len(arg)) {\n        break;\n      }\n      args.push(arg);\n      insCount += len(arg);\n    }\n    if (op === \"recur\") {\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\n    }\n    if (len(args) < 2) {\n      return err(\"requires at least two arguments\");\n    }\n    const ins: Ins[] = [];\n    if (op === \"while\") {\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\n      const head = args.shift()!;\n      push(ins, head);\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\n      args.forEach(as => push(ins, as));\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n      return ins;\n    }\n    insCount += len(args); //+1 for each if/or ins\n    insCount += toNum(op === \"and\");\n    const typ = op === \"and\" ? \"if\" : \"or\";\n    for (let a = 0; a < len(args); ++a) {\n      push(ins, args[a]);\n      insCount -= len(args[a]);\n      ins.push({ typ, value: insCount, errCtx });\n      --insCount;\n    }\n    if (op === \"and\") {\n      push(ins, [\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\n      ]);\n    } else {\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\n    }\n    return ins;\n  }\n  const headIns: Ins[] = [];\n  let nArgs = 0;\n  //Head is a expression or parameter\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\n    tokens.unshift(head);\n    const ins = parseArg(tokens, params);\n    if (inPartial) {\n      headIns.push({ typ: \"exp\", value: len(ins), errCtx });\n    }\n    push(headIns, ins);\n  }\n  const body: Ins[] = [];\n  while (len(tokens)) {\n    const parsed = parseArg(tokens, params);\n    if (!len(parsed)) {\n      break;\n    }\n    ++nArgs;\n    push(body, parsed);\n  }\n  if (op === \"return\") {\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\n  }\n\n  //Operation arity check, optionally disabled for partial closures\n  if (ops[op] && !inPartial) {\n    const errors = arityCheck(op, nArgs, errCtx);\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\n    if (!errors) {\n      //Upgrade some math and logic functions to their fast counterparts\n      if (nArgs === 2 && ops[`fast${op}`]) {\n        op = `fast${op}`;\n      }\n    }\n  }\n\n  if (len(headIns)) {\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  } else {\n    const value: Val =\n      typ === \"num\"\n        ? { t: \"num\", v: toNum(op) }\n        : starts(op, \":\")\n        ? { t: \"key\", v: op }\n        : ops[op]\n        ? { t: \"func\", v: op }\n        : op === \"true\" || op === \"false\"\n        ? { t: \"bool\", v: op === \"true\" }\n        : { t: \"str\", v: op };\n    headIns.push({ typ: \"val\", value, errCtx });\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  }\n  return [...body, ...headIns];\n}\n\nfunction parseArg(\n  tokens: Token[],\n  params: string[],\n  inPartial = false,\n): ParserIns[] {\n  if (!len(tokens)) {\n    return [];\n  }\n  const { typ, text, errCtx } = tokens.shift() as Token;\n  //Upon closure\n  if (\n    typ === \"sym\" &&\n    sub(\"#@\", text) &&\n    len(tokens) &&\n    tokens[0].typ === \"(\"\n  ) {\n    const texts = tokens.map(t => t.text);\n    const body = parseArg(tokens, params, text === \"@\");\n    const err = body.find(t => t.typ === \"err\");\n    if (err) {\n      return [err];\n    }\n    const value: [string, Ins[]] = [\n      slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\n      <Ins[]>body,\n    ];\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\n  }\n  switch (typ) {\n    case \"str\":\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\n    case \"num\":\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\n    case \"sym\":\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(params, text)) {\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (text === \"PI\" || text === \"E\") {\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    case \"(\":\n      return parseForm(tokens, params, inPartial);\n    case \")\":\n    case \"rem\":\n      return [];\n    default:\n      return assertUnreachable(typ);\n  }\n}\n\nfunction syntaxise(\n  { name, tokens }: NamedTokens,\n  errCtx: ErrCtx,\n): [\"func\", Func] | [\"err\", InvokeError] {\n  const err = (m: string, eCtx = errCtx) =>\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\n  const firstNonParam = tokens.findIndex(\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\n  );\n  const params = slice(tokens, 0, firstNonParam);\n  const body = slice(tokens, firstNonParam);\n  //In the case of e.g. (function (+))\n  if (name === \"(\") {\n    return err(\"nameless function\");\n  }\n  //In the case of e.g. (function)\n  if (!len(params) && !len(body)) {\n    return err(\"empty function body\");\n  }\n  if (len(body) && body[0].typ === \")\") {\n    if (len(params)) {\n      //In the case of e.g. (function f %) or (function x y z)\n      body.unshift(params.pop()!);\n    } else {\n      //In the case of e.g. (function name)\n      return err(\"empty function body\");\n    }\n  }\n  //In the case of e.g. (function entry x y z)\n  if (len(params) && !len(body)) {\n    body.push(params.pop()!);\n  }\n  const ins: ParserIns[] = [];\n  while (len(body)) {\n    push(\n      ins,\n      parseArg(\n        body,\n        params.map(p => p.text),\n      ),\n    );\n  }\n  for (let i = 0, lim = len(ins); i < lim; i++) {\n    const x = ins[i];\n    if (x.typ === \"err\") {\n      return err(x.value, x.errCtx);\n    }\n  }\n  return [\"func\", { name, ins: <Ins[]>ins }];\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\n    }\n  }\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\n  type TypeInfo = {\n    types?: Val[\"t\"][];\n    val?: Val;\n  };\n  const stack: TypeInfo[] = [];\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\n    const ins = fins[i];\n    switch (ins.typ) {\n      case \"val\":\n        stack.push({ types: [ins.value.t], val: ins.value });\n        break;\n      case \"exe\": {\n        const head = stack.pop()!;\n        const args = splice(stack, len(stack) - ins.value, ins.value);\n        const badMatch = (okTypes: Val[\"t\"][]) =>\n          args.findIndex(\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\n          );\n        const headIs = (t: Val[\"t\"]) =>\n          head.val\n            ? head.val.t === t\n            : head.types && len(head.types) === 1 && head.types[0] === t;\n        if (head.val && head.val.t === \"func\") {\n          const errors = typeCheck(\n            head.val.v,\n            args.map(a => a.types ?? []),\n            ins.errCtx,\n            true,\n          );\n          if (errors) {\n            return errors;\n          }\n          const { returns, numeric: onlyNum } = ops[head.val.v];\n          stack.push(\n            onlyNum && onlyNum !== \"in only\"\n              ? { types: [\"num\"] }\n              : { types: returns },\n          );\n        } else if (headIs(\"num\")) {\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return numOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"key\")) {\n          const badArg = badMatch([\"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return keyOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\n          stack.push({});\n        }\n        break;\n      }\n      case \"exp\":\n      case \"cat\":\n      case \"or\":\n      case \"var\":\n      case \"let\":\n      case \"loo\":\n      case \"jmp\":\n        break;\n      case \"clo\":\n      case \"par\": {\n        const errors = insErrorDetect(ins.value[1]);\n        if (errors) {\n          return errors;\n        }\n      }\n      case \"ref\":\n      case \"npa\":\n      case \"upa\":\n        stack.push({});\n        break;\n      case \"if\": {\n        stack.pop();\n        stack.push({});\n        const ifIns = slice(fins, i + 1, ins.value + 1);\n        const errors = insErrorDetect(ifIns);\n        if (errors) {\n          return errors;\n        }\n        i += ins.value - 1;\n        break;\n      }\n      case \"pop\":\n      case \"rec\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          stack.pop();\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n}\n\nexport function parse(\n  code: string,\n  sourceId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, sourceId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const segments = segment(tokens);\n  const labelled = funcise(segments);\n  const funcsAndErrors = labelled.map(named =>\n    syntaxise(named, {\n      sourceId: sourceId,\n      line: named.errCtx.line,\n      col: named.errCtx.col,\n    }),\n  );\n  const okFuncs: Func[] = [],\n    errors: InvokeError[] = [];\n  funcsAndErrors.forEach(fae => {\n    if (fae[0] === \"err\") {\n      errors.push(fae[1]);\n    } else {\n      okFuncs.push(fae[1]);\n    }\n  });\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name] = func));\n  return { errors, funcs };\n}\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\n\ntype State = { dict: Map<string, Val>; output: string };\n\nasync function get(state: State, key: string): Promise<ValOrErr> {\n  if (!state.dict.has(key)) {\n    return { kind: \"err\", err: `\"${key} not found.` };\n  }\n  return { kind: \"val\", value: state.dict.get(key)! };\n}\n\nasync function set(\n  state: State,\n  key: string,\n  val: Val,\n): Promise<string | undefined> {\n  state.dict.set(key, val);\n  return undefined;\n}\n\nasync function exe(state: State, name: string, args: Val[]): Promise<ValOrErr> {\n  const nullVal: Val = { t: \"null\", v: undefined };\n  switch (name) {\n    case \"print-str\":\n      state.output += args[0].v;\n      break;\n    case \"print\":\n    case \"test.function\":\n      state.output += args[0].v + \"\\n\";\n      break;\n    default:\n      return { kind: \"err\", err: `operation ${name} does not exist` };\n  }\n  return { kind: \"val\", value: nullVal };\n}\n\nconst tests: {\n  name: string;\n  code: string;\n  err?: string[];\n  out?: string;\n}[] = [\n  //Basic snippets\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\n  {\n    name: \"Say Hello, world!\",\n    code: `(print \"Hello, world!\")`,\n    out: `Hello, world!\\nnull`,\n  },\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\n  {\n    name: \"Whens\",\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\n    out: `hi\\n[234 null]`,\n  },\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\n  {\n    name: \"and & short-circuit\",\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\n    out: `[false true]`,\n  },\n  {\n    name: \"or & short-circuit\",\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\n    out: `-> [true 1]`,\n  },\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\n  {\n    name: \"Key as operation\",\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\n    out: `[24 :abc]`,\n  },\n  {\n    name: \"Dictionary as op 1\",\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 2\",\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\n  },\n  {\n    name: \"Equalities\",\n    code: `[(= 1 2 1)\n            (!= 1 2 1)\n            (= \"Hello\" \"hello\")\n            (!= \"world\" \"world\")\n            (= [0 [1]] [0 [1]])]`,\n    out: `[false 1 false false [0 [1]]]`,\n  },\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\n  {\n    name: \"Define num and call\",\n    code: `(var f 1) (f [:a :b :c])`,\n    out: `:b`,\n  },\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\n  {\n    name: \"Sum vector of numbers\",\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\n    out: `[6 9]`,\n  },\n  {\n    name: \"Sum vectors of numbers\",\n    code: `(map + [1 2 3] [1 2 3 4])`,\n    out: `[2 4 6]`,\n  },\n  {\n    name: \"Filter by integer\",\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\n    out: `[[:a :b :c] \"hello\"]`,\n  },\n  {\n    name: \"Comments, short decimal\",\n    code: `;((print \"Hello\")\n           .456`,\n    out: `0.456`,\n  },\n  {\n    name: \"Dictionary into vector\",\n    code: `(into [1 2] {3 4 5 6})`,\n    out: `[1 2 [3 4] [5 6]]`,\n  },\n  {\n    name: \"Vector into dictionary\",\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\n    out: `{[0] 2, [2] 3}`,\n  },\n  {\n    name: \"While loop\",\n    code: `(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))`,\n    out: `543210`,\n  },\n  {\n    name: \"Catch error\",\n    code: `(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print \"hi\"))`,\n    out: `Type`,\n  },\n  //Basic functions and closures\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\n  {\n    name: \"Call greet func\",\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\n    out: `Hello!\\nnull`,\n  },\n  {\n    name: \"Call const value func\",\n    code: `(function const 123) (const)`,\n    out: `123`,\n  },\n  {\n    name: \"Call identity funcs\",\n    code: `(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]`,\n    out: `[123 456]`,\n  },\n  {\n    name: \"Call greet with name\",\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\n           (greeting \"Patrick\")`,\n    out: `Hello, Patrick!\\nnull`,\n  },\n  {\n    name: \"Call with too few args\",\n    code: `(function func a b c [a b c]) (func 1 2)`,\n    out: `[1 2 null]`,\n  },\n  {\n    name: \"Define func and call\",\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Anonymous parameters\",\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)`,\n    out: `false`,\n  },\n  {\n    name: \"Call parameter\",\n    code: `(function f x (x \"hello\")) (f print)`,\n    out: `hello\\nnull`,\n  },\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\n  {\n    name: \"Let num op and call\",\n    code: `(function f (let n 0) (n [1])) (f)`,\n    out: `1`,\n  },\n  {\n    name: \"Explicit return\",\n    code: `(function f (return 123) (print 456)) (f)`,\n    out: `123`,\n  },\n  {\n    name: \"Closure 1\",\n    code: `(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)`,\n    out: `20`,\n  },\n  {\n    name: \"Closure 2\",\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\n    out: `[0 2 4 5 6 8]`,\n  },\n  {\n    name: \"Closure 3\",\n    code: `(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]`,\n    out: `[20 40]`,\n  },\n  {\n    name: \"Func returns closure\",\n    code: `(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)`,\n    out: `4`,\n  },\n  {\n    name: \"Dictionary closure\",\n    code: `(function f x #{x 2})\n           (let closure (f :a))\n           (closure)`,\n    out: `{:a 2}`,\n  },\n  {\n    name: \"Vector closure\",\n    code: `(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Closure as head\",\n    code: `(#[% %1 %2] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 1\",\n    code: `(@[] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 2\",\n    code: `(@((do +) 2) 2)`,\n    out: `4`,\n  },\n  //Runtime errors\n  {\n    name: \"String instead of number\",\n    code: `(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 \"hi\")`,\n    out: `4`,\n    err: [\"Type\"],\n  },\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\n  {\n    name: \"Expired let retrieve\",\n    code: `(function f (let a 1) a) (f) a`,\n    err: [\"Reference\"],\n  },\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\n  {\n    name: \"Loop budget\",\n    code: `(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))`,\n    err: [\"Budget\"],\n  },\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\n  //Complex functions\n  {\n    name: \"Fibonacci 13\",\n    code: `(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)`,\n    out: `233`,\n  },\n  {\n    name: \"dedupe (recur)\",\n    code: `(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])`,\n    out: `[1 2 3]`,\n  },\n  //Test environment functions\n  {\n    name: \"set get\",\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\n    out: `[5.5 5.5]`,\n  },\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\n  //Syntax errors\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\n  {\n    name: \"Imbalanced quotes 1\",\n    code: `(print \"Hello)`,\n    err: [\"Parse\", \"Parse\"],\n  },\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\n  //Parser type-errors\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\n  {\n    name: \"Parser type error 2\",\n    code: `(function f (+ 1 (into {} {})))`,\n    err: [\"Type\"],\n  },\n  {\n    name: \"Parser type error 3\",\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\n    err: [\"Type\"],\n  },\n];\n\nexport async function doTests(\n  invoke: (\n    ctx: Ctx,\n    code: string,\n    sourceId: string,\n    print: boolean,\n  ) => Promise<InvokeResult>,\n  terse = true,\n): Promise<string[]> {\n  const results: {\n    okErr: boolean;\n    okOut: boolean;\n    elapsedMs: number;\n    display: string;\n  }[] = [];\n  for (let t = 0; t < len(tests); ++t) {\n    const { name, code, err, out } = tests[t];\n    const state: State = {\n      dict: new Map<string, Val>(),\n      output: \"\",\n    };\n    const env: Env = { funcs: {}, vars: {} };\n    const startTime = getTimeMs();\n    const valOrErrs = await invoke(\n      {\n        get: (key: string) => get(state, key),\n        set: (key: string, val: Val) => set(state, key, val),\n        exe: (name: string, args: Val[]) => exe(state, name, args),\n        env,\n        loopBudget: 10000,\n        rangeBudget: 1000,\n        callBudget: 1000,\n        recurBudget: 10000,\n      },\n      code,\n      \"testing\",\n      true,\n    );\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\n    const okOut = !out || trim(state.output) === out;\n    const elapsedMs = getTimeMs() - startTime;\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\n      padEnd(`${t + 1}`, 3),\n      padEnd(name, 24),\n      padEnd(`${elapsedMs}ms`, 6),\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\n      okErr ||\n        errors.map(\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\n        ),\n    ];\n    results.push({\n      okErr,\n      okOut,\n      elapsedMs,\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\n    });\n  }\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\n  return concat(\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\n  );\n}\n","import { len, slice, splice } from \"./poly-fills\";\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\n\nexport const num = ({ v }: Val) => v as number;\nexport const str = ({ v }: Val) => v as string;\nexport const vec = ({ v }: Val) => v as Val[];\nexport const dic = ({ v }: Val) => v as Dict;\n\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\n\nexport const isEqual = (a: Val, b: Val) => {\n  if (a.t !== b.t) {\n    return false;\n  }\n  switch (a.t) {\n    case \"null\":\n      return true;\n    case \"bool\":\n      return a.v === b.v;\n    case \"num\":\n      return a.v === b.v;\n    case \"vec\":\n      return isVecEqual(a.v, vec(b));\n    case \"dict\": {\n      const bd = dic(b);\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\n    }\n    case \"str\":\n    case \"ref\":\n    case \"key\":\n    case \"func\":\n      return str(a) === str(b);\n    case \"clo\":\n      return (<Func>a.v).name === (<Func>b.v).name;\n  }\n  return assertUnreachable(a);\n};\n\nexport const stringify = (vals: Val[]) =>\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\n\nexport const val2str = (val: Val): string => {\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\n  if (val.t === \"clo\") {\n    return `#${val.v.name}`;\n  } else if (val.t === \"vec\") {\n    return `[${val.v.map(quoted).join(\" \")}]`;\n  } else if (val.t === \"dict\") {\n    const { keys, vals } = val.v;\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\n    return `{${entries.join(\", \")}}`;\n  } else if (val.t === \"null\") {\n    return \"null\";\n  }\n  return `${val.v}`;\n};\n\nexport const asArray = (val: Val): Val[] =>\n  val.t === \"vec\"\n    ? slice(val.v)\n    : val.t === \"str\"\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\n    : val.t === \"dict\"\n    ? val.v.keys.map((k, i) => ({\n        t: \"vec\",\n        v: [k, val.v.vals[i]],\n      }))\n    : [];\n\nexport const toDict = (args: Val[]): Val => {\n  if (len(args) % 2 === 1) {\n    args.pop();\n  }\n  const keys = args.filter((_, i) => i % 2 === 0);\n  const vals = args.filter((_, i) => i % 2 === 1);\n  const ddKeys: Val[] = [],\n    ddVals: Val[] = [];\n  keys.forEach((key, i) => {\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\n    if (existingIdx === -1) {\n      ddKeys.push(key);\n      ddVals.push(vals[i]);\n    } else {\n      ddVals[existingIdx] = vals[i];\n    }\n  });\n  return {\n    t: \"dict\",\n    v: { keys: ddKeys, vals: ddVals },\n  };\n};\n\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\n  const idx = keys.findIndex(k => isEqual(k, key));\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\n};\n\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    nVals[idx] = val;\n  } else {\n    nKeys.push(key);\n    nVals.push(val);\n  }\n  return <Dict>{ keys: nKeys, vals: nVals };\n};\n\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    splice(nKeys, idx, 1);\n    splice(nVals, idx, 1);\n  }\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\n};\n\nexport function errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n","export const insituxVersion = 20211013;\nimport { asBoo } from \"./checks\";\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\nimport { parse } from \"./parse\";\nimport * as pf from \"./poly-fills\";\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\nconst { logn, log2, log10 } = pf;\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\nconst { trim, trimStart, trimEnd } = pf;\nconst { getTimeMs, randInt, randNum } = pf;\nconst { isNum, len, objKeys, range, toNum } = pf;\nimport { doTests } from \"./test\";\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\n\nlet stack: Val[] = [];\nlet lets: { [key: string]: Val }[] = [];\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\nconst _num = (v: number) => stack.push({ t: \"num\", v });\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\n\nasync function exeOp(\n  op: string,\n  args: Val[],\n  ctx: Ctx,\n  errCtx: ErrCtx,\n  checkArity: boolean,\n): Promise<InvokeError[] | undefined> {\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\n  //Optional arity check\n  if (checkArity) {\n    const violations = arityCheck(op, len(args), errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n  //Argument type check\n  {\n    const violations = typeCheck(\n      op,\n      args.map(a => [a.t]),\n      errCtx,\n    );\n    if (violations) {\n      return violations;\n    }\n  }\n\n  switch (op) {\n    case \"str\":\n      stack.push({\n        t: \"str\",\n        v: stringify(args),\n      });\n      return;\n    case \"print\":\n    case \"print-str\":\n      {\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\n        _nul();\n      }\n      return;\n    case \"vec\":\n      _vec(args);\n      return;\n    case \"dict\": {\n      stack.push(toDict(args));\n      return;\n    }\n    case \"len\":\n      _num(\n        args[0].t === \"str\"\n          ? slen(args[0].v)\n          : args[0].t === \"vec\"\n          ? len(args[0].v)\n          : len(dic(args[0]).keys),\n      );\n      return;\n    case \"to-num\":\n      if (isNum(args[0].v)) {\n        _num(toNum(args[0].v));\n      } else {\n        _nul();\n      }\n      return;\n    case \"to-key\":\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\n      return;\n    case \"!\":\n      _boo(!asBoo(args[0]));\n      return;\n    case \"=\":\n    case \"!=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\n          _boo(false);\n          return;\n        }\n      }\n      stack.push(args[0]);\n      return;\n    case \"-\":\n      _num(\n        len(args) === 1\n          ? -num(args[0])\n          : args.map(num).reduce((sum, n) => sum - n),\n      );\n      return;\n    case \"**\":\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\n      return;\n    case \"+\":\n      _num(args.map(num).reduce((sum, n) => sum + n));\n      return;\n    case \"*\":\n      _num(args.map(num).reduce((sum, n) => sum * n));\n      return;\n    case \"/\":\n      _num(args.map(num).reduce((sum, n) => sum / n));\n      return;\n    case \"//\":\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\n      return;\n    case \"fast=\":\n    case \"fast!=\":\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\n        _boo(false);\n        return;\n      }\n      stack.push(args[0]);\n      return;\n    case \"fast-\":\n      _num(<number>args[0].v - <number>args[1].v);\n      return;\n    case \"fast+\":\n      _num(<number>args[0].v + <number>args[1].v);\n      return;\n    case \"fast*\":\n      _num(<number>args[0].v * <number>args[1].v);\n      return;\n    case \"fast/\":\n      _num(<number>args[0].v / <number>args[1].v);\n      return;\n    case \"fast//\":\n      _num(floor(<number>args[0].v / <number>args[1].v));\n      return;\n    case \"fast<\":\n      _boo(<number>args[0].v < <number>args[1].v);\n      return;\n    case \"fast>\":\n      _boo(<number>args[0].v > <number>args[1].v);\n      return;\n    case \"fast<=\":\n      _boo(<number>args[0].v <= <number>args[1].v);\n      return;\n    case \"fast>=\":\n      _boo(<number>args[0].v >= <number>args[1].v);\n      return;\n    case \"rem\":\n      _num(args.map(num).reduce((sum, n) => sum % n));\n      return;\n    case \"min\":\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\n      return;\n    case \"max\":\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\n      return;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\n        if (\n          (op === \"<\" && a >= b) ||\n          (op === \">\" && a <= b) ||\n          (op === \"<=\" && a > b) ||\n          (op === \">=\" && a < b)\n        ) {\n          _boo(false);\n          return;\n        }\n      }\n      _boo(true);\n      return;\n    case \"inc\":\n      _num(<number>args[0].v + 1);\n      return;\n    case \"dec\":\n      _num(<number>args[0].v - 1);\n      return;\n    case \"abs\":\n      _num(abs(<number>args[0].v));\n      return;\n    case \"round\":\n      if (len(args) === 2) {\n        const x = 10 ** <number>args[1].v;\n        _num(round(<number>args[0].v * x) / x);\n      } else {\n        _num(round(<number>args[0].v));\n      }\n      return;\n    case \"sin\":\n    case \"cos\":\n    case \"tan\":\n    case \"sqrt\":\n    case \"floor\":\n    case \"ceil\":\n    case \"logn\":\n    case \"log2\":\n    case \"log10\":\n      _num(\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\n          num(args[0]),\n        ),\n      );\n      return;\n    case \"and\":\n      _boo(args.every(asBoo));\n      return;\n    case \"or\":\n      _boo(args.some(asBoo));\n      return;\n    case \"odd?\":\n    case \"even?\":\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\n      return;\n    case \"pos?\":\n    case \"neg?\":\n    case \"zero?\": {\n      const n = num(args[0]);\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\n      return;\n    }\n    case \"null?\":\n    case \"num?\":\n    case \"bool?\":\n    case \"str?\":\n    case \"dict?\":\n    case \"vec?\":\n    case \"key?\":\n    case \"func?\":\n      _boo(\n        (op === \"null?\" && args[0].t === \"null\") ||\n          (op === \"num?\" && args[0].t === \"num\") ||\n          (op === \"bool?\" && args[0].t === \"bool\") ||\n          (op === \"str?\" && args[0].t === \"str\") ||\n          (op === \"dict?\" && args[0].t === \"dict\") ||\n          (op === \"vec?\" && args[0].t === \"vec\") ||\n          (op === \"key?\" && args[0].t === \"key\") ||\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\n      );\n      return;\n    case \"has?\":\n      _boo(sub(str(args[0]), str(args[1])));\n      return;\n    case \"idx\": {\n      let i = -1;\n      if (args[0].t === \"str\") {\n        if (args[1].t !== \"str\") {\n          return tErr(\"strings can only contain strings\");\n        }\n        if (len(args) < 3) {\n          i = subIdx(args[0].v, args[1].v);\n        } else {\n          const arr = args[0].v.split(\"\");\n          arr[num(args[2])] = args[1].v;\n          _str(arr.join(\"\"));\n          return;\n        }\n      } else if (args[0].t === \"vec\") {\n        if (len(args) < 3) {\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\n        } else {\n          const v = slice(args[0].v);\n          v[num(args[2])] = args[1];\n          _vec(v);\n          return;\n        }\n      }\n      if (i === -1) {\n        _nul();\n      } else {\n        _num(i);\n      }\n      return;\n    }\n    case \"map\":\n    case \"for\":\n    case \"reduce\":\n    case \"filter\":\n    case \"remove\":\n    case \"find\":\n    case \"count\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      if (op === \"map\" || op === \"for\") {\n        const badArg = args.findIndex(\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\n        );\n        if (badArg !== -1) {\n          const badType = typeNames[args[badArg].t];\n          return tErr(\n            `argument ${\n              badArg + 2\n            } must be either: string, vector, dictionary, not ${badType}`,\n          );\n        }\n      }\n\n      if (op === \"for\") {\n        const arrays = args.map(asArray);\n        const lims = arrays.map(len);\n        const divisors = lims.map((_, i) =>\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\n        );\n        divisors.unshift(1);\n        const lim = divisors.pop()!;\n        if (lim > ctx.loopBudget) {\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\n        }\n        const array: Val[] = [];\n        for (let t = 0; t < lim; ++t) {\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\n          const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      if (op === \"map\") {\n        const arrays = args.map(asArray);\n        const shortest = min(...arrays.map(len));\n        const array: Val[] = [];\n        for (let i = 0; i < shortest; ++i) {\n          const errors = await closure(arrays.map(a => a[i]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      const array = asArray(args.shift()!);\n      if (op !== \"reduce\") {\n        const isRemove = op === \"remove\",\n          isFind = op === \"find\",\n          isCount = op === \"count\";\n        const filtered: Val[] = [];\n        let count = 0;\n        for (let i = 0, lim = len(array); i < lim; ++i) {\n          const errors = await closure([array[i], ...args]);\n          if (errors) {\n            return errors;\n          }\n          const b = asBoo(stack.pop()!);\n          if (isCount) {\n            count += b ? 1 : 0;\n          } else if (isFind) {\n            if (b) {\n              stack.push(array[i]);\n              return;\n            }\n          } else if (b !== isRemove) {\n            filtered.push(array[i]);\n          }\n        }\n        switch (op) {\n          case \"count\":\n            _num(count);\n            return;\n          case \"find\":\n            _nul();\n            return;\n        }\n        _vec(filtered);\n        return;\n      }\n\n      if (!len(array)) {\n        if (len(args)) {\n          stack.push(args[0]);\n        } else {\n          _vec();\n        }\n        return;\n      }\n      if (len(array) < 2 && !len(args)) {\n        push(stack, array);\n        return;\n      }\n\n      let reduction: Val = (len(args) ? args : array).shift()!;\n      for (let i = 0, lim = len(array); i < lim; ++i) {\n        const errors = await closure([reduction, array[i]]);\n        if (errors) {\n          return errors;\n        }\n        reduction = stack.pop()!;\n      }\n      stack.push(reduction);\n      return;\n    }\n    case \"repeat\": {\n      const toRepeat = args.shift()!;\n      const result: Val[] = [];\n      const count = num(args[0]);\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\n        const closure = getExe(ctx, toRepeat, errCtx);\n        for (let i = 0; i < count; ++i) {\n          const errors = await closure([{ t: \"num\", v: i }]);\n          if (errors) {\n            return errors;\n          }\n          result.push(stack.pop()!);\n        }\n      } else {\n        for (let i = 0; i < count; ++i) {\n          result.push(toRepeat);\n        }\n      }\n      _vec(result);\n      return;\n    }\n    case \"rand-int\":\n    case \"rand\":\n      {\n        const nArgs = len(args);\n        const [a, b] = [\n          nArgs < 2 ? 0 : num(args[0]),\n          nArgs === 0\n            ? 1 + toNum(op === \"rand-int\")\n            : nArgs === 1\n            ? num(args[0])\n            : num(args[1]),\n        ];\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\n      }\n      return;\n    case \"do\":\n    case \"val\":\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\n      return;\n    case \"..\":\n    case \"...\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      let flatArgs: Val[] = args;\n      if (op === \"..\") {\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\n      } else {\n        const a = flatArgs.pop()!;\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\n      }\n      return await closure(flatArgs);\n    }\n    case \"into\": {\n      if (args[0].t === \"vec\") {\n        _vec(concat(args[0].v, asArray(args[1])));\n      } else {\n        if (args[1].t === \"vec\") {\n          stack.push(\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\n          );\n        } else {\n          const { keys, vals } = dic(args[0]);\n          const d1 = dic(args[1]);\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\n        }\n      }\n      return;\n    }\n    case \"push\": {\n      if (args[0].t === \"vec\") {\n        const v = args[0].v;\n        if (len(args) < 3) {\n          _vec(concat(v, [args[1]]));\n        } else {\n          const n = num(args[2]);\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\n        }\n      } else {\n        if (len(args) < 3) {\n          stack.push(dictDrop(dic(args[0]), args[1]));\n        } else {\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\n        }\n      }\n      return;\n    }\n    case \"sect\": {\n      const v = args[0];\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\n      let a = 0,\n        b = vlen;\n      switch (len(args)) {\n        case 1:\n          a = 1;\n          break;\n        case 2: {\n          const del = num(args[1]);\n          if (del < 0) {\n            b += del;\n          } else {\n            a += del;\n          }\n          break;\n        }\n        case 3: {\n          const skip = num(args[1]);\n          const take = num(args[2]);\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\n          b = (take < 0 ? b : a) + take;\n          break;\n        }\n      }\n      a = max(a, 0);\n      b = min(b, vlen);\n      if (a > b) {\n        (v.t === \"vec\" ? _vec : _str)();\n        return;\n      }\n      if (v.t === \"vec\") {\n        _vec(slice(v.v, a, b));\n      } else {\n        _str(substr(str(args[0]), a, b - a));\n      }\n      return;\n    }\n    case \"reverse\":\n      if (args[0].t === \"str\") {\n        _str(stringify(reverse(asArray(args[0]))));\n      } else {\n        _vec(reverse(asArray(args[0])));\n      }\n      return;\n    case \"sort\": {\n      if (!len(vec(args[0]))) {\n        _vec();\n        return;\n      }\n      const src = asArray(args[0]);\n      const mapped: Val[][] = [];\n      if (len(args) === 1) {\n        push(\n          mapped,\n          src.map(v => [v, v]),\n        );\n      } else {\n        const closure = getExe(ctx, args.pop()!, errCtx);\n        for (let i = 0, lim = len(src); i < lim; ++i) {\n          const errors = await closure([src[i]]);\n          if (errors) {\n            return errors;\n          }\n          mapped.push([src[i], stack.pop()!]);\n        }\n      }\n      const okT = mapped[0][1].t;\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\n        return tErr(\"can only sort by all number or all string\");\n      }\n      if (mapped[0][1].t === \"num\") {\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\n      } else {\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\n      }\n      _vec(mapped.map(([v]) => v));\n      return;\n    }\n    case \"range\": {\n      const [a, b, s] = args.map(num);\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\n      const [x, y] =\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\n      const step = sign((y - x) * (s || 1)) * (s || 1);\n      const count = ceil(abs((y - x) / step));\n      if (!count) {\n        _vec([]);\n        return;\n      }\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      const nums = range(count).map(n => n * step + x);\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\n      return;\n    }\n    case \"empty?\":\n      _boo(!len(asArray(args[0])));\n      return;\n    case \"keys\":\n    case \"vals\":\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\n      return;\n    case \"split\":\n      _vec(\n        str(args[0])\n          .split(len(args) > 1 ? str(args[1]) : \" \")\n          .map(v => <Val>{ t: \"str\", v }),\n      );\n      return;\n    case \"join\":\n      _str(\n        vec(args[0])\n          .map(val2str)\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\n      );\n      return;\n    case \"starts-with?\":\n    case \"ends-with?\":\n      _boo((op === \"starts-with?\" ? starts : ends)(str(args[0]), str(args[1])));\n      return;\n    case \"upper-case\":\n    case \"lower-case\":\n    case \"trim\":\n    case \"trim-start\":\n    case \"trim-end\":\n      _str(\n        (op === \"upper-case\"\n          ? upperCase\n          : op === \"lower-case\"\n          ? lowerCase\n          : op === \"trim\"\n          ? trim\n          : op === \"trim-start\"\n          ? trimStart\n          : trimEnd)(str(args[0])),\n      );\n      return;\n    case \"str*\": {\n      const text = str(args[0]);\n      _str(\n        range(max(num(args[1]), 0))\n          .map(n => text)\n          .join(\"\"),\n      );\n      return;\n    }\n    case \"time\":\n      _num(getTimeMs());\n      return;\n    case \"version\":\n      _num(insituxVersion);\n      return;\n    case \"tests\":\n      _str((await doTests(invoke, !(len(args) && asBoo(args[0])))).join(\"\\n\"));\n      return;\n    case \"symbols\":\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\n      return;\n    case \"eval\": {\n      delete ctx.env.funcs[\"entry\"];\n      const sLen = len(stack);\n      const sourceId = `${errCtx.sourceId} eval`;\n      const errors = await parseAndExe(ctx, str(args[0]), sourceId);\n      if (errors) {\n        return [\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\n          ...errors,\n        ];\n      }\n      if (sLen === len(stack)) {\n        _nul();\n      }\n      return;\n    }\n    case \"reset\":\n      ctx.env.vars = {};\n      ctx.env.funcs = {};\n      lets = [];\n      _nul();\n      return;\n  }\n\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\n}\n\nfunction getExe(\n  ctx: Ctx,\n  op: Val,\n  errCtx: ErrCtx,\n  checkArity = true,\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\n  const monoArityError = [\n    {\n      e: \"Arity\",\n      m: `${typeNames[op.t]} as op requires one sole argument`,\n      errCtx,\n    },\n  ];\n  if (op.t === \"str\" || op.t === \"func\") {\n    const name = op.v;\n    if (ops[name]) {\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\n    }\n    if (name in ctx.env.funcs) {\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\n    }\n    if (name in ctx.env.vars) {\n      return getExe(ctx, ctx.env.vars[name], errCtx);\n    }\n    if (name in lets[len(lets) - 1]) {\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\n    }\n    if (starts(name, \"$\")) {\n      return async (params: Val[]) => {\n        if (!len(params)) {\n          return monoArityError;\n        }\n        const err = await ctx.set(substr(name, 1), params[0]);\n        stack.push(params[0]);\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n      };\n    }\n    return async (params: Val[]) => {\n      const valAndErr = await ctx.exe(name, params);\n      if (valAndErr.kind === \"val\") {\n        stack.push(valAndErr.value);\n        return;\n      }\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\n    };\n  } else if (op.t === \"clo\") {\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\n  } else if (op.t === \"key\") {\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      if (params[0].t === \"dict\") {\n        stack.push(dictGet(dic(params[0]), op));\n      } else if (params[0].t === \"vec\") {\n        const found = vec(params[0]).find(v => isEqual(v, op));\n        stack.push(found ?? { t: \"null\", v: undefined });\n      } else {\n        return keyOpErr(errCtx, [params[0].t]);\n      }\n      return;\n    };\n  } else if (op.t === \"num\") {\n    const n = floor(op.v);\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const a = params[0];\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\n        return numOpErr(errCtx, [a.t]);\n      }\n      const arr = asArray(a);\n      if (abs(n) >= len(arr)) {\n        _nul();\n      } else if (n < 0) {\n        stack.push(arr[len(arr) + n]);\n      } else {\n        stack.push(arr[n]);\n      }\n      return;\n    };\n  } else if (op.t === \"vec\") {\n    const { v } = op;\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const found = v.find(val => isEqual(val, params[0]));\n      if (found) {\n        stack.push(found);\n      } else {\n        _nul();\n      }\n      return;\n    };\n  } else if (op.t === \"dict\") {\n    const dict = op.v;\n    return async (params: Val[]) => {\n      if (len(params) === 1) {\n        stack.push(dictGet(dict, params[0]));\n      } else if (len(params) === 2) {\n        _dic(dictSet(dict, params[0], params[1]));\n      } else {\n        return [\n          {\n            e: \"Arity\",\n            m: \"dictionary as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      return;\n    };\n  } else if (op.t === \"bool\") {\n    const cond = op.v;\n    return async (params: Val[]) => {\n      if (!len(params) || len(params) > 2) {\n        return [\n          {\n            e: \"Arity\",\n            m: \"boolean as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      stack.push(\n        cond\n          ? params[0]\n          : len(params) > 1\n          ? params[1]\n          : { t: \"null\", v: undefined },\n      );\n      return;\n    };\n  }\n  return async _ => [\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\n  ];\n}\n\nfunction errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n\nasync function exeFunc(\n  ctx: Ctx,\n  func: Func,\n  args: Val[],\n  inClosure = false,\n): Promise<InvokeError[] | undefined> {\n  --ctx.callBudget;\n  if (!inClosure) {\n    lets.push({});\n  }\n  const stackLen = len(stack);\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\n    const ins = func.ins[i];\n    const { errCtx } = func.ins[i];\n\n    const tooManyLoops = ctx.loopBudget < 1;\n    if (tooManyLoops || ctx.callBudget < 1) {\n      return [\n        {\n          e: \"Budget\",\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\n          errCtx,\n        },\n      ];\n    }\n\n    switch (ins.typ) {\n      case \"val\":\n        stack.push(ins.value);\n        break;\n      case \"var\":\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\n        break;\n      case \"let\":\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\n        break;\n      case \"npa\":\n      case \"upa\":\n        {\n          const paramIdx = ins.value;\n          if (paramIdx === -1) {\n            _vec(args);\n          } else if (len(args) <= paramIdx) {\n            _nul();\n          } else {\n            stack.push(args[paramIdx]);\n          }\n        }\n        break;\n      case \"ref\":\n        {\n          const name = ins.value;\n          if (ops[name]) {\n            _fun(name);\n          } else if (starts(name, \"$\")) {\n            const valAndErr = await ctx.get(substr(name, 1));\n            if (valAndErr.kind === \"err\") {\n              return [{ e: \"External\", m: valAndErr.err, errCtx }];\n            }\n            stack.push(valAndErr.value);\n          } else if (name in ctx.env.vars) {\n            stack.push(ctx.env.vars[name]);\n          } else if (name in lets[len(lets) - 1]) {\n            stack.push(lets[len(lets) - 1][name]);\n          } else if (name in ctx.env.funcs) {\n            _fun(name);\n          } else {\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\n          }\n        }\n        break;\n      case \"exe\":\n        {\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\n          const nArgs = ins.value;\n          const params = splice(stack, len(stack) - nArgs, nArgs);\n          const errors = await closure(params);\n          if (errors) {\n            //Find next catch statement\n            const nextCat = slice(func.ins, i).findIndex(\n              ins => ins.typ === \"cat\",\n            );\n            if (nextCat !== -1) {\n              i += nextCat;\n              lets[len(lets) - 1][\"errors\"] = {\n                t: \"vec\",\n                v: errorsToDict(errors),\n              };\n              break;\n            }\n            return errors;\n          }\n        }\n        break;\n      case \"or\":\n        if (asBoo(stack[len(stack) - 1])) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      case \"if\":\n        if (!asBoo(stack.pop()!)) {\n          i += ins.value;\n        }\n        break;\n      case \"jmp\":\n      case \"cat\":\n        i += ins.value;\n        break;\n      case \"loo\":\n        i += ins.value;\n        --ctx.loopBudget;\n        break;\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          splice(stack, stackLen - 1, len(stack) - stackLen - 1);\n        } else {\n          _nul();\n        }\n        i = lim;\n        break;\n      case \"rec\":\n        {\n          lets[len(lets) - 1] = {};\n          i = -1;\n          const nArgs = ins.value;\n          args = splice(stack, len(stack) - nArgs, nArgs);\n          --ctx.recurBudget;\n          if (!ctx.recurBudget) {\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\n          }\n        }\n        continue;\n      case \"clo\":\n      case \"par\":\n        {\n          const name = ins.value[0];\n          let cins = ins.value[1];\n          const isCapture = ({ typ, value }: Ins, i: number) =>\n            (typ === \"ref\" &&\n              !cins.find(i => i.typ === \"let\" && i.value === value)) ||\n            typ === \"npa\" ||\n            (typ === \"val\" && i + 1 !== len(cins) && cins[i + 1].typ === \"exe\");\n          const derefFunc: Func = {\n            name: \"\",\n            ins: cins\n              .map((ins, i) => {\n                if (i + 1 === len(cins)) {\n                  return ins;\n                }\n                const possibleLet =\n                  ins.typ === \"val\" &&\n                  ins.value.t === \"str\" &&\n                  cins[i + 1].typ === \"exe\" &&\n                  lets[len(lets) - 1][ins.value.v];\n                return possibleLet\n                  ? <Ins>{ typ: \"val\", value: possibleLet }\n                  : ins;\n              })\n              .filter(isCapture),\n          };\n          const errors = await exeFunc(ctx, derefFunc, args, true);\n          if (errors) {\n            return errors;\n          }\n          const numIns = len(derefFunc.ins);\n          const captures = splice(stack, len(stack) - numIns, numIns);\n          cins = cins.map((ins, i) =>\n            isCapture(ins, i)\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\n              : ins,\n          );\n          //Rewrite partial closure to #(... func [args] args)\n          if (ins.typ === \"par\") {\n            const { value: exeNumArgs, errCtx } = cins.pop()!;\n            //If has expression as head\n            if (len(cins) > 0 && cins[len(cins) - 1].typ === \"exe\") {\n              const headStartIdx = cins.findIndex(i => i.typ === \"exp\");\n              const head = splice(cins, headStartIdx, len(cins) - headStartIdx);\n              push(head, cins);\n              cins = head;\n            } else {\n              cins.unshift(cins.pop()!);\n            }\n            cins.push({ typ: \"upa\", value: -1, errCtx });\n            cins.push({\n              typ: \"val\",\n              value: <Val>{ t: \"str\", v: \"...\" },\n              errCtx,\n            });\n            cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\n          }\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\n        }\n        break;\n      case \"exp\":\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n  if (!inClosure) {\n    lets.pop();\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\n  }\n  return;\n}\n\nasync function parseAndExe(\n  ctx: Ctx,\n  code: string,\n  sourceId: string,\n): Promise<InvokeError[] | undefined> {\n  const parsed = parse(code, sourceId);\n  if (len(parsed.errors)) {\n    return parsed.errors;\n  }\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\n  if (!(\"entry\" in ctx.env.funcs)) {\n    return;\n  }\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\n}\n\n/**\n * Parses and executes the given code.\n * @param ctx An environment context you retain.\n * @param code The code to parse and execute.\n * @param sourceId A unique ID used in immediate or future invocation errors.\n * @param printResult Automatically print the final value of this invocation?\n * @returns Invocation errors caused during execution of the code,\n *          or the final value of the invocation.\n */\nexport async function invoke(\n  ctx: Ctx,\n  code: string,\n  sourceId: string,\n  printResult = false,\n): Promise<InvokeResult> {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  const errors = await parseAndExe(ctx, code, sourceId);\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\n  delete ctx.env.funcs[\"entry\"];\n  const value = stack.pop();\n  [stack, lets] = [[], []];\n  if (printResult && !errors && value) {\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(value) }]);\n  }\n  return errors\n    ? { kind: \"errors\", errors }\n    : value\n    ? { kind: \"val\", value }\n    : { kind: \"empty\" };\n}\n\n/**\n * Executes a user-defined Insitux function by name.\n * @param ctx An environment context you retain.\n * @param funcName The function to execute.\n * @param args The arguments to pass to the function.\n * @returns Invocation errors caused during execution of the function,\n *          or the final value of the invocation,\n *          or undefined if the function was not found.\n */\nexport async function invokeFunction(\n  ctx: Ctx,\n  funcName: string,\n  args: Val[],\n): Promise<InvokeResult | undefined> {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  if (!(funcName in ctx.env.funcs)) {\n    return;\n  }\n  const errors = await exeFunc(ctx, ctx.env.funcs[funcName], args);\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\n  const value = stack.pop()!;\n  [stack, lets] = [[], []];\n  return errors\n    ? { kind: \"errors\", errors }\n    : value\n    ? { kind: \"val\", value }\n    : { kind: \"empty\" };\n}\n\n/**\n * @param ctx An environment context you retain.\n * @param alsoSyntax To optionally include syntax symbols.\n * @returns List of symbols defined in Insitux, including built-in operations, (optionally) syntax, constants, and user-defined functions.\n */\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\n  let syms = alsoSyntax ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"while\"] : [];\n  push(syms, [\"args\", \"PI\", \"E\"]);\n  syms = concat(syms, objKeys(ops));\n  syms = concat(syms, objKeys(ctx.env.funcs));\n  syms = concat(syms, objKeys(ctx.env.vars));\n  const hidden = [\"entry\"];\n  syms = syms.filter(o => !has(hidden, o));\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\n}\n","import { invoke } from \".\";\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\nimport { Ctx } from \"./types\";\n\nexport type InvokeOutput = {\n  type: \"message\" | \"error\";\n  text: string;\n}[];\n\nconst invocations = new Map<string, string>();\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\n\nexport async function invoker(ctx: Ctx, code: string): Promise<InvokeOutput> {\n  const uuid = getTimeMs().toString();\n  invocations.set(uuid, code);\n  const valOrErrs = await invoke(ctx, code, uuid, true);\n  if (valOrErrs.kind !== \"errors\") {\n    return [];\n  }\n  let out: InvokeOutput = [];\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, sourceId } }) => {\n    const invocation = invocations.get(sourceId);\n    if (!invocation) {\n      out.push({\n        type: \"message\",\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\n      });\n      return;\n    }\n    const lineText = invocation.split(\"\\n\")[line - 1];\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\n    const half1 = trimStart(substr(lineText, 0, col - 1));\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\n    if (!sym) {\n      const half2 = substr(lineText, col);\n      out.push({ type: \"error\", text: lineText[col - 1] });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    } else {\n      const half2 = substr(lineText, col - 1 + slen(sym));\n      out.push({ type: \"error\", text: sym });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    }\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\n  });\n  return out;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","rem","vec","dict","types","map","for","reduce","filter","remove","find","count","repeat","rand","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","typeNames","null","num","bool","ref","func","clo","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","nullVal","parseAllArgs","tokens","params","body","exp","parseArg","inPartial","typ","text","shift","texts","err","head","when","ins","defIns","def","cond","ifT","ifF","insCount","arg","forEach","as","headIns","nArgs","unshift","parsed","errors","parseForm","insErrorDetect","fins","stack","lim","pop","badMatch","okTypes","headIs","badArg","parse","code","sourceId","stringError","makeCollsOps","emitComments","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","l","c","nextCh","n","isWhite","isDigit","ch","isParen","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","segments","token","segment","labelled","isFunc","entries","described","name","funcise","funcsAndErrors","named","eCtx","firstNonParam","p","syntaxise","okFuncs","fae","f","async","state","kind","set","exe","output","out","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","getExe","ctx","checkArity","monoArityError","tErr","violations","sum","every","closure","arrays","lims","divisors","loopBudget","argIdxs","d","shortest","array","isRemove","isFind","isCount","filtered","reduction","toRepeat","result","rangeBudget","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","newKey","inClosure","stackLen","tooManyLoops","paramIdx","nextCat","cins","isCapture","derefFunc","possibleLet","numIns","captures","exeNumArgs","headStartIdx","printResult","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}