(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.d(t,{invoker:()=>Gt});var r={};e.r(r),e.d(r,{abs:()=>H,ceil:()=>W,charCode:()=>P,codeChar:()=>E,concat:()=>h,cos:()=>_,ends:()=>y,flat:()=>x,floor:()=>V,getTimeMs:()=>S,has:()=>v,isArray:()=>c,isNum:()=>i,len:()=>o,log10:()=>G,log2:()=>U,logn:()=>z,lowerCase:()=>C,max:()=>O,min:()=>D,objKeys:()=>N,padEnd:()=>I,push:()=>b,randInt:()=>M,randNum:()=>j,range:()=>q,reverse:()=>A,round:()=>L,sign:()=>K,sin:()=>T,slen:()=>u,slice:()=>s,sortBy:()=>g,splice:()=>a,sqrt:()=>R,starts:()=>f,strIdx:()=>p,sub:()=>m,subIdx:()=>d,substr:()=>l,tan:()=>F,toNum:()=>n,trim:()=>w,trimEnd:()=>B,trimStart:()=>$,upperCase:()=>k});const n=e=>Number(e),s=(e,t,r)=>e.slice(t,r),a=(e,t,r)=>e.splice(t,r),o=e=>e.length,u=e=>e.length,i=e=>!Number.isNaN(Number(e)),c=e=>Array.isArray(e),l=(e,t,r)=>e.substring(t,t+(r??e.length)),p=(e,t)=>e[t],m=(e,t)=>e.includes(t),d=(e,t)=>e.indexOf(t),v=(e,t)=>e.includes(t),f=(e,t)=>e.startsWith(t),y=(e,t)=>e.endsWith(t),x=e=>e.flat(),h=(e,t)=>e.concat(t),b=(e,t)=>e.push(...t),g=(e,t)=>e.sort(t),A=e=>e.reverse(),C=e=>e.toLowerCase(),k=e=>e.toUpperCase(),w=e=>e.trim(),$=e=>e.trimStart(),B=e=>e.trimEnd(),I=(e,t)=>e.padEnd(t),P=e=>e.charCodeAt(0),E=e=>String.fromCharCode(e),j=(e,t)=>e+Math.random()*(t-e),M=(e,t)=>Math.floor(j(e,t)),q=e=>[...Array(e).keys()],N=e=>Object.keys(e),S=()=>(new Date).getTime(),H=Math.abs,D=Math.min,O=Math.max,T=Math.sin,_=Math.cos,F=Math.tan,R=Math.sqrt,L=Math.round,V=Math.floor,W=Math.ceil,K=Math.sign,z=Math.log,U=Math.log2,G=Math.log10,J={print:{returns:["null"]},"print-str":{returns:["null"]},"!":{exactArity:1,returns:["bool"]},"=":{minArity:2},"!=":{minArity:2},"+":{minArity:2,numeric:!0},"-":{minArity:1,numeric:!0},"*":{minArity:2,numeric:!0},"/":{minArity:2,numeric:!0},"//":{minArity:2,numeric:!0},"**":{minArity:1,maxArity:2,numeric:!0},"<":{minArity:2,numeric:!0},">":{minArity:2,numeric:!0},"<=":{minArity:2,numeric:!0},">=":{minArity:2,numeric:!0},"fast=":{exactArity:2},"fast!=":{exactArity:2},"fast+":{exactArity:2,numeric:!0},"fast-":{exactArity:2,numeric:!0},"fast*":{exactArity:2,numeric:!0},"fast/":{exactArity:2,numeric:!0},"fast//":{exactArity:2,numeric:!0},"fast<":{exactArity:2,numeric:!0},"fast>":{exactArity:2,numeric:!0},"fast<=":{exactArity:2,numeric:!0},"fast>=":{exactArity:2,numeric:!0},inc:{exactArity:1,numeric:!0},dec:{exactArity:1,numeric:!0},min:{minArity:2,numeric:!0},max:{minArity:2,numeric:!0},abs:{exactArity:1,numeric:!0},sqrt:{exactArity:1,numeric:!0},round:{minArity:1,maxArity:2,numeric:!0},floor:{exactArity:1,numeric:!0},ceil:{exactArity:1,numeric:!0},logn:{exactArity:1,numeric:!0},log2:{exactArity:1,numeric:!0},log10:{exactArity:1,numeric:!0},and:{minArity:1},or:{minArity:1},xor:{exactArity:2},"&":{exactArity:2,numeric:!0},"|":{exactArity:2,numeric:!0},"^":{exactArity:2,numeric:!0},"~":{exactArity:1,numeric:!0},"<<":{exactArity:2,numeric:!0},">>":{exactArity:2,numeric:!0},">>>":{exactArity:2,numeric:!0},"odd?":{exactArity:1,numeric:"in only",returns:["bool"]},"even?":{exactArity:1,numeric:"in only",returns:["bool"]},"pos?":{exactArity:1,numeric:"in only",returns:["bool"]},"neg?":{exactArity:1,numeric:"in only",returns:["bool"]},"zero?":{exactArity:1,numeric:"in only",returns:["bool"]},"null?":{exactArity:1,returns:["bool"]},"num?":{exactArity:1,returns:["bool"]},"bool?":{exactArity:1,returns:["bool"]},"str?":{exactArity:1,returns:["bool"]},"vec?":{exactArity:1,returns:["bool"]},"dict?":{exactArity:1,returns:["bool"]},"key?":{exactArity:1,returns:["bool"]},"func?":{exactArity:1,returns:["bool"]},"wild?":{exactArity:1,returns:["bool"]},rem:{minArity:2,numeric:!0},sin:{exactArity:1,numeric:!0},cos:{exactArity:1,numeric:!0},tan:{exactArity:1,numeric:!0},vec:{returns:["vec"]},dict:{returns:["dict"]},len:{exactArity:1,params:[["str","vec","dict"]],returns:["num"]},"to-num":{exactArity:1,params:[["str","num"]],returns:["num","null"]},"to-key":{exactArity:1,params:[["str","num"]],returns:["key"]},"has?":{exactArity:2,params:["str","str"],returns:["bool"]},idx:{minArity:2,maxArity:3,params:[["str","vec"]],returns:["num"]},map:{minArity:2,returns:["vec"]},for:{minArity:2,returns:["vec"]},reduce:{minArity:2,maxArity:3,params:[[],["vec","dict","str"]]},filter:{minArity:2,params:[[],["vec","dict","str"]],returns:["vec"]},remove:{minArity:2,params:[[],["vec","dict","str"]],returns:["vec"]},find:{minArity:2,params:[[],["vec","dict","str"]]},count:{minArity:2,params:[[],["vec","dict","str"]],returns:["num"]},repeat:{minArity:2,params:[[],"num"]},"->":{minArity:2},str:{returns:["str"]},rand:{maxArity:2,numeric:!0,returns:["num"]},"rand-int":{maxArity:2,numeric:!0,returns:["num"]},".":{minArity:1},"..":{minArity:2},"...":{minArity:2},into:{exactArity:2,params:[["vec","dict"],["vec","dict"]],returns:["vec","dict"]},push:{minArity:2,maxArity:3,params:[["vec","dict"]],returns:["vec","dict"]},sect:{minArity:1,maxArity:3,params:[["vec","str"],"num","num"],returns:["vec","str"]},reverse:{exactArity:1,params:[["vec","str"]],returns:["vec","str"]},sort:{minArity:1,maxArity:2,params:[["vec","dict","str"]],returns:["vec"]},keys:{exactArity:1,params:["dict"]},vals:{exactArity:1,params:["dict"]},do:{minArity:1},val:{minArity:1},range:{minArity:1,maxArity:3,numeric:"in only",returns:["vec"]},"empty?":{exactArity:1,params:[["str","vec","dict"]],returns:["bool"]},split:{minArity:1,maxArity:2,params:["str","str"],returns:["vec"]},join:{minArity:1,maxArity:2,params:[["vec","dict","str"],"str"],returns:["str"]},"starts-with?":{exactArity:2,params:["str","str"],returns:["bool"]},"ends-with?":{exactArity:2,params:["str","str"],returns:["bool"]},"lower-case":{exactArity:1,params:["str"],returns:["str"]},"upper-case":{exactArity:1,params:["str"],returns:["str"]},trim:{exactArity:1,params:["str"],returns:["str"]},"trim-start":{exactArity:1,params:["str"],returns:["str"]},"trim-end":{exactArity:1,params:["str"],returns:["str"]},"str*":{exactArity:2,params:["str","num"],returns:["str"]},"char-code":{minArity:1,maxArity:2,params:[["str","num"],"num"],returns:["str","num","null"]},time:{exactArity:0,returns:["num"]},version:{exactArity:0,returns:["num"]},tests:{minArity:0,maxArity:1,params:["bool"],returns:["str"]},symbols:{exactArity:0,returns:["vec"]},eval:{exactArity:1,params:["str"]},reset:{exactArity:0},recur:{}},Q={null:"null",str:"string",num:"number",bool:"boolean",key:"keyword",ref:"reference",vec:"vector",dict:"dictionary",func:"function",clo:"closure",wild:"wildcard"},X=e=>"bool"===e.t?e.v:"null"!==e.t;function Y(e,t,r){const{exactArity:n,maxArity:s,minArity:a}=J[e],o=(n,s)=>[{e:"Arity",m:`${e} needs ${n} argument${1!==s?"s":""}, not ${t}`,errCtx:r}];if(void 0!==n){if(t!==n)return o(`exactly ${n}`,n)}else{if(a&&!s&&t<a)return o(`at least ${a}`,a);if(!a&&s&&t>s)return o(`at most ${s}`,s);if(a&&s&&(t<a||t>s))return o(`between ${a} and ${s}`,s)}}function Z(e,t,r,n=!1){const{params:s,numeric:a}=J[e],u=o(t);if(a){const s=t.findIndex((e=>!!o(e)&&(n?!e.find((e=>"num"===e)):"num"!==e[0])));if(-1===s)return;const a=t[s].map((e=>Q[e])).join(", ");return[ee(`${e} takes numeric arguments only, not ${a}`,r)]}if(!s)return;const i=s.map(((e,r)=>{if(r>=u||!t[r])return!1;const s=t[r];if(c(e)){if(!o(e)||(n?!o(s)||s.some((t=>v(e,t))):1===o(s)&&v(e,s[0])))return!1;const t=s.map((e=>Q[e]));return`argument ${r+1} must be either: ${e.map((e=>Q[e])).join(", ")}, not ${t}`}{if(n?!o(s)||v(s,e):1===o(s)&&e===s[0])return!1;const t=s.map((e=>Q[e]));return`argument ${r+1} must be ${Q[e]}, not ${t}`}})).filter((e=>!!e));return o(i)?i.map((e=>ee(e,r))):void 0}const ee=(e,t)=>({e:"Type",m:e,errCtx:t});function te(e,t){const r=t.map((e=>Q[e])).join(", ");return[ee(`number as operation argument must be string, vector, or dictionary, not ${r}`,e)]}function re(e,t){const r=t.map((e=>Q[e])).join(", ");return[ee(`keyword as operation argument must be dictionary or vector, not ${r}`,e)]}const{concat:ne,has:se,flat:ae,push:oe,slice:ue,splice:ie}=r,{slen:ce,starts:le,sub:pe,substr:me,strIdx:de}=r,{isNum:ve,len:fe,toNum:ye}=r,xe={t:"null",v:void 0},he={t:"bool",v:!1};function be(e,t){const r=[];for(;;){const n=Ae(e,t);if(!fe(n))break;r.push(n)}return r}function ge(e){const t=e.findIndex((e=>"sym"!==e.typ||pe("%#@",e.text)));return ie(e,0,t)}function Ae(e,t,r=!1){if(!fe(e))return[];const{typ:n,text:s,errCtx:a}=e.shift(),o="sym"===n&&pe("#@",s)&&fe(e)&&"("===e[0].typ,u="("===n&&fe(e)&&"fn"===e[0].text;if(o||u){const r=e.map((e=>e.text)),n=u?e.shift():void 0,o=ge(e);if(u){if(")"===e[0].typ)return[{typ:"err",value:"fn requires a body, not just parameters",errCtx:n.errCtx}];e.unshift({typ:"sym",text:"do",errCtx:a}),e.unshift({typ:"(",text:"(",errCtx:a})}const i=Ae(e,u?o.map((e=>e.text)):t,"@"===s),c=i.filter((e=>"err"===e.typ));return fe(c)?c:(u&&i.forEach((e=>{"npa"===e.typ&&(e.typ="upa")})),[{typ:"@"===s?"par":"clo",value:[(u?"(":s)+ue(r,0,fe(r)-fe(e)).join(" "),i],errCtx:a}])}switch(n){case"str":return[{typ:"val",value:{t:"str",v:s},errCtx:a}];case"num":return[{typ:"val",value:{t:"num",v:ye(s)},errCtx:a}];case"sym":if("true"===s||"false"===s)return[{typ:"val",value:{t:"bool",v:"true"===s},errCtx:a}];if("null"===s)return[{typ:"val",value:xe,errCtx:a}];if("_"===s)return[{typ:"val",value:{t:"wild",v:void 0},errCtx:a}];if(le(s,":"))return[{typ:"val",value:{t:"key",v:s},errCtx:a}];if(le(s,"%")&&ve(me(s,1))){const e=ye(me(s,1));return e<0?[{typ:"val",value:xe,errCtx:a}]:[{typ:"upa",value:e,errCtx:a}]}return se(t,s)?[{typ:"npa",value:t.indexOf(s),errCtx:a}]:"args"===s?[{typ:"upa",value:-1,errCtx:a}]:"PI"===s||"E"===s?[{typ:"val",value:{t:"num",v:"PI"===s?3.141592653589793:2.718281828459045},errCtx:a}]:J[s]?[{typ:"val",value:{t:"func",v:s},errCtx:a}]:[{typ:"ref",value:s,errCtx:a}];case"(":return function(e,t,r=!0){const n=e.shift();if(!n)return[];const{typ:s,text:a,errCtx:o}=n;let u=a;const i=(e,t=o)=>[{typ:"err",value:e,errCtx:t}];if("catch"===u){if("("!==e[0].typ)return i("argument 1 must be expression");const r=Ae(e,t),n=ae(be(e,t));return fe(r)&&fe(n)?[...r,{typ:"cat",value:fe(n),errCtx:o},...n]:i("must provide at least 2 arguments")}if("var"===u||"let"===u){const r=[];for(;;){const n=Ae(e,t);if(fe(r)&&!fe(n))return r;const s=Ae(e,t);if(!(fe(r)||fe(n)&&fe(s)))return i("must provide at least one declaration name and value");if(!fe(s))return i("must provide a value after each declaration name");const a=n[0];if("ref"!==a.typ)return[{typ:"err",value:`${u} declaration name must be a symbol`,errCtx:a.errCtx}];oe(r,s),r.push({typ:u,value:a.value,errCtx:o})}}else{if("var!"===u||"let!"===u){const r=[],n=Ae(e,t);if(!fe(n))return i("must provide declaration name");const s=n[0];if("ref"!==s.typ)return i("declaration name must be symbol");const a=Ae(e,t);if(!fe(a))return i("must provide an operation");const c=be(e,t);return r.push({typ:"ref",value:s.value,errCtx:o}),oe(r,ae(c)),oe(r,a),r.push({typ:"exe",value:fe(c)+1,errCtx:o}),r.push({typ:"var!"===u?"var":"let",value:s.value,errCtx:o}),r}if("if"===u||"if!"===u||"when"===u){const r=Ae(e,t);if(!fe(r))return i("must provide condition");const n=r;if("if!"===u&&(n.push({typ:"val",value:{t:"func",v:"!"},errCtx:o}),n.push({typ:"exe",value:1,errCtx:o})),"if"===u||"if!"===u){const r=Ae(e,t);if(!fe(r))return i("must provide a branch");n.push({typ:"if",value:fe(r)+1,errCtx:o}),oe(n,r);const s=Ae(e,t);if(fe(s)){n.push({typ:"jmp",value:fe(s),errCtx:o}),oe(n,s);const r=Ae(e,t);if(fe(r))return i("too many branches; delete this branch",r[0].errCtx)}else n.push({typ:"jmp",value:1,errCtx:o}),n.push({typ:"val",value:xe,errCtx:o})}else{const r=ae(be(e,t));n.push({typ:"if",value:fe(r)+1,errCtx:o}),oe(n,r),n.push({typ:"jmp",value:1,errCtx:o}),n.push({typ:"val",value:xe,errCtx:o})}return n}if("and"===u||"or"===u||"while"===u){const r=be(e,t);let n=r.reduce(((e,t)=>e+fe(t)),0);if(fe(r)<2)return i("requires at least two arguments");const s=[];if("while"===u){s.push({typ:"val",value:xe,errCtx:o}),n+=2;const e=r.shift();return oe(s,e),s.push({typ:"if",value:n-fe(e),errCtx:o}),s.push({typ:"pop",value:fe(r),errCtx:o}),r.forEach((e=>oe(s,e))),s.push({typ:"loo",value:-(n+1),errCtx:o}),s}n+=fe(r),n+=ye("and"===u);const a="and"===u?"if":"or";for(let e=0;e<fe(r);++e)oe(s,r[e]),n-=fe(r[e]),s.push({typ:a,value:n,errCtx:o}),--n;return"and"===u?oe(s,[{typ:"val",value:{t:"bool",v:!0},errCtx:o},{typ:"jmp",value:1,errCtx:o},{typ:"val",value:he,errCtx:o}]):s.push({typ:"val",value:he,errCtx:o}),s}if("match"===u){const r=Ae(e,t);if(!fe(r))return i("must provide condition");const n=be(e,t),s=fe(n)%2?n.pop():[];if(!fe(n))return i("must provide at least one case");let a=n.reduce(((e,t)=>e+fe(t)+1),fe(s)?fe(s)-2:0)+2;const u=r;for(;fe(n)>1;){const e=n.shift(),t=n.shift();oe(u,e),u.push({typ:"mat",value:fe(t)+1,errCtx:o}),oe(u,t),a-=fe(e)+fe(t)+2,u.push({typ:"jmp",value:a,errCtx:o})}return fe(s)?oe(u,s):(u.push({typ:"pop",value:1,errCtx:o}),u.push({typ:"val",value:he,errCtx:o})),u}}const c=[];if("("===s||se(t,a)||pe("%#@",de(a,0))){e.unshift(n);const s=Ae(e,t);r&&c.push({typ:"exp",value:fe(s),errCtx:o}),oe(c,s)}const l=be(e,t),[p,m]=[ae(l),fe(l)];if("return"===u)return[...p,{typ:"ret",value:!!fe(p),errCtx:o}];if(J[u]&&!r){const e=Y(u,m,o);oe(c,e?.map((e=>i(e.m)[0]))??[]),e||2===m&&J[`fast${u}`]&&(u=`fast${u}`)}if(fe(c))c.push({typ:"exe",value:m,errCtx:o});else{const e="num"===s?{t:"num",v:ye(u)}:le(u,":")?{t:"key",v:u}:J[u]?{t:"func",v:u}:"true"===u||"false"===u?{t:"bool",v:"true"===u}:{t:"str",v:u};c.push({typ:"val",value:e,errCtx:o}),c.push({typ:"exe",value:m,errCtx:o})}return[...p,...c]}(e,t,r);case")":case"rem":return[];default:return 0}}function Ce(e){const t=[];for(let r=0,n=fe(e);r<n;++r){const n=e[r];switch(n.typ){case"val":t.push({types:[n.value.t],val:n.value});break;case"exe":{const e=t.pop(),r=ie(t,fe(t)-n.value,n.value),s=e=>r.findIndex((({types:t})=>t&&!e.find((e=>se(t,e))))),a=t=>e.val?e.val.t===t:e.types&&1===fe(e.types)&&e.types[0]===t;if(e.val&&"func"===e.val.t){if("recur"===e.val.v){ie(t,fe(t)-n.value,n.value);break}const s=Z(e.val.v,r.map((e=>e.types??[])),n.errCtx,!0);if(s)return s;const{returns:a,numeric:o}=J[e.val.v];t.push(o&&"in only"!==o?{types:["num"]}:{types:a})}else if(a("num")){const e=s(["str","dict","vec"]);if(-1!==e)return te(n.errCtx,r[e].types);t.push({})}else if(a("key")){const e=s(["dict","vec"]);if(-1!==e)return re(n.errCtx,r[e].types);t.push({})}else a("str")||a("bool")?t.push({}):e.types||e.val||t.push({});break}case"or":t.pop(),t.push({}),r+=n.value;break;case"exp":case"cat":case"var":case"let":case"loo":case"jmp":break;case"clo":case"par":{const e=Ce(n.value[1]);if(e)return e}case"ref":case"npa":case"upa":t.push({});break;case"if":{t.pop(),t.push({});const s=Ce(ue(e,r+1,n.value+1));if(s)return s;r+=n.value-1;break}case"mat":t.pop(),t.pop(),r+=n.value,r+=e[r].value,t.push({});break;case"pop":ie(t,fe(t)-n.value,n.value);break;case"ret":n.value&&t.pop()}}}function ke(e,t){const{tokens:r,stringError:n}=function(e,t,r=!0,n=!1){const s=[];let a=!1,o=!1,u=[0,0],i=!1,c=!1,l=!1,p=1,m=0;for(let d=0,v=ce(e);d<v;++d){const f=de(e,d),y=d+1!==v?de(e,d+1):"";if(++m,l){"\n"===f?(l=!1,++p,m=0):n&&(s[fe(s)-1].text+=f);continue}if(o){o=!1,a&&(s[fe(s)-1].text+={n:"\n",t:"\t",'"':'"'}[f]||`\\${f}`);continue}if("\\"===f){o=!0;continue}if('"'===f){(a=!a)&&(u=[p,m],s.push({typ:"str",text:"",errCtx:{sourceId:t,line:p,col:m}})),c=i=!1;continue}const x=pe(" \t\n\r,",f);if(!a&&x){c=i=!1,"\n"===f&&(++p,m=0);continue}if(!a&&";"===f){l=!0,n&&s.push({typ:"rem",text:"",errCtx:{sourceId:t,line:p,col:m}});continue}const h={sourceId:t,line:p,col:m},b=e=>pe("0123456789",e),g=pe("()[]{}",f);if(c&&!b(f)&&(c="."===f&&!pe(s[fe(s)-1].text,"."),c||g||x||(i=!0,s[fe(s)-1].typ="sym")),i&&g&&(i=!1),!a&&!i&&!c){if(g){const e={"[":"(","{":"(","(":"(",")":")","}":")","]":")"}[f];s.push({typ:e,text:r?e:f,errCtx:h}),r&&("["===f?s.push({typ:"sym",text:"vec",errCtx:h}):"{"===f&&s.push({typ:"sym",text:"dict",errCtx:h}));continue}c=b(f)||"."===f&&b(y)||"-"===f&&(b(y)||"."===y),i=!c;const e=i?"sym":"num";s.push({typ:e,text:"",errCtx:h})}s[fe(s)-1].text+=f}return{tokens:s,stringError:a?u:void 0}}(e,t),s=function(e,t){const r=fe(t)?t[0].errCtx.sourceId:"",n=[],s=(e,t)=>n.push({e:"Parse",m:e,errCtx:t});if(e){const[t,a]=e;return s("unmatched double quotation marks",{sourceId:r,line:t,col:a}),n}const a=e=>fe(t.filter((({typ:t})=>t===e))),[o,u]=[a("("),a(")")];{const[e,n]=function(e,t,r){const n=r>=t,[s,a]=[n?"(":")",n?")":"("],o=n?1:-1;for(let t=fe(e),r=n?0:t-1,u=0;n?r<t:r>=0;r+=o){const{typ:t,errCtx:{line:n,col:o}}=e[r];if(u+=ye(t===s)-ye(t===a),u<0)return[n,o]}return[0,0]}(t,o,u);e+n&&s("unmatched parenthesis",{sourceId:r,line:e,col:n})}let i;for(let e=0,r=!1;e<fe(t);++e){if(r&&")"===t[e].typ){i=t[e];break}r="("===t[e].typ}return i&&s("empty expression forbidden",i.errCtx),n}(n,r);if(fe(s))return{errors:s,funcs:{}};const a=function(e){const t=e=>fe(e)>1&&"sym"===e[1].typ&&"function"===e[1].text,r=e.filter((e=>t(e))),n=ae(e.filter((e=>!t(e)))),s=r.map((e=>({name:e[2].text,tokens:ue(e,3),errCtx:e[2].errCtx})));return fe(n)?ne(s,[{name:"entry",tokens:n,errCtx:n[0].errCtx}]):s}(function(e){const t=[[]];let r=0;return e.forEach((e=>{t[fe(t)-1].push(e),r+=ye("("===e.typ)-ye(")"===e.typ),0===r&&t.push([])})),t}(r)).map((e=>function({name:e,tokens:t},r){const n=(e,t=r)=>["err",{e:"Parse",m:e,errCtx:t}],s=ge(t);if("("===e)return n("nameless function");if(!fe(s)&&!fe(t))return n("empty function body");if(fe(t)&&")"===t[0].typ){if(!fe(s))return n("empty function body");t.unshift(s.pop())}fe(s)&&!fe(t)&&t.push(s.pop());const a=[];for(;fe(t);)oe(a,Ae(t,s.map((e=>e.text))));for(let e=0,t=fe(a);e<t;e++){const t=a[e];if("err"===t.typ)return n(t.value,t.errCtx)}return["func",{name:e,ins:a}]}(e,{sourceId:t,line:e.errCtx.line,col:e.errCtx.col}))),o=[],u=[];a.forEach((e=>{"err"===e[0]?u.push(e[1]):o.push(e[1])})),oe(u,ae(o.map((e=>Ce(e.ins)??[]))));const i={};return o.forEach((e=>i[e.name]=e)),{errors:u,funcs:i}}function we(e,t){return e.dict.has(t)?{kind:"val",value:e.dict.get(t)}:{kind:"err",err:`"${t} not found.`}}function $e(e,t,r){e.dict.set(t,r)}function Be(e,t,r){switch(t){case"test.function":e.output+=r[0].v+"\n";break;default:return{kind:"err",err:`operation ${t} does not exist`}}return{kind:"val",value:{t:"null",v:void 0}}}const Ie=[{name:"Hello, world!",code:'"Hello, world!"',out:"Hello, world!"},{name:"Say Hello, world!",code:'(print "Hello, world!")',out:"Hello, world!\nnull"},{name:"1 + 1 = 2",code:"(+ 1 1)",out:"2"},{name:"Negate 1 = -1",code:"(- 1)",out:"-1"},{name:"(1+1)+1+(1+1) = 5",code:"(+ (+ 1 1) 1 (+ 1 1))",out:"5"},{name:"Conditional head",code:"((if true + -) 12 9 1)",out:"22"},{name:"Whens",code:'[(when 123 (print "hi") 234) (when false (print "bye"))]',out:"hi\n[234 null]"},{name:"match and wildcard",code:'(match [1 2]\n             [0 0] (print "hello")\n             [0 2] (print "bye")\n             [1 _] "hey")',out:"hey"},{name:"Cond number head",code:"((if false 1 2) [:a :b :c])",out:":c"},{name:"and & short-circuit",code:"[(and true (if true null 1) true) (and 1 2 3)]",out:"[false true]"},{name:"or & short-circuit",code:'[(or true (print "hello") 1) (or false (print-str "-> ") 1)]',out:"-> [true 1]"},{name:"String retrieve",code:'(2 "Hello")',out:"l"},{name:"Vector retrieve",code:"(2 [:a :b :c :d])",out:":c"},{name:"Key as operation",code:'[(:age {:name "Patrick" :age 24}) (:abc [:a :abc :c])]',out:"[24 :abc]"},{name:"Dictionary as op 1",code:'({"name" "Patrick" "age" 24} "age")',out:"24"},{name:"Dictionary as op 2",code:'({"name" "Patrick"} "age" 24)',out:'{"name" "Patrick", "age" 24}'},{name:"Equalities",code:'[(= 1 2 1)\n            (!= 1 2 1)\n            (= "Hello" "hello")\n            (!= "world" "world")\n            (= [0 [1]] [0 [1]])]',out:"[false 1 false false [0 [1]]]"},{name:"Define and retrieve",code:"(var a 1) a",out:"1"},{name:"Define and add",code:"(var a 1) (inc a)",out:"2"},{name:"Define op and call",code:"(var f +) (f 2 2)",out:"4"},{name:"Define vec and call",code:"(var f [1]) (f 1)",out:"1"},{name:"Define num and call",code:"(var f 1) (f [:a :b :c])",out:":b"},{name:"Apply op to var",code:"(var a 10) (var! a + 10)",out:"20"},{name:"Apply op to let",code:"(let a 10) (let! a (if true + -) (+ 2 3) 5)",out:"20"},{name:"Print simple vector",code:"[1 2 3]",out:"[1 2 3]"},{name:"Boolean select",code:"[(true 1 2) (false 1)]",out:"[1 null]"},{name:"Sum vector of numbers",code:"[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]",out:"[6 9]"},{name:"Sum vectors of numbers",code:"(map + [1 2 3] [1 2 3 4])",out:"[2 4 6]"},{name:"Filter by integer",code:'(filter 2 [[1] [:a :b :c] "hello" "hi"])',out:'[[:a :b :c] "hello"]'},{name:"Comments, short decimal",code:';((print "Hello")\n           .456',out:"0.456"},{name:"Dictionary into vector",code:"(into [1 2] {3 4 5 6})",out:"[1 2 [3 4] [5 6]]"},{name:"Vector into dictionary",code:"(into {[0] 1 [2] 3} [[0] 2])",out:"{[0] 2, [2] 3}"},{name:"While loop",code:"(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))",out:"543210"},{name:"Catch error",code:'(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print "hi"))',out:"Type"},{name:"Define with no call",code:'(function func (print "Nothing."))'},{name:"Call greet func",code:'(function greeting (print "Hello!")) (greeting)',out:"Hello!\nnull"},{name:"Call const value func",code:"(function const 123) (const)",out:"123"},{name:"Call identity funcs",code:"(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]",out:"[123 456]"},{name:"Call greet with name",code:'(function greeting name (print "Hello, " name "!"))\n           (greeting "Patrick")',out:"Hello, Patrick!\nnull"},{name:"Call with too few args",code:"(function func a b c [a b c]) (func 1 2)",out:"[1 2 null]"},{name:"Define func and call",code:"(function func a b (+ a b)) (var f func) (f 2 2)",out:"4"},{name:"Anonymous parameters",code:"(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)",out:"false"},{name:"Call parameter",code:'(function f x (x "hello")) (f print)',out:"hello\nnull"},{name:"Let and retrieve",code:"(function f (let a 1) a) (f)",out:"1"},{name:"Let num op and call",code:"(function f (let n 0) (n [1])) (f)",out:"1"},{name:"Explicit return",code:"(function f (return 123) (print 456)) (f)",out:"123"},{name:"Closure 1",code:"(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)",out:"20"},{name:"Closure 2",code:"(filter #(or (.. = args) (even? %)) (range 10) 5)",out:"[0 2 4 5 6 8]"},{name:"Closure 3",code:"(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]",out:"[20 40]"},{name:"Func returns closure",code:"(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)",out:"4"},{name:"Dictionary closure",code:"(function f x #{x 2})\n           (let closure (f :a))\n           (closure)",out:"{:a 2}"},{name:"Vector closure",code:"(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)",out:"[1 2 3]"},{name:"Closure as head",code:"(#[% %1 %2] 1 2 3)",out:"[1 2 3]"},{name:"Partial closure 1",code:"(@[] 1 2 3)",out:"[1 2 3]"},{name:"Partial closure 2",code:"(@((do +) 2) 2)",out:"4"},{name:"Parameterised closure 1",code:"((fn a b (+ a b)) 2 2)",out:"4"},{name:"Parameterised closure 2",code:"((fn a b (print-str a b) (+ a b)) 2 2)",out:"224"},{name:"Parameterised closure 3",code:"(((fn (fn 1))))",out:"1"},{name:"Threading",code:"(-> 1 inc @(+ 10))",out:"12"},{name:"String instead of number",code:'(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 "hi")',out:"4",err:["Type"]},{name:"Reference non-existing",code:"x",err:["Reference"]},{name:"Expired let retrieve",code:"(function f (let a 1) a) (f) a",err:["Reference"]},{name:"Call non-existing",code:"(x)",err:["External"]},{name:"Call budget",code:"(function f (f)) (f)",err:["Budget"]},{name:"Loop budget",code:"(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))",err:["Budget"]},{name:"Range budget",code:"(range 10000)",err:["Budget"]},{name:"Fibonacci 13",code:"(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)",out:"233"},{name:"dedupe (recur)",code:"(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])",out:"[1 2 3]"},{name:"frequencies",code:'(function frequencies list\n             (reduce #(push % %1 (inc (or (% %1) 0))) list {}))\n           (frequencies "12121212")',out:'{"1" 4, "2" 4}'},{name:"set get",code:"[($globals.time_offset 5.5) $globals.time_offset]",out:"[5.5 5.5]"},{name:"exe",code:"(test.function 123)",out:"123\nnull"},{name:"Empty parens",code:"()",err:["Parse"]},{name:"Imbalanced parens 1",code:'(print ("hello!")',err:["Parse"]},{name:"Imbalanced parens 2",code:'print "hello!")',err:["Parse"]},{name:"Imbalanced quotes",code:'(print "Hello)',err:["Parse"]},{name:"Function as op",code:"(function)",err:["Parse"]},{name:"Function without name",code:"(function (+))",err:["Parse"]},{name:"Function without body",code:"(function func)",err:["Parse"]},{name:"Variable not symbol",code:"(var 1 2)",err:["Parse"]},{name:"Parser type error 1",code:"(function f (+ 1 :a))",err:["Type"]},{name:"Parser type error 2",code:"(function f (+ 1 (into {} {})))",err:["Type"]},{name:"Parser type error 3",code:"(function f (if true (into 2 {}) (+ 2 2)))",err:["Type"]}],Pe=({v:e})=>e,Ee=({v:e})=>e,je=({v:e})=>e,Me=({v:e})=>e,qe=(e,t)=>o(e)===o(t)&&!e.some(((e,r)=>!Ne(e,t[r]))),Ne=(e,t)=>{if("wild"===e.t||"wild"===t.t)return!0;if(e.t!==t.t)return!1;switch(e.t){case"null":return!0;case"bool":case"num":return e.v===t.v;case"vec":return qe(e.v,je(t));case"dict":{const r=Me(t);return o(e.v.keys)===o(r.keys)&&qe(e.v.keys,r.keys)}case"str":case"ref":case"key":case"func":return Ee(e)===Ee(t);case"clo":return e.v.name===t.v.name}return 0},Se=e=>e.reduce(((e,t)=>e+He(t)),""),He=e=>{const t=e=>"str"===e.t?`"${e.v}"`:He(e);if("clo"===e.t)return e.v.name;if("vec"===e.t)return`[${e.v.map(t).join(" ")}]`;if("dict"===e.t){const{keys:r,vals:n}=e.v,[s,a]=[r.map(t),n.map(t)];return`{${s.map(((e,t)=>`${e} ${a[t]}`)).join(", ")}}`}return"null"===e.t?"null":"wild"===e.t?"_":`${e.v}`},De=e=>"vec"===e.t?s(e.v):"str"===e.t?[...e.v].map((e=>({t:"str",v:e}))):"dict"===e.t?e.v.keys.map(((t,r)=>({t:"vec",v:[t,e.v.vals[r]]}))):[],Oe=e=>{o(e)%2==1&&e.pop();const t=e.filter(((e,t)=>t%2==0)),r=e.filter(((e,t)=>t%2==1)),n=[],s=[];return t.forEach(((e,t)=>{const a=n.findIndex((t=>Ne(t,e)));-1===a?(n.push(e),s.push(r[t])):s[a]=r[t]})),{t:"dict",v:{keys:n,vals:s}}},Te=({keys:e,vals:t},r)=>{const n=e.findIndex((e=>Ne(e,r)));return-1===n?{t:"null",v:void 0}:t[n]},_e=({keys:e,vals:t},r,n)=>{const[a,o]=[s(e),s(t)],u=e.findIndex((e=>Ne(e,r)));return-1!==u?o[u]=n:(a.push(r),o.push(n)),{keys:a,vals:o}},{abs:Fe,cos:Re,sin:Le,tan:Ve,sign:We,sqrt:Ke,floor:ze,ceil:Ue,round:Ge,max:Je,min:Qe}=r,{logn:Xe,log2:Ye,log10:Ze}=r,{concat:et,has:tt,flat:rt,push:nt,reverse:st,slice:at,splice:ot,sortBy:ut}=r,{ends:it,slen:ct,starts:lt,sub:pt,subIdx:mt,substr:dt,upperCase:vt,lowerCase:ft}=r,{trim:yt,trimStart:xt,trimEnd:ht,charCode:bt,codeChar:gt,strIdx:At}=r,{getTimeMs:Ct,randInt:kt,randNum:wt}=r,{isNum:$t,len:Bt,objKeys:It,range:Pt,toNum:Et}=r,jt={};let Mt,qt=[],Nt=[];const St=e=>qt.push({t:"bool",v:e}),Ht=e=>qt.push({t:"num",v:e}),Dt=(e="")=>qt.push({t:"str",v:e}),Ot=(e=[])=>qt.push({t:"vec",v:e}),Tt=e=>qt.push({t:"dict",v:e}),_t=()=>qt.push({t:"null",v:void 0}),Ft=e=>qt.push({t:"func",v:e});function Rt(e,t,r,n=!0){const u=[{e:"Arity",m:`${Q[t.t]} as op requires one sole argument`,errCtx:r}];if("str"===t.t||"func"===t.t){const i=t.v;return J[i]?J[i].external?e=>{const t=jt[i](e);if("err"===t.kind)return[{e:"External",m:t.err,errCtx:r}];qt.push(t.value)}:t=>function(e,t,r,n,u){const i=e=>[ee(e,n)];if(u){const r=Y(e,Bt(t),n);if(r)return r}{const r=Z(e,t.map((e=>[e.t])),n);if(r)return r}switch(e){case"str":return void qt.push({t:"str",v:Se(t)});case"print":case"print-str":return r.print(Se(t),"print"===e),void _t();case"vec":return void Ot(t);case"dict":return void qt.push(Oe(t));case"len":return void Ht("str"===t[0].t?ct(t[0].v):"vec"===t[0].t?Bt(t[0].v):Bt(Me(t[0]).keys));case"to-num":return void($t(t[0].v)?Ht(Et(t[0].v)):_t());case"to-key":return void qt.push({t:"key",v:`:${He(t[0])}`});case"!":return void St(!X(t[0]));case"=":case"!=":for(let r=1,n=Bt(t);r<n;++r)if(Ne(t[r-1],t[r])!==("="===e))return void St(!1);return void qt.push(t[0]);case"-":return void Ht(1===Bt(t)?-Pe(t[0]):t.map(Pe).reduce(((e,t)=>e-t)));case"**":return void Ht(Pe(t[0])**(1===Bt(t)?2:Pe(t[1])));case"+":return void Ht(t.map(Pe).reduce(((e,t)=>e+t)));case"*":return void Ht(t.map(Pe).reduce(((e,t)=>e*t)));case"/":return void Ht(t.map(Pe).reduce(((e,t)=>e/t)));case"//":return void Ht(t.map(Pe).reduce(((e,t)=>ze(e/t))));case"fast=":case"fast!=":return Ne(t[0],t[1])!==("fast="===e)?void St(!1):void qt.push(t[0]);case"fast-":return void Ht(t[0].v-t[1].v);case"fast+":return void Ht(t[0].v+t[1].v);case"fast*":return void Ht(t[0].v*t[1].v);case"fast/":return void Ht(t[0].v/t[1].v);case"fast//":return void Ht(ze(t[0].v/t[1].v));case"fast<":return void St(t[0].v<t[1].v);case"fast>":return void St(t[0].v>t[1].v);case"fast<=":return void St(t[0].v<=t[1].v);case"fast>=":return void St(t[0].v>=t[1].v);case"rem":return void Ht(t.map(Pe).reduce(((e,t)=>e%t)));case"min":return void Ht(t.map(Pe).reduce(((e,t)=>Qe(e,t))));case"max":return void Ht(t.map(Pe).reduce(((e,t)=>Je(e,t))));case"<":case">":case"<=":case">=":for(let r=1,n=Bt(t);r<n;++r){const[n,s]=[t[r-1].v,t[r].v];if("<"===e&&n>=s||">"===e&&n<=s||"<="===e&&n>s||">="===e&&n<s)return void St(!1)}return void St(!0);case"inc":return void Ht(t[0].v+1);case"dec":return void Ht(t[0].v-1);case"abs":return void Ht(Fe(t[0].v));case"round":if(2===Bt(t)){const e=10**t[1].v;Ht(Ge(t[0].v*e)/e)}else Ht(Ge(t[0].v));return;case"sin":case"cos":case"tan":case"sqrt":case"floor":case"ceil":case"logn":case"log2":case"log10":return void Ht({sin:Le,cos:Re,tan:Ve,sqrt:Ke,floor:ze,ceil:Ue,logn:Xe,log2:Ye,log10:Ze}[e](Pe(t[0])));case"and":return void St(t.every(X));case"or":return void St(t.some(X));case"xor":return void(X(t[0])!==X(t[1])?qt.push(X(t[0])?t[0]:t[1]):St(!1));case"&":case"|":case"^":case"<<":case">>":case">>>":const[u,c]=[Pe(t[0]),Pe(t[1])];return void Ht("&"===e?u&c:"|"===e?u|c:"^"===e?u^c:"<<"===e?u<<c:">>"===e?u>>c:u>>>c);case"~":return void Ht(~Pe(t[0]));case"odd?":case"even?":return void St(Pe(t[0])%2==("odd?"===e?1:0));case"pos?":case"neg?":case"zero?":{const r=Pe(t[0]);return void St("pos?"===e?r>0:"neg?"===e?r<0:!r)}case"null?":case"num?":case"bool?":case"str?":case"dict?":case"vec?":case"key?":case"func?":case"wild?":return void St("null?"===e&&"null"===t[0].t||"num?"===e&&"num"===t[0].t||"bool?"===e&&"bool"===t[0].t||"str?"===e&&"str"===t[0].t||"dict?"===e&&"dict"===t[0].t||"vec?"===e&&"vec"===t[0].t||"key?"===e&&"key"===t[0].t||"func?"===e&&("func"===t[0].t||"clo"===t[0].t)||"wild?"===e&&"wild"===t[0].t);case"has?":return void St(pt(Ee(t[0]),Ee(t[1])));case"idx":{let e=-1;if("str"===t[0].t){if("str"!==t[1].t)return i("strings can only contain strings");if(!(Bt(t)<3)){const e=t[0].v.split("");return e[Pe(t[2])]=t[1].v,void Dt(e.join(""))}e=mt(t[0].v,t[1].v)}else if("vec"===t[0].t){if(!(Bt(t)<3)){const e=at(t[0].v);return e[Pe(t[2])]=t[1],void Ot(e)}e=t[0].v.findIndex((e=>Ne(e,t[1])))}return void(-1===e?_t():Ht(e))}case"map":case"for":case"reduce":case"filter":case"remove":case"find":case"count":{const s=Rt(r,t.shift(),n);if("map"===e||"for"===e){const e=t.findIndex((({t:e})=>"vec"!==e&&"str"!==e&&"dict"!==e));if(-1!==e)return i(`argument ${e+2} must be either: string, vector, dictionary, not ${Q[t[e].t]}`)}if("for"===e){const e=t.map(De),a=e.map(Bt),o=a.map(((e,t)=>at(a,0,t+1).reduce(((e,t)=>e*t))));o.unshift(1);const u=o.pop();if(u>r.loopBudget)return[{e:"Budget",m:"would exceed loop budget",errCtx:n}];const i=[];for(let t=0;t<u;++t){const r=o.map(((e,r)=>ze(t/e%a[r]))),n=s(e.map(((e,t)=>e[r[t]])));if(n)return n;i.push(qt.pop())}return void Ot(i)}if("map"===e){const e=t.map(De),r=Qe(...e.map(Bt)),n=[];for(let t=0;t<r;++t){const r=s(e.map((e=>e[t])));if(r)return r;n.push(qt.pop())}return void Ot(n)}const a=De(t.shift());if("reduce"!==e){const r="remove"===e,n="find"===e,o="count"===e,u=[];let i=0;for(let e=0,c=Bt(a);e<c;++e){const c=s([a[e],...t]);if(c)return c;const l=X(qt.pop());if(o)i+=l?1:0;else if(n){if(l)return void qt.push(a[e])}else l!==r&&u.push(a[e])}switch(e){case"count":return void Ht(i);case"find":return void _t()}return void Ot(u)}if(!Bt(a))return void(Bt(t)?qt.push(t[0]):Ot());if(Bt(a)<2&&!Bt(t))return void nt(qt,a);let o=(Bt(t)?t:a).shift();for(let e=0,t=Bt(a);e<t;++e){const t=s([o,a[e]]);if(t)return t;o=qt.pop()}return void qt.push(o)}case"repeat":{const e=t.shift(),s=[],a=Pe(t[0]);if(a>r.rangeBudget)return[{e:"Budget",m:"would exceed range budget",errCtx:n}];if(r.rangeBudget-=a,"func"===e.t||"clo"===e.t){const t=Rt(r,e,n);for(let e=0;e<a;++e){const r=t([{t:"num",v:e}]);if(r)return r;s.push(qt.pop())}}else for(let t=0;t<a;++t)s.push(e);return void Ot(s)}case"->":qt.push(t.shift());for(let e=0,s=Bt(t);e<s;++e){const s=Rt(r,t[e],n)([qt.pop()]);if(s)return s}return;case"rand-int":case"rand":{const r=Bt(t),[n,s]=[r<2?0:Pe(t[0]),0===r?1+Et("rand-int"===e):Pe(1===r?t[0]:t[1])];Ht("rand-int"===e?kt(n,s):wt(n,s))}return;case"do":case"val":return void qt.push("do"===e?t.pop():t.shift());case".":case"..":case"...":{const s=Rt(r,t.shift(),n);if("."===e)return s(t);let a=t;if(".."===e)a=rt(t.map((e=>"vec"===e.t?e.v:[e])));else{const e=a.pop();nt(a,rt(["vec"===e.t?e.v:[e]]))}return s(a)}case"into":if("vec"===t[0].t)Ot(et(t[0].v,De(t[1])));else if("vec"===t[1].t)qt.push(Oe(et(rt(De(t[0]).map(je)),t[1].v)));else{const{keys:e,vals:r}=Me(t[0]),n=Me(t[1]);Tt({keys:et(e,n.keys),vals:et(r,n.vals)})}return;case"push":if("vec"===t[0].t){const e=t[0].v;if(Bt(t)<3)Ot(et(e,[t[1]]));else{const r=Pe(t[2]);Ot(et(et(at(e,0,r),[t[1]]),at(e,r)))}}else Bt(t)<3?qt.push((({keys:e,vals:t},r)=>{const[n,o]=[s(e),s(t)],u=e.findIndex((e=>Ne(e,r)));return-1!==u&&(a(n,u,1),a(o,u,1)),{t:"dict",v:{keys:n,vals:o}}})(Me(t[0]),t[1])):Tt(_e(Me(t[0]),t[1],t[2]));return;case"sect":{const e=t[0],r="vec"===e.t?Bt(e.v):ct(Ee(e));let n=0,s=r;switch(Bt(t)){case 1:n=1;break;case 2:{const e=Pe(t[1]);e<0?s+=e:n+=e;break}case 3:{const e=Pe(t[1]),a=Pe(t[2]);n=e<0?r+e+(a<0?a:0):n+e,s=(a<0?s:n)+a;break}}return n=Je(n,0),s=Qe(s,r),n>s?void("vec"===e.t?Ot:Dt)():void("vec"===e.t?Ot(at(e.v,n,s)):Dt(dt(Ee(t[0]),n,s-n)))}case"reverse":return void("str"===t[0].t?Dt(Se(st(De(t[0])))):Ot(st(De(t[0]))));case"sort":{const e=De(t[0]);if(!Bt(e))return void Ot();const s=[];if(1===Bt(t))nt(s,e.map((e=>[e,e])));else{const a=Rt(r,t.pop(),n);for(let t=0,r=Bt(e);t<r;++t){const r=a([e[t]]);if(r)return r;s.push([e[t],qt.pop()])}}const a=s[0][1].t;return s.some((([e,{t}])=>t!==a||!tt(["num","str"],t)))?i("can only sort by all number or all string"):("num"===s[0][1].t?ut(s,(([e,t],[r,n])=>Pe(t)>Pe(n)?1:-1)):ut(s,(([e,t],[r,n])=>Ee(t)>Ee(n)?1:-1)),void Ot(s.map((([e])=>e))))}case"range":{const[e,s,a]=t.map(Pe),o=a&&a<0&&e<s,[u,i]=Bt(t)>1?o?[s-1,e-1]:[e,s]:[0,e],c=We((i-u)*(a||1))*(a||1),l=Ue(Fe((i-u)/c));if(!l)return void Ot([]);if(l>r.rangeBudget)return[{e:"Budget",m:"would exceed range budget",errCtx:n}];r.rangeBudget-=l;const p=Pt(l).map((e=>e*c+u));return void Ot(p.map((e=>({t:"num",v:e}))))}case"empty?":return void St(!Bt(De(t[0])));case"keys":case"vals":return void Ot(Me(t[0])["keys"===e?"keys":"vals"]);case"split":return void Ot(Ee(t[0]).split(Bt(t)>1?Ee(t[1]):" ").map((e=>({t:"str",v:e}))));case"join":return void Dt(De(t[0]).map(He).join(Bt(t)>1?Ee(t[1]):" "));case"starts-with?":case"ends-with?":return void St(("starts-with?"===e?lt:it)(Ee(t[0]),Ee(t[1])));case"upper-case":case"lower-case":case"trim":case"trim-start":case"trim-end":return void Dt(("upper-case"===e?vt:"lower-case"===e?ft:"trim"===e?yt:"trim-start"===e?xt:ht)(Ee(t[0])));case"str*":{const e=Ee(t[0]);return void Dt(Pt(Je(Ue(Pe(t[1])),0)).map((t=>e)).join(""))}case"char-code":if("str"===t[0].t){const e=Bt(t)>1?Pe(t[1]):0,r=Ee(t[0]);ct(r)<=e||e<0?_t():Ht(bt(At(r,e)))}else Dt(gt(Pe(t[0])));return;case"time":return void Ht(Ct());case"version":return void Ht(20211202);case"tests":return void Dt(function(e,t=!0){const r=[];for(let t=0;t<o(Ie);++t){const{name:n,code:s,err:a,out:o}=Ie[t],u={dict:new Map,output:""},i={funcs:{},vars:{}},c=S(),l=e({get:e=>we(u,e),set:(e,t)=>$e(u,e,t),exe:(e,t)=>Be(u,e,t),print(e,t){u.output+=e+(t?"\n":"")},env:i,loopBudget:1e4,rangeBudget:1e3,callBudget:1e3,recurBudget:1e4},s,"testing",!0),p="errors"===l.kind?l.errors:[],m=(a||[]).join()===p.map((({e})=>e)).join(),d=!o||w(u.output)===o,v=S()-c,[f,y,x,h,b]=[I(`${t+1}`,3),I(n,24),I(`${v}ms`,6),d||o+"\t=/=\t"+w(u.output),m||p.map((({e,m:t,errCtx:{line:r,col:n}})=>`${e} ${r}:${n}: ${t}`))];r.push({okErr:m,okOut:d,elapsedMs:v,display:`${f} ${y} ${x} ${h} ${b}`})}const n=r.reduce(((e,{elapsedMs:t})=>e+t),0),s=o(r.filter((({okOut:e,okErr:t})=>e&&t)));return h(r.filter((e=>!t||!e.okOut||!e.okErr)).map((e=>e.display)),[`---- ${s}/${o(r)} tests passed in ${n}ms.`])}(Kt,!(Bt(t)&&X(t[0]))).join("\n"));case"symbols":return void Ot(function(e,t=!0){let r=t?["function","let","var","if","if!","while"]:[];nt(r,["args","PI","E"]),r=et(r,It(J)),r=et(r,It(e.env.funcs)),r=et(r,It(e.env.vars));const n=["entry"];return r=r.filter((e=>!tt(n,e))),ut(r,((e,t)=>e>t?1:-1))}(r,!1).map((e=>({t:"str",v:e}))));case"eval":{delete r.env.funcs.entry;const e=Bt(qt),s=`${n.sourceId} eval`,a=Wt(r,Ee(t[0]),s);return a?[{e:"Eval",m:"error within evaluated code",errCtx:n},...a]:void(e===Bt(qt)&&_t())}case"recur":return void(Mt=t);case"reset":return r.env.vars={},r.env.funcs={},Nt=[],void _t()}return[{e:"Unexpected",m:"operation doesn't exist",errCtx:n}]}(i,t,e,r,n):i in e.env.funcs?t=>Vt(e,e.env.funcs[i],t):i in e.env.vars?Rt(e,e.env.vars[i],r):i in Nt[Bt(Nt)-1]?Rt(e,Nt[Bt(Nt)-1][i],r):lt(i,"$")?t=>{if(!Bt(t))return u;const n=e.set(dt(i,1),t[0]);return qt.push(t[0]),n?[{e:"External",m:n,errCtx:r}]:void 0}:t=>{const n=e.exe(i,t);if("val"!==n.kind)return[{e:"External",m:n.err,errCtx:r}];qt.push(n.value)}}if("clo"===t.t)return r=>Vt(e,t.v,r);if("key"===t.t)return e=>{if(!Bt(e))return u;if("dict"===e[0].t)qt.push(Te(Me(e[0]),t));else{if("vec"!==e[0].t)return re(r,[e[0].t]);{const r=je(e[0]).find((e=>Ne(e,t)));qt.push(r??{t:"null",v:void 0})}}};if("num"===t.t){const e=ze(t.v);return t=>{if(!Bt(t))return u;const n=t[0];if("str"!==n.t&&"vec"!==n.t&&"dict"!==n.t)return te(r,[n.t]);const s=De(n);Fe(e)>=Bt(s)?_t():e<0?qt.push(s[Bt(s)+e]):qt.push(s[e])}}if("vec"===t.t){const{v:e}=t;return t=>{if(!Bt(t))return u;const r=e.find((e=>Ne(e,t[0])));r?qt.push(r):_t()}}if("dict"===t.t){const e=t.v;return t=>{if(1===Bt(t))qt.push(Te(e,t[0]));else{if(2!==Bt(t))return[{e:"Arity",m:"dictionary as operation takes one or two arguments only",errCtx:r}];Tt(_e(e,t[0],t[1]))}}}if("bool"===t.t){const e=t.v;return t=>{if(!Bt(t)||Bt(t)>2)return[{e:"Arity",m:"boolean as operation takes one or two arguments only",errCtx:r}];qt.push(e?t[0]:Bt(t)>1?t[1]:{t:"null",v:void 0})}}return e=>[{e:"Operation",m:`${He(t)} is an invalid operation`,errCtx:r}]}function Lt(e){const t=(e,t,r)=>_e(e,{t:"key",v:t},r);return e.map((({e,m:r,errCtx:n})=>{let s=t({keys:[],vals:[]},":e",{t:"str",v:e});return s=t(s,":m",{t:"str",v:r}),s=t(s,":line",{t:"num",v:n.line}),s=t(s,":col",{t:"num",v:n.col}),{t:"dict",v:s}}))}function Vt(e,t,r,n=!1){--e.callBudget,n||Nt.push({});const s=Bt(qt);for(let n=0,a=Bt(t.ins);n<a;++n){const o=t.ins[n],{errCtx:u}=t.ins[n],i=e.loopBudget<1;if(i||e.callBudget<1)return[{e:"Budget",m:(i?"looped":"called")+" too many times",errCtx:u}];switch(o.typ){case"val":qt.push(o.value);break;case"var":e.env.vars[o.value]=qt[Bt(qt)-1];break;case"let":Nt[Bt(Nt)-1][o.value]=qt[Bt(qt)-1];break;case"npa":case"upa":{const e=o.value;-1===e?Ot(r):Bt(r)<=e?_t():qt.push(r[e])}break;case"ref":{const t=o.value;if(J[t])Ft(t);else if(lt(t,"$")){const r=e.get(dt(t,1));if("err"===r.kind)return[{e:"External",m:r.err,errCtx:u}];qt.push(r.value)}else if(t in e.env.vars)qt.push(e.env.vars[t]);else if(t in Nt[Bt(Nt)-1])qt.push(Nt[Bt(Nt)-1][t]);else{if(!(t in e.env.funcs))return[{e:"Reference",m:`"${t}" did not exist`,errCtx:u}];Ft(t)}}break;case"exe":{const s=Rt(e,qt.pop(),u,!1),a=o.value,i=s(ot(qt,Bt(qt)-a,a));if(i){const e=at(t.ins,n).findIndex((e=>"cat"===e.typ));if(-1!==e){n+=e,Nt[Bt(Nt)-1].errors={t:"vec",v:Lt(i)};break}return i}if(Mt){if(Nt[Bt(Nt)-1]={},n=-1,o.value,r=Mt,Mt=void 0,--e.recurBudget,!e.recurBudget)return[{e:"Budget",m:"recurred too many times",errCtx:u}];break}}break;case"or":X(qt[Bt(qt)-1])?n+=o.value:qt.pop();break;case"mat":{const e=qt[Bt(qt)-2];Ne(e,qt.pop())?qt.pop():n+=o.value;break}case"if":X(qt.pop())||(n+=o.value);break;case"jmp":case"cat":n+=o.value;break;case"loo":n+=o.value,--e.loopBudget;break;case"pop":ot(qt,Bt(qt)-o.value,o.value);break;case"ret":o.value?ot(qt,s,Bt(qt)-s-1):_t(),n=a;break;case"clo":case"par":{const t=o.value[0];let n=o.value[1];const s=({typ:e,value:t},r)=>"ref"===e&&!n.find((e=>"let"===e.typ&&e.value===t))||"npa"===e||"val"===e&&r+1!==Bt(n)&&"exe"===n[r+1].typ,a={name:"",ins:n.map(((e,t)=>{if(t+1===Bt(n))return e;const r="val"===e.typ&&"str"===e.value.t&&"exe"===n[t+1].typ&&Nt[Bt(Nt)-1][e.value.v];return r?{typ:"val",value:r}:e})).filter(s)},i=Vt(e,a,r,!0);if(i)return i;const c=Bt(a.ins),l=ot(qt,Bt(qt)-c,c);if(n=n.map(((e,t)=>s(e,t)?{typ:"val",value:l.shift(),errCtx:u}:e)),"par"===o.typ){const{value:e,errCtx:t}=n.pop();if(Bt(n)>0&&"exe"===n[Bt(n)-1].typ){const e=n.findIndex((e=>"exp"===e.typ)),t=ot(n,e,Bt(n)-e);nt(t,n),n=t}else n.unshift(n.pop());n.push({typ:"upa",value:-1,errCtx:t}),n.push({typ:"val",value:{t:"str",v:"..."},errCtx:t}),n.push({typ:"exe",value:e+2,errCtx:t})}qt.push({t:"clo",v:{name:t,ins:n}})}}}n||(Nt.pop(),ot(qt,s,Bt(qt)-(s+1)))}function Wt(e,t,r){const n=ke(t,r);return Bt(n.errors)?n.errors:(e.env.funcs={...e.env.funcs,...n.funcs},"entry"in e.env.funcs?Vt(e,e.env.funcs.entry,[]):void 0)}function Kt(e,t,r,n=!1){const{callBudget:s,loopBudget:a,recurBudget:o,rangeBudget:u}=e,i=Wt(e,t,r);[e.callBudget,e.recurBudget]=[s,o],[e.loopBudget,e.rangeBudget]=[a,u],delete e.env.funcs.entry;const c=qt.pop();return[qt,Nt]=[[],[]],n&&!i&&c&&e.print(He(c),!0),i?{kind:"errors",errors:i}:c?{kind:"val",value:c}:{kind:"empty"}}const zt=new Map,Ut=/[\[\]\(\) ,]/;function Gt(e,t){const r=S().toString();zt.set(r,t);const n=Kt(e,t,r,!0);if("errors"!==n.kind)return[];let s=[];return n.errors.forEach((({e,m:t,errCtx:{line:r,col:n,sourceId:a}})=>{const o=zt.get(a);if(!o)return void s.push({type:"message",text:`${e} Error: line ${r} col ${n}: ${t}\n`});const i=o.split("\n")[r-1],c=l(i,n-1).split(Ut)[0],p=$(l(i,0,n-1));if(s.push({type:"message",text:I(`${r}`,4)+p}),c){const e=l(i,n-1+u(c));s.push({type:"error",text:c}),s.push({type:"message",text:`${e}\n`})}else{const e=l(i,n);s.push({type:"error",text:i[n-1]}),s.push({type:"message",text:`${e}\n`})}s.push({type:"message",text:`${e} Error: ${t}.\n`})})),s}window.insitux=t.invoker})();
//# sourceMappingURL=insitux.js.map