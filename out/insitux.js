(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.d(t,{invoker:()=>Rt});var r={};e.r(r),e.d(r,{abs:()=>N,ceil:()=>V,concat:()=>h,cos:()=>O,ends:()=>y,flat:()=>x,floor:()=>L,getTimeMs:()=>H,has:()=>d,isArray:()=>u,isNum:()=>c,len:()=>o,log10:()=>z,log2:()=>K,logn:()=>_,lowerCase:()=>C,max:()=>q,min:()=>S,objKeys:()=>M,padEnd:()=>B,push:()=>b,randInt:()=>E,randNum:()=>P,range:()=>j,reverse:()=>A,round:()=>R,sign:()=>W,sin:()=>D,slen:()=>i,slice:()=>s,sortBy:()=>g,splice:()=>a,sqrt:()=>F,starts:()=>f,strIdx:()=>v,sub:()=>p,subIdx:()=>m,substr:()=>l,tan:()=>T,toNum:()=>n,trim:()=>w,trimEnd:()=>I,trimStart:()=>$,upperCase:()=>k});const n=e=>Number(e),s=(e,t,r)=>e.slice(t,r),a=(e,t,r)=>e.splice(t,r),o=e=>e.length,i=e=>e.length,c=e=>!Number.isNaN(Number(e)),u=e=>Array.isArray(e),l=(e,t,r)=>e.substring(t,t+(r??e.length)),v=(e,t)=>e[t],p=(e,t)=>e.includes(t),m=(e,t)=>e.indexOf(t),d=(e,t)=>e.includes(t),f=(e,t)=>e.startsWith(t),y=(e,t)=>e.endsWith(t),x=e=>e.flat(),h=(e,t)=>e.concat(t),b=(e,t)=>e.push(...t),g=(e,t)=>e.sort(t),A=e=>e.reverse(),C=e=>e.toLowerCase(),k=e=>e.toUpperCase(),w=e=>e.trim(),$=e=>e.trimStart(),I=e=>e.trimEnd(),B=(e,t)=>e.padEnd(t),P=(e,t)=>e+Math.random()*(t-e),E=(e,t)=>Math.floor(P(e,t)),j=e=>[...Array(e).keys()],M=e=>Object.keys(e),H=()=>(new Date).getTime(),N=Math.abs,S=Math.min,q=Math.max,D=Math.sin,O=Math.cos,T=Math.tan,F=Math.sqrt,R=Math.round,L=Math.floor,V=Math.ceil,W=Math.sign,_=Math.log,K=Math.log2,z=Math.log10,U={print:{returns:["null"]},"print-str":{returns:["null"]},"!":{exactArity:1,returns:["bool"]},"=":{minArity:2},"!=":{minArity:2},"+":{minArity:2,numeric:!0},"-":{minArity:1,numeric:!0},"*":{minArity:2,numeric:!0},"/":{minArity:2,numeric:!0},"//":{minArity:2,numeric:!0},"**":{minArity:1,numeric:!0},"<":{minArity:2,numeric:!0},">":{minArity:2,numeric:!0},"<=":{minArity:2,numeric:!0},">=":{minArity:2,numeric:!0},"fast=":{exactArity:2},"fast!=":{exactArity:2},"fast+":{exactArity:2,numeric:!0},"fast-":{exactArity:2,numeric:!0},"fast*":{exactArity:2,numeric:!0},"fast/":{exactArity:2,numeric:!0},"fast//":{exactArity:2,numeric:!0},"fast<":{exactArity:2,numeric:!0},"fast>":{exactArity:2,numeric:!0},"fast<=":{exactArity:2,numeric:!0},"fast>=":{exactArity:2,numeric:!0},inc:{exactArity:1,numeric:!0},dec:{exactArity:1,numeric:!0},min:{minArity:2,numeric:!0},max:{minArity:2,numeric:!0},abs:{exactArity:1,numeric:!0},sqrt:{exactArity:1,numeric:!0},round:{minArity:1,maxArity:2,numeric:!0},floor:{exactArity:1,numeric:!0},ceil:{exactArity:1,numeric:!0},logn:{exactArity:1,numeric:!0},log2:{exactArity:1,numeric:!0},log10:{exactArity:1,numeric:!0},and:{minArity:1},or:{minArity:1},"odd?":{exactArity:1,numeric:"in only",returns:["bool"]},"even?":{exactArity:1,numeric:"in only",returns:["bool"]},"pos?":{exactArity:1,numeric:"in only",returns:["bool"]},"neg?":{exactArity:1,numeric:"in only",returns:["bool"]},"zero?":{exactArity:1,numeric:"in only",returns:["bool"]},"null?":{exactArity:1,returns:["bool"]},"num?":{exactArity:1,returns:["bool"]},"bool?":{exactArity:1,returns:["bool"]},"str?":{exactArity:1,returns:["bool"]},"vec?":{exactArity:1,returns:["bool"]},"dict?":{exactArity:1,returns:["bool"]},"key?":{exactArity:1,returns:["bool"]},"func?":{exactArity:1,returns:["bool"]},rem:{minArity:2,numeric:!0},sin:{exactArity:1,numeric:!0},cos:{exactArity:1,numeric:!0},tan:{exactArity:1,numeric:!0},vec:{returns:["vec"]},dict:{returns:["dict"]},len:{exactArity:1,types:[["str","vec","dict"]],returns:["num"]},"to-num":{exactArity:1,types:[["str","num"]],returns:["num","null"]},"to-key":{exactArity:1,types:[["str","num"]],returns:["key"]},"has?":{exactArity:2,types:["str","str"],returns:["bool"]},idx:{minArity:2,maxArity:3,types:[["str","vec"]],returns:["num"]},map:{minArity:2,returns:["vec"]},for:{minArity:2,returns:["vec"]},reduce:{minArity:2,maxArity:3},filter:{minArity:2,returns:["vec"]},remove:{minArity:2,returns:["vec"]},find:{minArity:2},count:{minArity:2,returns:["num"]},str:{returns:["str"]},rand:{maxArity:2,numeric:!0,returns:["num"]},"rand-int":{maxArity:2,numeric:!0,returns:["num"]},while:{},"..":{minArity:2},"...":{minArity:2},into:{exactArity:2,types:[["vec","dict"],["vec","dict"]],returns:["vec","dict"]},push:{minArity:2,maxArity:3,types:[["vec","dict"]],returns:["vec","dict"]},sect:{minArity:1,maxArity:3,types:[["vec","str"],"num","num"],returns:["vec","str"]},reverse:{exactArity:1,types:[["vec","str"]],returns:["vec","str"]},sort:{minArity:1,maxArity:2,types:["vec"],returns:["vec"]},keys:{exactArity:1,types:["dict"]},vals:{exactArity:1,types:["dict"]},do:{minArity:1},val:{minArity:1},range:{minArity:1,maxArity:3,numeric:!0},"empty?":{exactArity:1,types:[["str","vec","dict"]],returns:["bool"]},split:{minArity:1,maxArity:2,types:["str","str"],returns:["vec"]},join:{minArity:1,maxArity:2,types:["vec","str"],returns:["str"]},"starts-with?":{exactArity:2,types:["str","str"],returns:["bool"]},"ends-with?":{exactArity:2,types:["str","str"],returns:["bool"]},"lower-case":{exactArity:1,types:["str"],returns:["str"]},"upper-case":{exactArity:1,types:["str"],returns:["str"]},trim:{exactArity:1,types:["str"],returns:["str"]},"trim-start":{exactArity:1,types:["str"],returns:["str"]},"trim-end":{exactArity:1,types:["str"],returns:["str"]},"str*":{exactArity:2,types:["str","num"],returns:["str"]},time:{exactArity:0,returns:["num"]},version:{exactArity:0,returns:["num"]},tests:{minArity:0,maxArity:1,types:["bool"],returns:["str"]},symbols:{exactArity:0,returns:["vec"]},eval:{exactArity:1,types:["str"]},reset:{exactArity:0}},G={null:"null",str:"string",num:"number",bool:"boolean",key:"keyword",ref:"reference",vec:"vector",dict:"dictionary",func:"function",clo:"closure"},J=(e,t)=>({e:"Type",m:e,errCtx:t});function Q(e,t){const r=t.map((e=>G[e])).join(", ");return[J(`number as operation argument must be string, vector, or dictionary, not ${r}`,e)]}function X(e,t){const r=t.map((e=>G[e])).join(", ");return[J(`keyword as operation argument must be dictionary or vector, not ${r}`,e)]}const{concat:Y,has:Z,flat:ee,push:te,slice:re,splice:ne}=r,{slen:se,starts:ae,sub:oe,substr:ie,strIdx:ce}=r,{isNum:ue,len:le,toNum:ve,isArray:pe}=r,me={t:"null",v:void 0};function de(e,t){const r=[];for(;;){const n=xe(e,t);if(!le(n))break;te(r,n)}return r}function fe(e,t,r){const{exactArity:n,maxArity:s,minArity:a}=U[e],o=(n,s)=>[{e:"Arity",m:`${e} needs ${n} argument${1!==s?"s":""}, not ${t}`,errCtx:r}];if(void 0!==n){if(t!==n)return o(`exactly ${n}`,n)}else{if(a&&!s&&t<a)return o(`at least ${a}`,a);if(!a&&s&&t>s)return o(`at most ${s}`,s);if(a&&s&&(t<a||t>s))return o(`between ${a} and ${s}`,s)}}function ye(e,t,r,n=!1){const{types:s,numeric:a}=U[e],o=le(t);if(a){const s=t.findIndex((e=>!!le(e)&&(n?!e.find((e=>"num"===e)):"num"!==e[0])));if(-1===s)return;const a=t[s].map((e=>G[e])).join(", ");return[J(`${e} takes numeric arguments only, not ${a}`,r)]}if(!s)return;const i=s.map(((e,r)=>{if(r>=o||!t[r])return!1;const s=t[r];if(pe(e)){if(n?!le(s)||s.some((t=>Z(e,t))):1===le(s)&&Z(e,s[0]))return!1;const t=s.map((e=>G[e]));return`argument ${r+1} must be either: ${e.map((e=>G[e])).join(", ")}, not ${t}`}{if(n?!le(s)||Z(s,e):1===le(s)&&e===s[0])return!1;const t=s.map((e=>G[e]));return`argument ${r+1} must be ${G[e]}, not ${t}`}})).filter((e=>!!e));return le(i)?i.map((e=>J(e,r))):void 0}function xe(e,t,r=!0){if(!le(e))return[];const{typ:n,text:s,errCtx:a}=e.shift();if("sym"===n&&oe("#@",s)&&le(e)&&"("===e[0].typ){const r=e.map((e=>e.text)),n=xe(e,t,"@"!==s),o=n.find((e=>"err"===e.typ));return o?[o]:[{typ:"#"===s?"clo":"par",value:[re(r,0,le(r)-le(e)).join(" "),n],errCtx:a}]}switch(n){case"str":return[{typ:"val",value:{t:"str",v:s},errCtx:a}];case"num":return[{typ:"val",value:{t:"num",v:ve(s)},errCtx:a}];case"sym":if("true"===s||"false"===s)return[{typ:"val",value:{t:"bool",v:"true"===s},errCtx:a}];if("null"===s)return[{typ:"val",value:me,errCtx:a}];if(ae(s,":"))return[{typ:"val",value:{t:"key",v:s},errCtx:a}];if(ae(s,"%")&&ue(ie(s,1))){const e=ve(ie(s,1));return e<0?[{typ:"val",value:me,errCtx:a}]:[{typ:"upa",value:e,errCtx:a}]}return Z(t,s)?[{typ:"npa",value:t.indexOf(s),errCtx:a}]:"args"===s?[{typ:"upa",value:-1,errCtx:a}]:"PI"===s||"E"===s?[{typ:"val",value:{t:"num",v:"PI"===s?3.141592653589793:2.718281828459045},errCtx:a}]:U[s]?[{typ:"val",value:{t:"func",v:s},errCtx:a}]:[{typ:"ref",value:s,errCtx:a}];case"(":return function(e,t,r=!0){const n=e.shift();if(!n)return[];const{typ:s,text:a,errCtx:o}=n;let i=a;const c=e=>[{typ:"err",value:e,errCtx:o}];if("catch"===i){if("("!==e[0].typ)return c("argument 1 must be expression");const r=xe(e,t),n=de(e,t);return le(r)&&le(n)?[...r,{typ:"cat",value:le(n),errCtx:o},...n]:c("must provide at least 2 arguments")}if("var"===i||"let"===i){const r=[];for(;;){const n=xe(e,t);if(le(r)&&!le(n))return r;const s=xe(e,t);if(!(le(r)||le(n)&&le(s)))return c("must provide at least one declaration name and value");if(!le(s))return c("must provide a value after each declaration name");const a=n[0];if("ref"!==a.typ)return c("declaration name must be symbol");te(r,s),r.push({typ:i,value:a.value,errCtx:o})}}else{if("if"===i||"when"===i){const r=xe(e,t);if(!le(r))return c("must provide condition");const n=r;if("if"===i){const r=xe(e,t);if(!le(r))return c("must provide a branch");n.push({typ:"if",value:le(r)+1,errCtx:o}),te(n,r);const s=xe(e,t);if(le(s)){if(n.push({typ:"jmp",value:le(s),errCtx:o}),te(n,s),le(xe(e,t)))return c("too many branches")}else n.push({typ:"jmp",value:1,errCtx:o}),n.push({typ:"val",value:me,errCtx:o})}else{const r=de(e,t);n.push({typ:"if",value:le(r)+1,errCtx:o}),te(n,r),n.push({typ:"jmp",value:1,errCtx:o}),n.push({typ:"val",value:me,errCtx:o})}return n}if("and"===i||"or"===i||"while"===i||"recur"===i){const r=[];let n=0;for(;;){const s=xe(e,t);if(!le(s))break;r.push(s),n+=le(s)}if("recur"===i)return[...ee(r),{typ:"rec",value:le(r),errCtx:o}];if(le(r)<2)return c("requires at least two arguments");const s=[];if("while"===i){s.push({typ:"val",value:me,errCtx:o}),n+=2;const e=r.shift();return te(s,e),s.push({typ:"if",value:n-le(e),errCtx:o}),s.push({typ:"pop",value:le(r),errCtx:o}),r.forEach((e=>te(s,e))),s.push({typ:"loo",value:-(n+1),errCtx:o}),s}n+=le(r),n+=ve("and"===i);const a="and"===i?"if":"or";for(let e=0;e<le(r);++e)te(s,r[e]),n-=le(r[e]),s.push({typ:a,value:n,errCtx:o}),--n;return"and"===i?te(s,[{typ:"val",value:{t:"bool",v:!0},errCtx:o},{typ:"jmp",value:1,errCtx:o},{typ:"val",value:{t:"bool",v:!1},errCtx:o}]):s.push({typ:"val",value:{t:"bool",v:!1},errCtx:o}),s}}const u=[];let l=0;if("("===s||Z(t,a)||oe("%#@",ce(a,0))){e.unshift(n);const r=xe(e,t);te(u,r)}const v=[];for(;le(e);){const r=xe(e,t);if(!le(r))break;++l,te(v,r)}if("return"===i)return[...v,{typ:"ret",value:!!le(v),errCtx:o}];if(U[i]&&r){const e=fe(i,l,o);te(u,e?.map((e=>c(e.m)[0]))??[]),e||2===l&&U[`fast${i}`]&&(i=`fast${i}`)}if(le(u))u.push({typ:"exe",value:l,errCtx:o});else{const e="num"===s?{t:"num",v:ve(i)}:ae(i,":")?{t:"key",v:i}:U[i]?{t:"func",v:i}:"true"===i||"false"===i?{t:"bool",v:"true"===i}:{t:"str",v:i};u.push({typ:"val",value:e,errCtx:o}),u.push({typ:"exe",value:l,errCtx:o})}return[...v,...u]}(e,t,r);case")":case"rem":return[];default:return 0}}function he(e){const t=[];for(let r=0,n=le(e);r<n;++r){const n=e[r];switch(n.typ){case"val":t.push({types:[n.value.t],val:n.value});break;case"exe":{const e=t.pop(),r=ne(t,le(t)-n.value,n.value),s=e=>r.findIndex((({types:t})=>t&&!e.find((e=>Z(t,e))))),a=t=>e.val?e.val.t===t:e.types&&1===le(e.types)&&e.types[0]===t;if(e.val&&"func"===e.val.t){const s=ye(e.val.v,r.map((e=>e.types??[])),n.errCtx,!0);if(s)return s;const{returns:a,numeric:o}=U[e.val.v];t.push(o&&"in only"!==o?{types:["num"]}:{types:a})}else if(a("num")){const e=s(["str","dict","vec"]);if(-1!==e)return Q(n.errCtx,r[e].types)}else if(a("key")){const e=s(["dict","vec"]);if(-1!==e)return X(n.errCtx,r[e].types)}t.push({});break}case"cat":case"or":case"var":case"let":case"loo":case"jmp":break;case"clo":case"par":{const e=he(n.value[1]);if(e)return e}case"ref":case"npa":case"upa":t.push({});break;case"if":{t.pop(),t.push({});const s=he(re(e,r+1,n.value+1));if(s)return s;r+=n.value-1;break}case"pop":case"rec":ne(t,le(t)-n.value,n.value);break;case"ret":n.value&&t.pop()}}}function be(e,t){const{tokens:r,stringError:n}=function(e,t,r=!0,n=!1){const s=[];let a=!1,o=!1,i=[0,0],c=!1,u=!1,l=!1,v=1,p=0;for(let m=0,d=se(e);m<d;++m){const f=ce(e,m),y=m+1!==d?ce(e,m+1):"";if(++p,l){"\n"===f?(l=!1,++v,p=0):n&&(s[le(s)-1].text+=f);continue}if(o){o=!1,a&&(s[le(s)-1].text+={n:"\n",t:"\t",'"':'"'}[f]||`\\${f}`);continue}if("\\"===f){o=!0;continue}if('"'===f){(a=!a)&&(i=[v,p],s.push({typ:"str",text:"",errCtx:{invocationId:t,line:v,col:p}})),u=c=!1;continue}const x=oe(" \t\n\r,",f);if(!a&&x){u=c=!1,"\n"===f&&(++v,p=0);continue}if(!a&&";"===f){l=!0,n&&s.push({typ:"rem",text:"",errCtx:{invocationId:t,line:v,col:p}});continue}const h={invocationId:t,line:v,col:p},b=e=>oe("0123456789",e),g=oe("()[]{}",f);if(u&&!b(f)&&(u="."===f&&!oe(s[le(s)-1].text,"."),u||g||x||(c=!0,s[le(s)-1].typ="sym")),c&&g&&(c=!1),!a&&!c&&!u){if(g){const e={"[":"(","{":"(","(":"(",")":")","}":")","]":")"}[f];s.push({typ:e,text:r?e:f,errCtx:h}),r&&("["===f?s.push({typ:"sym",text:"vec",errCtx:h}):"{"===f&&s.push({typ:"sym",text:"dict",errCtx:h}));continue}u=b(f)||"."===f&&b(y)||"-"===f&&(b(y)||"."===y),c=!u;const e=c?"sym":"num";s.push({typ:e,text:"",errCtx:h})}s[le(s)-1].text+=f}return{tokens:s,stringError:a?i:void 0}}(e,t),s=function(e,t){const r=le(t)?t[0].errCtx.invocationId:"",n=[],s=(e,t)=>n.push({e:"Parse",m:e,errCtx:t}),a=e=>le(t.filter((({typ:t})=>t===e))),[o,i]=[a("("),a(")")];{const[e,n]=function(e,t,r){const n=r>=t,[s,a]=[n?"(":")",n?")":"("],o=n?1:-1;for(let t=le(e),r=n?0:t-1,i=0;n?r<t:r>=0;r+=o){const{typ:t,errCtx:{line:n,col:o}}=e[r];if(i+=ve(t===s)-ve(t===a),i<0)return[n,o]}return[0,0]}(t,o,i);e+n&&s("unmatched parenthesis",{invocationId:r,line:e,col:n})}if(e){const[t,n]=e;s("unmatched double quotation marks",{invocationId:r,line:t,col:n})}let c;for(let e=0,r=!1;e<le(t);++e){if(r&&")"===t[e].typ){c=t[e];break}r="("===t[e].typ}return c&&s("empty expression forbidden",c.errCtx),n}(n,r);if(le(s))return{errors:s,funcs:{}};const a=function(e){const t=e=>le(e)>1&&"sym"===e[1].typ&&"function"===e[1].text,r=e.filter((e=>t(e))),n=ee(e.filter((e=>!t(e)))),s=r.map((e=>({name:e[2].text,tokens:re(e,3),errCtx:e[2].errCtx})));return le(n)?Y(s,[{name:"entry",tokens:n,errCtx:n[0].errCtx}]):s}(function(e){const t=[[]];let r=0;return e.forEach((e=>{t[le(t)-1].push(e),r+=ve("("===e.typ)-ve(")"===e.typ),0===r&&t.push([])})),t}(r)).map((e=>function({name:e,tokens:t},r){const n=(e,t=r)=>["err",{e:"Parse",m:e,errCtx:t}],s=t.findIndex((e=>"sym"!==e.typ||oe("%#@",e.text))),a=re(t,0,s),o=re(t,s);if("("===e)return n("nameless function");if(!le(a)&&!le(o))return n("empty function body");if(le(o)&&")"===o[0].typ){if(!le(a))return n("empty function body");o.unshift(a.pop())}le(a)&&!le(o)&&o.push(a.pop());const i=[];for(;le(o);)te(i,xe(o,a.map((e=>e.text))));const c=i.find((e=>"err"===e.typ));return c?n(c.value,c.errCtx):["func",{name:e,ins:i}]}(e,{invocationId:t,line:e.errCtx.line,col:e.errCtx.col}))),o=[],i=[];a.forEach((e=>{"err"===e[0]?i.push(e[1]):o.push(e[1])})),te(i,ee(o.map((e=>he(e.ins)??[]))));const c={};return o.forEach((e=>c[e.name]=e)),{errors:i,funcs:c}}async function ge(e,t){return e.dict.has(t)?{value:e.dict.get(t),err:void 0}:{value:{t:"null",v:void 0},err:`"${t} not found.`}}async function Ae(e,t,r){e.dict.set(t,r)}async function Ce(e,t,r){const n={t:"null",v:void 0};switch(t){case"print-str":e.output+=r[0].v;break;case"print":case"test.function":e.output+=r[0].v+"\n";break;default:return{value:n,err:`operation ${t} does not exist`}}return{value:n,err:void 0}}const ke=[{name:"Hello, world!",code:'"Hello, world!"',out:"Hello, world!"},{name:"Say Hello, world!",code:'(print "Hello, world!")',out:"Hello, world!\nnull"},{name:"1 + 1 = 2",code:"(+ 1 1)",out:"2"},{name:"Negate 1 = -1",code:"(- 1)",out:"-1"},{name:"(1+1)+1+(1+1) = 5",code:"(+ (+ 1 1) 1 (+ 1 1))",out:"5"},{name:"Conditional head",code:"((if true + -) 12 9 1)",out:"22"},{name:"Whens",code:'[(when 123 (print "hi") 234) (when false (print "bye"))]',out:"hi\n[234 null]"},{name:"Cond number head",code:"((if false 1 2) [:a :b :c])",out:":c"},{name:"and & short-circuit",code:"[(and true (if true null 1) true) (and 1 2 3)]",out:"[false true]"},{name:"or & short-circuit",code:'[(or true (print "hello") 1) (or false (print-str "-> ") 1)]',out:"-> [true 1]"},{name:"String retrieve",code:'(2 "Hello")',out:"l"},{name:"Vector retrieve",code:"(2 [:a :b :c :d])",out:":c"},{name:"Key as operation",code:'[(:age {:name "Patrick" :age 24}) (:abc [:a :abc :c])]',out:"[24 :abc]"},{name:"Dictionary as op 1",code:'({"name" "Patrick" "age" 24} "age")',out:"24"},{name:"Dictionary as op 2",code:'({"name" "Patrick"} "age" 24)',out:'{"name" "Patrick", "age" 24}'},{name:"Equalities",code:'[(= 1 2 1)\n            (!= 1 2 1)\n            (= "Hello" "hello")\n            (!= "world" "world")\n            (= [0 [1]] [0 [1]])]',out:"[false 1 false false [0 [1]]]"},{name:"Define and retrieve",code:"(var a 1) a",out:"1"},{name:"Define and add",code:"(var a 1) (inc a)",out:"2"},{name:"Define op and call",code:"(var f +) (f 2 2)",out:"4"},{name:"Define vec and call",code:"(var f [1]) (f 1)",out:"1"},{name:"Define num and call",code:"(var f 1) (f [:a :b :c])",out:":b"},{name:"Print simple vector",code:"[1 2 3]",out:"[1 2 3]"},{name:"Boolean select",code:"[(true 1 2) (false 1)]",out:"[1 null]"},{name:"Sum vector of numbers",code:"[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]",out:"[6 9]"},{name:"Sum vectors of numbers",code:"(map + [1 2 3] [1 2 3 4])",out:"[2 4 6]"},{name:"Filter by integer",code:'(filter 2 [[1] [:a :b :c] "hello" "hi"])',out:'[[:a :b :c] "hello"]'},{name:"Comments, short decimal",code:';((print "Hello")\n           .456',out:"0.456"},{name:"Dictionary into vector",code:"(into [1 2] {3 4 5 6})",out:"[1 2 [3 4] [5 6]]"},{name:"Vector into dictionary",code:"(into {[0] 1 [2] 3} [[0] 2])",out:"{[0] 2, [2] 3}"},{name:"While loop",code:"(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))",out:"543210"},{name:"Catch error",code:'(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print "hi"))',out:"Type"},{name:"Define with no call",code:'(function func (print "Nothing."))'},{name:"Call greet func",code:'(function greeting (print "Hello!")) (greeting)',out:"Hello!\nnull"},{name:"Call const value func",code:"(function const 123) (const)",out:"123"},{name:"Call identity funcs",code:"(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]",out:"[123 456]"},{name:"Call greet with name",code:'(function greeting name (print "Hello, " name "!"))\n           (greeting "Patrick")',out:"Hello, Patrick!\nnull"},{name:"Call with too few args",code:"(function func a b c [a b c]) (func 1 2)",out:"[1 2 null]"},{name:"Define func and call",code:"(function func a b (+ a b)) (var f func) (f 2 2)",out:"4"},{name:"Anonymous parameters",code:"(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)",out:"false"},{name:"Call parameter",code:'(function f x (x "hello")) (f print)',out:"hello\nnull"},{name:"Let and retrieve",code:"(function f (let a 1) a) (f)",out:"1"},{name:"Let num op and call",code:"(function f (let n 0) (n [1])) (f)",out:"1"},{name:"Explicit return",code:"(function f (return 123) (print 456)) (f)",out:"123"},{name:"Closure 1",code:"(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)",out:"20"},{name:"Closure 2",code:"(filter #(or (.. = args) (even? %)) (range 10) 5)",out:"[0 2 4 5 6 8]"},{name:"Closure 3",code:"(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]",out:"[20 40]"},{name:"Func returns closure",code:"(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)",out:"4"},{name:"Dictionary closure",code:"(function f x #{x 2})\n           (let closure (f :a))\n           (closure)",out:"{:a 2}"},{name:"Vector closure",code:"(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)",out:"[1 2 3]"},{name:"Closure as head",code:"(#[% %1 %2] 1 2 3)",out:"[1 2 3]"},{name:"Partial closure 1",code:"(@[] 1 2 3)",out:"[1 2 3]"},{name:"String instead of number",code:'(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 "hi")',out:"4",err:["Type"]},{name:"Reference non-existing",code:"x",err:["Reference"]},{name:"Expired let retrieve",code:"(function f (let a 1) a) (f) a",err:["Reference"]},{name:"Call non-existing",code:"(x)",err:["External"]},{name:"Call budget",code:"(function f (f)) (f)",err:["Budget"]},{name:"Loop budget",code:"(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))",err:["Budget"]},{name:"Range budget",code:"(range 10000)",err:["Budget"]},{name:"Fibonacci 13",code:"(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)",out:"233"},{name:"dedupe (recur)",code:"(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])",out:"[1 2 3]"},{name:"set get",code:"[($globals.time_offset 5.5) $globals.time_offset]",out:"[5.5 5.5]"},{name:"exe",code:"(test.function 123)",out:"123\nnull"},{name:"Empty parens",code:"()",err:["Parse"]},{name:"Imbalanced parens 1",code:'(print ("hello!")',err:["Parse"]},{name:"Imbalanced parens 2",code:'print "hello!")',err:["Parse"]},{name:"Imbalanced quotes 1",code:'(print "Hello)',err:["Parse","Parse"]},{name:"Imbalanced quotes 2",code:'print "Hello")',err:["Parse"]},{name:"Function as op",code:"(function)",err:["Parse"]},{name:"Function without name",code:"(function (+))",err:["Parse"]},{name:"Function without body",code:"(function func)",err:["Parse"]},{name:"Variable not symbol",code:"(var 1 2)",err:["Parse"]},{name:"Parser type error 1",code:"(function f (+ 1 :a))",err:["Type"]},{name:"Parser type error 2",code:"(function f (+ 1 (into {} {})))",err:["Type"]},{name:"Parser type error 3",code:"(function f (if true (into 2 {}) (+ 2 2)))",err:["Type"]}],{abs:we,cos:$e,sin:Ie,tan:Be,sign:Pe,sqrt:Ee,floor:je,ceil:Me,round:He,max:Ne,min:Se}=r,{logn:qe,log2:De,log10:Oe}=r,{concat:Te,has:Fe,flat:Re,push:Le,reverse:Ve,slice:We,splice:_e,sortBy:Ke}=r,{ends:ze,slen:Ue,starts:Ge,sub:Je,subIdx:Qe,substr:Xe,upperCase:Ye,lowerCase:Ze}=r,{trim:et,trimStart:tt,trimEnd:rt}=r,{getTimeMs:nt,randInt:st,randNum:at}=r,{isNum:ot,len:it,objKeys:ct,range:ut,toNum:lt}=r,vt=e=>{const t=e=>"str"===e.t?`"${e.v}"`:vt(e);if("clo"===e.t)return`#${e.v.name}`;if("vec"===e.t)return`[${e.v.map(t).join(" ")}]`;if("dict"===e.t){const{keys:r,vals:n}=e.v,[s,a]=[r.map(t),n.map(t)];return`{${s.map(((e,t)=>`${e} ${a[t]}`)).join(", ")}}`}return"null"===e.t?"null":`${e.v}`};let pt=[],mt=[];const dt=e=>pt.push({t:"bool",v:e}),ft=e=>pt.push({t:"num",v:e}),yt=(e="")=>pt.push({t:"str",v:e}),xt=(e=[])=>pt.push({t:"vec",v:e}),ht=e=>pt.push({t:"dict",v:e}),bt=()=>pt.push({t:"null",v:void 0}),gt=e=>pt.push({t:"func",v:e}),At=({v:e})=>e,Ct=({v:e})=>e,kt=({v:e})=>e,wt=({v:e})=>e,$t=e=>"bool"===e.t?e.v:"null"!==e.t,It=e=>"vec"===e.t?We(e.v):"str"===e.t?[...e.v].map((e=>({t:"str",v:e}))):"dict"===e.t?e.v.keys.map(((t,r)=>({t:"vec",v:[t,e.v.vals[r]]}))):[],Bt=e=>e.reduce(((e,t)=>e+vt(t)),""),Pt=e=>{it(e)%2==1&&e.pop();const t=e.filter(((e,t)=>t%2==0)),r=e.filter(((e,t)=>t%2==1)),n=[],s=[];return t.forEach(((e,t)=>{const a=n.findIndex((t=>jt(t,e)));-1===a?(n.push(e),s.push(r[t])):s[a]=r[t]})),{t:"dict",v:{keys:n,vals:s}}},Et=(e,t)=>it(e)===it(t)&&!e.some(((e,r)=>!jt(e,t[r]))),jt=(e,t)=>{if(e.t!==t.t)return!1;switch(e.t){case"null":return!0;case"bool":case"num":return e.v===t.v;case"vec":return Et(e.v,kt(t));case"dict":{const r=wt(t);return it(e.v.keys)===it(r.keys)&&Et(e.v.keys,r.keys)}case"str":case"ref":case"key":case"func":return Ct(e)===Ct(t);case"clo":return e.v.name===t.v.name}return 0},Mt=({keys:e,vals:t},r)=>{const n=e.findIndex((e=>jt(e,r)));return-1===n?{t:"null",v:void 0}:t[n]},Ht=({keys:e,vals:t},r,n)=>{const[s,a]=[We(e),We(t)],o=e.findIndex((e=>jt(e,r)));return-1!==o?a[o]=n:(s.push(r),a.push(n)),{keys:s,vals:a}};function Nt(e,t,r,n=!0){const s=[{e:"Arity",m:"one argument required",errCtx:r}];if("str"===t.t||"func"===t.t){const a=t.v;return U[a]?t=>async function(e,t,r,n,s){const a=e=>[J(e,n)];if(s){const r=fe(e,it(t),n);if(r)return r}{const r=ye(e,t.map((e=>[e.t])),n);if(r)return r}switch(e){case"str":return void pt.push({t:"str",v:Bt(t)});case"print":case"print-str":return r.exe(e,[{t:"str",v:Bt(t)}]),void bt();case"vec":return void xt(t);case"dict":return void pt.push(Pt(t));case"len":return void ft("str"===t[0].t?Ue(t[0].v):"vec"===t[0].t?it(t[0].v):it(wt(t[0]).keys));case"to-num":return void(ot(t[0].v)?ft(lt(t[0].v)):bt());case"to-key":return void pt.push({t:"key",v:`:${vt(t[0])}`});case"!":return void dt(!$t(t[0]));case"=":case"!=":for(let r=1,n=it(t);r<n;++r)if(jt(t[r-1],t[r])!==("="===e))return void dt(!1);return void pt.push(t[0]);case"-":return void ft(1===it(t)?-At(t[0]):t.map(At).reduce(((e,t)=>e-t)));case"**":return void ft(At(t[0])**(1===it(t)?2:At(t[1])));case"+":return void ft(t.map(At).reduce(((e,t)=>e+t)));case"*":return void ft(t.map(At).reduce(((e,t)=>e*t)));case"/":return void ft(t.map(At).reduce(((e,t)=>e/t)));case"//":return void ft(t.map(At).reduce(((e,t)=>je(e/t))));case"fast=":case"fast!=":return jt(t[0],t[1])!==("fast="===e)?void dt(!1):void pt.push(t[0]);case"fast-":return void ft(t[0].v-t[1].v);case"fast+":return void ft(t[0].v+t[1].v);case"fast*":return void ft(t[0].v*t[1].v);case"fast/":return void ft(t[0].v/t[1].v);case"fast//":return void ft(je(t[0].v/t[1].v));case"fast<":return void dt(t[0].v<t[1].v);case"fast>":return void dt(t[0].v>t[1].v);case"fast<=":return void dt(t[0].v<=t[1].v);case"fast>=":return void dt(t[0].v>=t[1].v);case"rem":return void ft(t.map(At).reduce(((e,t)=>e%t)));case"min":return void ft(t.map(At).reduce(((e,t)=>Se(e,t))));case"max":return void ft(t.map(At).reduce(((e,t)=>Ne(e,t))));case"<":case">":case"<=":case">=":for(let r=1,n=it(t);r<n;++r){const[n,s]=[t[r-1].v,t[r].v];if("<"===e&&n>=s||">"===e&&n<=s||"<="===e&&n>s||">="===e&&n<s)return void dt(!1)}return void dt(!0);case"inc":return void ft(t[0].v+1);case"dec":return void ft(t[0].v-1);case"abs":return void ft(we(t[0].v));case"round":if(2===it(t)){const e=10**t[1].v;ft(He(t[0].v*e)/e)}else ft(He(t[0].v));return;case"sin":case"cos":case"tan":case"sqrt":case"floor":case"ceil":case"logn":case"log2":case"log10":return void ft({sin:Ie,cos:$e,tan:Be,sqrt:Ee,floor:je,ceil:Me,logn:qe,log2:De,log10:Oe}[e](At(t[0])));case"and":return void dt(t.every($t));case"or":return void dt(t.some($t));case"odd?":case"even?":return void dt(At(t[0])%2==("odd?"===e?1:0));case"pos?":case"neg?":case"zero?":{const r=At(t[0]);return void dt("pos?"===e?r>0:"neg?"===e?r<0:!r)}case"null?":case"num?":case"bool?":case"str?":case"dict?":case"vec?":case"key?":case"func?":return void dt("null?"===e&&"null"===t[0].t||"num?"===e&&"num"===t[0].t||"bool?"===e&&"bool"===t[0].t||"str?"===e&&"str"===t[0].t||"dict?"===e&&"dict"===t[0].t||"vec?"===e&&"vec"===t[0].t||"key?"===e&&"key"===t[0].t||"func?"===e&&("func"===t[0].t||"clo"===t[0].t));case"has?":return void dt(Je(Ct(t[0]),Ct(t[1])));case"idx":{let e=-1;if("str"===t[0].t){if("str"!==t[1].t)return a("strings can only contain strings");if(!(it(t)<3)){const e=t[0].v.split("");return e[At(t[2])]=t[1].v,void yt(e.join(""))}e=Qe(t[0].v,t[1].v)}else if("vec"===t[0].t){if(!(it(t)<3)){const e=We(t[0].v);return e[At(t[2])]=t[1],void xt(e)}e=t[0].v.findIndex((e=>jt(e,t[1])))}return void(-1===e?bt():ft(e))}case"map":case"for":case"reduce":case"filter":case"remove":case"find":case"count":{const s=Nt(r,t.shift(),n),o=e=>"vec"===e||"str"===e||"dict"===e,i="map"===e||"for"===e?t.findIndex((({t:e})=>!o(e))):o(t[0].t)?-1:0;if(-1!==i)return a(`argument 2 must be either: string, vector, dictionary, not ${G[t[i].t]}`);if("for"===e){const e=t.map(It),a=e.map(it),o=a.map(((e,t)=>We(a,0,t+1).reduce(((e,t)=>e*t))));o.unshift(1);const i=o.pop();if(i>r.loopBudget)return[{e:"Budget",m:"would exceed loop budget",errCtx:n}];const c=[];for(let t=0;t<i;++t){const r=o.map(((e,r)=>je(t/e%a[r]))),n=await s(e.map(((e,t)=>e[r[t]])));if(n)return n;c.push(pt.pop())}return void xt(c)}if("map"===e){const e=t.map(It),r=Se(...e.map(it)),n=[];for(let t=0;t<r;++t){const r=await s(e.map((e=>e[t])));if(r)return r;n.push(pt.pop())}return void xt(n)}const c=It(t.shift());if("reduce"!==e){const r="remove"===e,n="find"===e,a="count"===e,o=[];let i=0;for(let e=0,u=it(c);e<u;++e){const u=await s([c[e],...t]);if(u)return u;const l=$t(pt.pop());if(a)i+=l?1:0;else{if(n&&l)return void pt.push(c[e]);n||l===r||o.push(c[e])}}switch(e){case"count":return void ft(i);case"find":return void bt();default:return void xt(o)}}if(!it(c))return void(it(t)?pt.push(t[0]):xt());if(it(c)<2&&!it(t))return void Le(pt,c);let u=(it(t)?t:c).shift();for(let e=0,t=it(c);e<t;++e){const t=await s([u,c[e]]);if(t)return t;u=pt.pop()}pt.push(u)}return;case"rand-int":case"rand":{const r=it(t),[n,s]=[r<2?0:At(t[0]),0===r?1+lt("rand-int"===e):At(1===r?t[0]:t[1])];ft("rand-int"===e?st(n,s):at(n,s))}return;case"do":case"val":return void pt.push("do"===e?t.pop():t.shift());case"..":case"...":{const s=Nt(r,t.shift(),n);let a=t;if(".."===e)a=Re(t.map((e=>"vec"===e.t?e.v:[e])));else{const e=a.pop();Le(a,Re(["vec"===e.t?e.v:[e]]))}return await s(a)}case"into":if("vec"===t[0].t)xt(Te(t[0].v,It(t[1])));else if("vec"===t[1].t)pt.push(Pt(Te(Re(It(t[0]).map(kt)),t[1].v)));else{const{keys:e,vals:r}=wt(t[0]),n=wt(t[1]);ht({keys:Te(e,n.keys),vals:Te(r,n.vals)})}return;case"push":if("vec"===t[0].t){const e=t[0].v;if(it(t)<3)xt(Te(e,[t[1]]));else{const r=At(t[2]);xt(Te(Te(We(e,0,r),[t[1]]),We(e,r)))}}else it(t)<3?pt.push((({keys:e,vals:t},r)=>{const[n,s]=[We(e),We(t)],a=e.findIndex((e=>jt(e,r)));return-1!==a&&(_e(n,a,1),_e(s,a,1)),{t:"dict",v:{keys:n,vals:s}}})(wt(t[0]),t[1])):ht(Ht(wt(t[0]),t[1],t[2]));return;case"sect":{const e=t[0],r="vec"===e.t?it(e.v):Ue(Ct(e));let n=0,s=r;switch(it(t)){case 1:n=1;break;case 2:{const e=At(t[1]);e<0?s+=e:n+=e;break}case 3:{const e=At(t[1]),a=At(t[2]);n=e<0?r+e+(a<0?a:0):n+e,s=(a<0?s:n)+a;break}}return n=Ne(n,0),s=Se(s,r),n>s?void("vec"===e.t?xt:yt)():void("vec"===e.t?xt(We(e.v,n,s)):yt(Xe(Ct(t[0]),n,s-n)))}case"reverse":return void("str"===t[0].t?yt(Bt(Ve(It(t[0])))):xt(Ve(It(t[0]))));case"sort":{if(!it(kt(t[0])))return void xt();const e=It(t[0]),s=[];if(1===it(t))Le(s,e.map((e=>[e,e])));else{const a=Nt(r,t.pop(),n);for(let t=0,r=it(e);t<r;++t){const r=await a([e[t]]);if(r)return r;s.push([e[t],pt.pop()])}}const o=s[0][1].t;return s.some((([e,{t}])=>t!==o||!Fe(["num","str"],t)))?a("can only sort by all number or all string"):("num"===s[0][1].t?Ke(s,(([e,t],[r,n])=>At(t)>At(n)?1:-1)):Ke(s,(([e,t],[r,n])=>Ct(t)>Ct(n)?1:-1)),void xt(s.map((([e])=>e))))}case"range":{const[e,s,a]=t.map(At),o=a&&a<0&&e<s,[i,c]=it(t)>1?o?[s-1,e-1]:[e,s]:[0,e],u=Pe((c-i)*(a||1))*(a||1),l=Me(we((c-i)/u));if(!l)return void xt([]);if(l>r.rangeBudget)return[{e:"Budget",m:"range budget depleted",errCtx:n}];r.rangeBudget-=l;const v=ut(l).map((e=>e*u+i));return void xt(v.map((e=>({t:"num",v:e}))))}case"empty?":return void dt(!it(It(t[0])));case"keys":case"vals":return void xt(wt(t[0])["keys"===e?"keys":"vals"]);case"split":return void xt(Ct(t[0]).split(it(t)>1?Ct(t[1]):" ").map((e=>({t:"str",v:e}))));case"join":return void yt(kt(t[0]).map(vt).join(it(t)>1?Ct(t[1]):" "));case"starts-with?":case"ends-with?":return void dt(("starts-with?"===e?Ge:ze)(Ct(t[0]),Ct(t[1])));case"upper-case":case"lower-case":case"trim":case"trim-start":case"trim-end":return void yt(("upper-case"===e?Ye:"lower-case"===e?Ze:"trim"===e?et:"trim-start"===e?tt:rt)(Ct(t[0])));case"str*":{const e=Ct(t[0]);return void yt(ut(Ne(At(t[1]),0)).map((t=>e)).join(""))}case"time":return void ft(nt());case"version":return void ft(20211010);case"tests":return void yt((await async function(e,t=!0){const r=[];for(let t=0;t<o(ke);++t){const{name:n,code:s,err:a,out:o}=ke[t],i={dict:new Map,output:""},c={funcs:{},vars:{}},u=H(),l=await e({get:e=>ge(i,e),set:(e,t)=>Ae(i,e,t),exe:(e,t)=>Ce(i,e,t),env:c,loopBudget:1e4,rangeBudget:1e3,callBudget:1e3,recurBudget:1e4},s,"testing",!0),v=(a||[]).join()===l.map((({e})=>e)).join(),p=!o||w(i.output)===o,m=H()-u,[d,f,y,x,h]=[B(`${t+1}`,3),B(n,24),B(`${m}ms`,6),p||o+"\t=/=\t"+w(i.output),v||l.map((({e,m:t,errCtx:{line:r,col:n}})=>`${e} ${r}:${n}: ${t}`))];r.push({okErr:v,okOut:p,elapsedMs:m,display:`${d} ${f} ${y} ${x} ${h}`})}const n=r.reduce(((e,{elapsedMs:t})=>e+t),0),s=o(r.filter((({okOut:e,okErr:t})=>e&&t)));return h(r.filter((e=>!t||!e.okOut||!e.okErr)).map((e=>e.display)),[`---- ${s}/${o(r)} tests passed in ${n}ms.`])}(Ot,!(it(t)&&$t(t[0])))).join("\n"));case"symbols":return void xt(function(e,t=!0){let r=t?["function"]:[];Le(r,["args","PI","E"]),r=Te(r,ct(U)),r=Te(r,ct(e.env.funcs)),r=Te(r,ct(e.env.vars));const n=["entry"];return r.filter((e=>!Fe(n,e)))}(r,!1).map((e=>({t:"str",v:e}))));case"eval":{delete r.env.funcs.entry;const e=it(pt),s=`${n.invocationId} eval`,a=await Dt(r,Ct(t[0]),s);return a?[{e:"Eval",m:"error within evaluated code",errCtx:n},...a]:void(e===it(pt)&&bt())}case"reset":return r.env.vars={},r.env.funcs={},mt=[],void bt()}return[{e:"Unexpected",m:"operation doesn't exist",errCtx:n}]}(a,t,e,r,n):a in e.env.funcs?t=>qt(e,e.env.funcs[a],t):a in e.env.vars?Nt(e,e.env.vars[a],r):a in mt[it(mt)-1]?Nt(e,mt[it(mt)-1][a],r):Ge(a,"$")?async t=>{if(!it(t))return s;const n=await e.set(Xe(a,1),t[0]);return pt.push(t[0]),n?[{e:"External",m:n,errCtx:r}]:void 0}:async t=>{const{err:n,value:s}=await e.exe(a,t);return n||pt.push(s),n?[{e:"External",m:n,errCtx:r}]:void 0}}if("clo"===t.t)return r=>qt(e,t.v,r);if("key"===t.t)return async e=>{if(!it(e))return s;if("dict"===e[0].t)pt.push(Mt(wt(e[0]),t));else{if("vec"!==e[0].t)return X(r,[e[0].t]);{const r=kt(e[0]).find((e=>jt(e,t)));pt.push(r??{t:"null",v:void 0})}}};if("num"===t.t){const e=je(t.v);return async t=>{if(!it(t))return s;const n=t[0];if("str"!==n.t&&"vec"!==n.t&&"dict"!==n.t)return Q(r,[n.t]);const a=It(n);we(e)>=it(a)?bt():e<0?pt.push(a[it(a)+e]):pt.push(a[e])}}if("vec"===t.t){const{v:e}=t;return async t=>{if(!it(t))return s;const r=e.find((e=>jt(e,t[0])));r?pt.push(r):bt()}}if("dict"===t.t){const e=t.v;return async t=>{if(1===it(t))pt.push(Mt(e,t[0]));else{if(2!==it(t))return[{e:"Arity",m:"dictionary as operation takes one or two arguments only",errCtx:r}];ht(Ht(e,t[0],t[1]))}}}if("bool"===t.t){const e=t.v;return async t=>{if(!it(t)||it(t)>2)return[{e:"Arity",m:"boolean as operation takes one or two arguments only",errCtx:r}];pt.push(e?t[0]:it(t)>1?t[1]:{t:"null",v:void 0})}}return async e=>[{e:"Operation",m:`${vt(t)} is an invalid operation`,errCtx:r}]}function St(e){const t=(e,t,r)=>Ht(e,{t:"key",v:t},r);return e.map((({e,m:r,errCtx:n})=>{let s=t({keys:[],vals:[]},":e",{t:"str",v:e});return s=t(s,":m",{t:"str",v:r}),s=t(s,":line",{t:"num",v:n.line}),s=t(s,":col",{t:"num",v:n.col}),{t:"dict",v:s}}))}async function qt(e,t,r,n=!1){--e.callBudget,n||mt.push({});const s=it(pt);for(let n=0,s=it(t.ins);n<s;++n){const a=t.ins[n],{errCtx:o}=t.ins[n],i=e.loopBudget<1;if(i||e.callBudget<1)return[{e:"Budget",m:(i?"looped":"called")+" too many times",errCtx:o}];switch(a.typ){case"val":pt.push(a.value);break;case"var":e.env.vars[a.value]=pt[it(pt)-1];break;case"let":mt[it(mt)-1][a.value]=pt[it(pt)-1];break;case"npa":case"upa":{const e=a.value;-1===e?xt(r):it(r)<=e?bt():pt.push(r[e])}break;case"ref":{const t=a.value;if(U[t])gt(t);else if(Ge(t,"$")){const{value:r,err:n}=await e.get(Xe(t,1));if(n)return[{e:"External",m:n,errCtx:o}];pt.push(r)}else if(t in e.env.vars)pt.push(e.env.vars[t]);else if(t in mt[it(mt)-1])pt.push(mt[it(mt)-1][t]);else{if(!(t in e.env.funcs))return[{e:"Reference",m:`"${t}" did not exist`,errCtx:o}];gt(t)}}break;case"exe":{const r=Nt(e,pt.pop(),o,!1),s=a.value,i=_e(pt,it(pt)-s,s),c=await r(i);if(c){const e=We(t.ins,n).findIndex((e=>"cat"===e.typ));if(-1!==e){n+=e,mt[it(mt)-1].errors={t:"vec",v:St(c)};break}return c}}break;case"or":$t(pt[it(pt)-1])?n+=a.value:pt.pop();break;case"if":$t(pt.pop())||(n+=a.value);break;case"jmp":case"cat":n+=a.value;break;case"loo":n+=a.value,--e.loopBudget;break;case"pop":_e(pt,it(pt)-a.value,a.value);break;case"ret":a.value?_e(pt,0,it(pt)-1):bt(),n=s;break;case"rec":{mt[it(mt)-1]={},n=-1;const t=a.value;if(r=_e(pt,it(pt)-t,t),--e.recurBudget,!e.recurBudget)return[{e:"Budget",m:"recurred too many times",errCtx:o}]}continue;case"clo":case"par":{let[t,n]=a.value;const s=({typ:e,value:t},r)=>"ref"===e&&!n.find((e=>"let"===e.typ&&e.value===t))||"npa"===e||"val"===e&&"exe"===n[r+1].typ,i={name:"",ins:n.map(((e,t)=>{if(t+1===it(n))return e;const r="val"===e.typ&&"str"===e.value.t&&"exe"===n[t+1].typ&&mt[it(mt)-1][e.value.v];return r?{typ:"val",value:r}:e})).filter(s)},c=await qt(e,i,r,!0);if(c)return c;const u=it(i.ins),l=_e(pt,it(pt)-u,u);if(n=n.map(((e,t)=>s(e,t)?{typ:"val",value:l.shift(),errCtx:o}:e)),"par"===a.typ){const{value:e,errCtx:t}=n.pop();n.unshift(n.pop()),n.push({typ:"upa",value:-1,errCtx:t}),n.push({typ:"val",value:{t:"str",v:"..."},errCtx:t}),n.push({typ:"exe",value:e+2,errCtx:t})}pt.push({t:"clo",v:{name:t,ins:n}})}}}n||(mt.pop(),_e(pt,s,it(pt)-(s+1)))}async function Dt(e,t,r){const n=be(t,r);return it(n.errors)?n.errors:(e.env.funcs={...e.env.funcs,...n.funcs},"entry"in e.env.funcs?await qt(e,e.env.funcs.entry,[]):void 0)}async function Ot(e,t,r,n=!1){const{callBudget:s,loopBudget:a,recurBudget:o,rangeBudget:i}=e,c=await Dt(e,t,r);return e.callBudget=s,e.recurBudget=o,e.loopBudget=a,e.rangeBudget=i,delete e.env.funcs.entry,!c&&n&&it(pt)&&await e.exe("print",[{t:"str",v:vt(pt[it(pt)-1])}]),pt=[],mt=[],c??[]}const Tt=new Map,Ft=/[\[\]\(\) ,]/;async function Rt(e,t){const r=H().toString();Tt.set(r,t);const n=await Ot(e,t,r,!0);let s=[];return n.forEach((({e,m:t,errCtx:{line:r,col:n,invocationId:a}})=>{const o=Tt.get(a);if(!o)return void s.push({type:"message",text:`${e} Error: line ${r} col ${n}: ${t}\n`});const c=o.split("\n")[r-1],u=l(c,n-1).split(Ft)[0],v=$(l(c,0,n-1));if(s.push({type:"message",text:B(`${r}`,4)+v}),u){const e=l(c,n-1+i(u));s.push({type:"error",text:u}),s.push({type:"message",text:`${e}\n`})}else{const e=l(c,n);s.push({type:"error",text:c[n-1]}),s.push({type:"message",text:`${e}\n`})}s.push({type:"message",text:`${e} Error: ${t}.\n`})})),s}window.insitux=t.invoker})();
//# sourceMappingURL=insitux.js.map