{"version":3,"file":"insitux.min.js","mappings":"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","sources":["webpack://insitux/./src/checks.ts","webpack://insitux/./src/closure.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/val.ts","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/web.ts"],"sourcesContent":["import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { has, len, push } from \"./poly-fills\";\r\nimport { Closure, Func, Ins, Val } from \"./types\";\r\n\r\nexport function enclose(name: string, cins: Ins[]): Closure {\r\n  const declarations: string[] = [];\r\n  cins.forEach(i => {\r\n    if (i.typ === \"let\" || i.typ === \"var\") {\r\n      declarations.push(i.value);\r\n    }\r\n  });\r\n  const closure: Closure = { name, cins, declarations, derefIns: [] };\r\n  makeDerefFunc(closure);\r\n  return closure;\r\n}\r\n\r\nexport function capture(\r\n  { name, cins, declarations }: Closure,\r\n  derefed: Val[],\r\n): Func {\r\n  const ins: Ins[] = [];\r\n  for (let i = 0, lim = len(cins); i < lim; ++i) {\r\n    const cin = cins[i];\r\n    if (cin.typ === \"clo\") {\r\n      const closure: Closure = {\r\n        name: cin.value.name,\r\n        derefIns: cin.value.derefIns,\r\n        declarations: cin.value.declarations,\r\n        cins: capture(cin.value, derefed).ins,\r\n      };\r\n      ins.push(<Ins>{ typ: \"clo\", value: closure });\r\n    } else if (canCapture(declarations, cin, i + 1 !== lim && cins[i + 1])) {\r\n      ins.push(<Ins>{ typ: \"val\", value: derefed.shift() });\r\n    } else {\r\n      ins.push(cin);\r\n    }\r\n  }\r\n  return { name, ins };\r\n}\r\n\r\nfunction makeDerefFunc({ cins, derefIns, declarations }: Closure) {\r\n  for (let i = 0, lim = len(cins); i < lim; ++i) {\r\n    const cin = cins[i];\r\n    if (cin.typ === \"clo\") {\r\n      makeDerefFunc(cin.value);\r\n      push(derefIns, cin.value.derefIns);\r\n    } else if (canCapture(declarations, cin, i + 1 !== lim && cins[i + 1])) {\r\n      derefIns.push(cin);\r\n    }\r\n  }\r\n}\r\n\r\nfunction canCapture(declarations: string[], cin: Ins, next: false | Ins) {\r\n  const isExeVal =\r\n    next && cin.typ === \"val\" && cin.value.t === \"str\" && next.typ === \"exe\";\r\n  return (\r\n    isExeVal ||\r\n    cin.typ === \"npa\" ||\r\n    (cin.typ === \"ref\" && !has(declarations, cin.value))\r\n  );\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport { enclose } from \"./closure\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\r\nimport { assertUnreachable, InvokeError } from \"./types\";\r\n\r\nexport type Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst token2str = ({ typ, text }: Token): string =>\r\n  typ === \"str\" ? `\"${text}\"` : text;\r\nfunction node2str(nodes: Node[]): string {\r\n  const sym0 = symAt(nodes, 0);\r\n  const isClosure = has([\"#\", \"@\"], sym0);\r\n  if (isClosure) {\r\n    nodes = slice(nodes, 1);\r\n  }\r\n  return `${isClosure ? sym0 : \"\"}(${nodes\r\n    .map(n => (isToken(n) ? token2str(n) : node2str(n)))\r\n    .join(\" \")})`;\r\n}\r\n\r\n/** Inserts pop instruction after penultimate body expression */\r\nconst poppedBody = (expressions: ParserIns[][]): ParserIns[] => {\r\n  if (len(expressions) === 1) {\r\n    return flat(expressions);\r\n  }\r\n  const lastExp = expressions[len(expressions) - 1];\r\n  const truncatedExps = slice(expressions, 0, len(expressions) - 1);\r\n  const popIns = <ParserIns>{\r\n    typ: \"pop\",\r\n    value: len(truncatedExps),\r\n    errCtx: lastExp[0].errCtx,\r\n  };\r\n  return flat([...truncatedExps, [popIns], lastExp]);\r\n};\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invokeId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text +=\r\n        { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n        (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`);\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invokeId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\r\n      }\r\n      funcs.push({ name, nodes: slice(node, 2) });\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    //1-off arity deficiency rewritten as closure\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\r\n      nodes.unshift(firstNode);\r\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\r\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    if (has([\"if\", \"if!\", \"when\", \"match\"], op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(`provide one or two branches, not ${len(nodes)}`);\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, branch1] = parsed;\r\n      let branch2 = parsed[2];\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\r\n      const bodyIns = poppedBody(body);\r\n      return [\r\n        ...cond,\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\") {\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const when = nodeParser(nodes.pop()!);\r\n      const body = flat(nodes.map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        const [head, body] = [args[0], slice(args, 1)];\r\n        const flatBody = poppedBody(body);\r\n        const ifJmp = len(flatBody) + 2;\r\n        const looJmp = -(len(head) + len(flatBody) + 3);\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: ifJmp, errCtx });\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        push(ins, flatBody);\r\n        ins.push({ typ: \"loo\", value: looJmp, errCtx });\r\n        return ins;\r\n      }\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"loop\") {\r\n      if (len(nodes) < 3) {\r\n        return err(\"provide at least 3 arguments\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const symNode = nodes[1];\r\n      const body = poppedBody(slice(parsed, 2));\r\n      if (!isToken(symNode)) {\r\n        return err(\"argument 2 must be symbol\");\r\n      }\r\n      //(let sym 0 sym-limit n) ... body ... (if (< (let sym (inc sym)) sym-limit) <exit> <loo>)\r\n      const ins: ParserIns[] = [\r\n        { typ: \"val\", value: { t: \"num\", v: 0 }, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        ...parsed[0],\r\n        { typ: \"let\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        ...body,\r\n        { typ: \"ref\", value: symNode.text, errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"inc\" }, errCtx },\r\n        { typ: \"exe\", value: 1, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        { typ: \"ref\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"<\" }, errCtx },\r\n        { typ: \"exe\", value: 2, errCtx },\r\n        { typ: \"if\", value: 2, errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        { typ: \"loo\", value: -(len(body) + 10), errCtx },\r\n      ];\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => !!(i % 2));\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(\"declaration name must be symbol\", defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const pins: ParserIns[] = [];\r\n      const name = node2str([firstNode, ...nodes]);\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        params = parsedParams.shape;\r\n        push(pins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(pins, parseForm(nodes, params, op !== \"@\"));\r\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\r\n      const errors = pins.filter(i => i.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      if (op === \"fn\") {\r\n        cins.forEach(i => {\r\n          if (i.typ === \"npa\") {\r\n            i.typ = \"upa\";\r\n          }\r\n        });\r\n      }\r\n      return [{ typ: \"clo\", value: enclose(name, cins), errCtx }];\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (head[0].typ === \"ref\") {\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\": {\r\n        const errors = insErrorDetect(ins.value.cins);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invokeId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invokeId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(slice(tokens));\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, round, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"For XY list\",\r\n    code: `(for vec [0 1] [0 1])`,\r\n    out: `[[0 0] [1 0] [0 1] [1 1]]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Loop\",\r\n    code: `(loop 3 i (print-str i))`,\r\n    out: `012null`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (let a :a) (+ 1 a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Closure with ext func\",\r\n    code: `(#(test.function %) 1)`,\r\n    out: `1\\nnull`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Closure with mixed lets\",\r\n    code: `(let a + c 5 d 10)\r\n           (let closure (fn b (let d 1) (a b c d)))\r\n           (let a - c 4 d 11)\r\n           (closure 1)`,\r\n    out: `7`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(push % %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invokeId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print: (str, withNewLine) => {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: [],\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${round(elapsedMs)}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${round(totalMs)}ms.`],\r\n  );\r\n}\r\n","export const insituxVersion = 220131;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { capture } from \"./closure\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, sign, sqrt, floor, ceil, round, max, min, logn, log2, log10 } = pf;\r\nconst { cos, sin, tan, acos, asin, atan, sinh, cosh, tanh } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunction, ExternalHandler } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict, pathSet } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet letsStack: { [key: string]: Val }[] = [];\r\nlet lets: typeof letsStack[0] = {};\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const types = args.map(a => [a.t]);\r\n    const violations = typeCheck(op, types, errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({ t: \"str\", v: stringify(args) });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\":\r\n      stack.push(toDict(args));\r\n      return;\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\": {\r\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"asin\":\r\n    case \"acos\":\r\n    case \"atan\":\r\n    case \"sinh\":\r\n    case \"cosh\":\r\n    case \"tanh\": {\r\n      const f = { asin, acos, atan, sinh, cosh, tanh }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n    case \"ext?\": {\r\n      const { t } = args[0];\r\n      _boo(\r\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\r\n          substr(op, 0, slen(op) - 1) === t,\r\n      );\r\n      return;\r\n    }\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        i = subIdx(args[1].v, args[0].v);\r\n      } else if (args[0].t === \"vec\") {\r\n        i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"set-at\": {\r\n      const [pathVal, replacement, coll] = args;\r\n      stack.push(pathSet(vec(pathVal), replacement, coll));\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op !== \"reduce\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          _str(filtered.map(v => val2str(v)).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\r\n        } else {\r\n          _vec(filtered);\r\n        }\r\n        return;\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        return tErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, lim = len(args); i < lim; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      const src = asArray(args[0]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (okT === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[len(args) - 1])\r\n          .split(len(args) - 1 ? str(args[0]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n      return;\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const invokeId = `${errCtx.invokeId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      letsStack = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as op requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets) {\r\n      return getExe(ctx, lets[name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError(op.t, errCtx);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[alen + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\r\n    } else {\r\n      return { t: \"null\", v: undefined };\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    letsStack.push({});\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          _vec(args);\r\n        } else if (len(args) <= paramIdx) {\r\n          _nul();\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          _fun(name);\r\n        } else if (starts(name, \"$\")) {\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets) {\r\n          stack.push(lets[name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          _fun(name);\r\n        } else {\r\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        const errors = closure(params);\r\n        if (errors) {\r\n          //Find next catch statement\r\n          const nextCat = slice(func.ins, i).findIndex(\r\n            ins => ins.typ === \"cat\",\r\n          );\r\n          if (nextCat !== -1) {\r\n            i += nextCat;\r\n            lets[\"errors\"] = {\r\n              t: \"vec\",\r\n              v: errorsToDict(errors),\r\n            };\r\n            break;\r\n          }\r\n          return errors;\r\n        }\r\n        if (recurArgs) {\r\n          letsStack[len(letsStack) - 1] = {};\r\n          i = -1;\r\n          const nArgs = ins.value;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        if (ins.value === 1) {\r\n          stack.pop();\r\n        } else {\r\n          splice(stack, len(stack) - ins.value, ins.value);\r\n        }\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\": {\r\n        //Ensure any in-scope declarations are captured here\r\n        const derefIns = slice(ins.value.derefIns).map((ins, i) => {\r\n          const decl =\r\n            ins.typ === \"val\" &&\r\n            ins.value.t === \"str\" &&\r\n            (lets[ins.value.v] ?? ctx.env.vars[ins.value.v]);\r\n          return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\r\n        });\r\n        //Dereference closure captures\r\n        exeFunc(ctx, { ins: derefIns }, args, true);\r\n        const numIns = len(derefIns);\r\n        const captures = splice(stack, len(stack) - numIns, numIns);\r\n        stack.push(<Val>{ t: \"clo\", v: capture(ins.value, captures) });\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    letsStack.pop();\r\n    lets = letsStack[len(letsStack) - 1];\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, invokeId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name, definition, handler }) => {\r\n    if (ops[name] && !externalOps[name]) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...definition, external: true };\r\n    externalOps[name] = handler;\r\n  });\r\n}\r\n\r\nfunction removeExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name }) => {\r\n    delete ops[name];\r\n    delete externalOps[name];\r\n  });\r\n}\r\n\r\nfunction innerInvoke(\r\n  ctx: Ctx,\r\n  closure: () => InvokeError[] | undefined,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = closure();\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, letsStack] = [[], []];\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param invokeId A unique ID referenced in invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  const result = innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId));\r\n  if (printResult && result.kind === \"val\") {\r\n    ctx.print(val2str(result.value), true);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n): InvokeResult | undefined {\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return innerInvoke(ctx, () => exeFunc(ctx, ctx.env.funcs[funcName], params));\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms: string[] = [];\r\n  if (alsoSyntax) {\r\n    push(syms, [\"function\", \"let\", \"var\", \"if\", \"if!\"]);\r\n    push(syms, [\"when\", \"while\", \"loop\", \"match\", \"catch\"]);\r\n  }\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke } from \".\";\r\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\r\nimport { getTimeMs } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(ctx: Ctx, code: string, id?: string): InvokeOutput {\r\n  id = id ? `-${id}` : `${getTimeMs()}`;\r\n  invocations.set(id, code);\r\n  const valOrErrs = invoke(ctx, code, id, true);\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  const msg = (text: string) => out.push({ type: \"message\", text });\r\n  const err = (text: string) => out.push({ type: \"error\", text });\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\r\n    const invocation = invocations.get(invokeId);\r\n    if (!invocation) {\r\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\r\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      err(lineText[col - 1]);\r\n      msg(`${half2}\\n`);\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      err(sym);\r\n      msg(`${half2}\\n`);\r\n    }\r\n    msg(`${e} Error: ${m}.\\n`);\r\n  });\r\n  return out;\r\n}\r\n","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, prefix: string): boolean =>\r\n  str.startsWith(prefix);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sinh = Math.sinh;\r\nexport const cosh = Math.cosh;\r\nexport const tanh = Math.tanh;\r\nexport const asin = Math.asin;\r\nexport const acos = Math.acos;\r\nexport const atan = Math.atan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict }\r\n  | { t: \"ext\"; v: unknown };\r\n\r\nexport type ErrCtx = { invokeId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name?: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunction[];\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport const defaultCtx = {\r\n  env: { funcs: {}, vars: {} },\r\n  loopBudget: 1e7,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\nexport type Closure = {\r\n  readonly name: string;\r\n  readonly cins: Ins[];\r\n  readonly derefIns: Ins[];\r\n  readonly declarations: string[];\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\"; value: Closure } //Closure/partial\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  name: string;\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  asin: { exactArity: 1, numeric: true },\r\n  acos: { exactArity: 1, numeric: true },\r\n  atan: { exactArity: 1, numeric: true },\r\n  sinh: { exactArity: 1, numeric: true },\r\n  cosh: { exactArity: 1, numeric: true },\r\n  tanh: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: {\r\n    exactArity: 2,\r\n    params: [[], [\"str\", \"vec\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  \"set-at\": {\r\n    exactArity: 3,\r\n    params: [\"vec\", [], [\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [[], \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  } /*\r\n  \"group-by\": {\r\n    exactArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"dict\"],\r\n  },\r\n  \"part-by\": {\r\n    exactArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  set: {\r\n    minArity: 1,\r\n    returns: [\"vec\", \"dict\"],\r\n  },*/,\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n  ext: \"external\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n    case \"ext\":\r\n      return a.v === b.v;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return val.v.name ?? \"\";\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\n/** Replaces or sets index or key/value with another value in a string or\r\n * dictionary */\r\nexport function pathSet(path: Val[], replacement: Val, coll: Val): Val {\r\n  //If we're at the end of the path or it's a non-number index for non-dict\r\n  if (\r\n    !len(path) ||\r\n    (coll.t !== \"vec\" && coll.t !== \"dict\") ||\r\n    (coll.t === \"vec\" &&\r\n      (path[0].t !== \"num\" || path[0].v < 0 || path[0].v > len(coll.v)))\r\n  ) {\r\n    return coll;\r\n  }\r\n  if (coll.t === \"vec\") {\r\n    const vecCopy = slice(coll.v);\r\n    const idx = num(path[0]);\r\n    if (len(path) === 1) {\r\n      vecCopy[idx] = replacement;\r\n      return { t: \"vec\", v: vecCopy };\r\n    }\r\n    vecCopy[idx] = pathSet(slice(path, 1), replacement, vecCopy[idx]);\r\n    return { t: \"vec\", v: vecCopy };\r\n  }\r\n  if (len(path) === 1) {\r\n    return { t: \"dict\", v: dictSet(coll.v, path[0], replacement) };\r\n  }\r\n  return {\r\n    t: \"dict\",\r\n    v: dictSet(\r\n      coll.v,\r\n      path[0],\r\n      pathSet(slice(path, 1), replacement, dictGet(coll.v, path[0])),\r\n    ),\r\n  };\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { invoker } from \"./invoker\";\r\nimport { Ctx, defaultCtx, ExternalFunction, Val, ValOrErr } from \"./types\";\r\nimport { num, str, val2str } from \"./val\";\r\n\r\nconst e = (el: string) => document.querySelector(el);\r\nlet state = new Map<string, Val>();\r\n\r\nconst get = (key: string): ValOrErr =>\r\n  state.has(key) ? { kind: \"val\", value: state.get(key)! } : nullValOrErr;\r\nconst set = (key: string, val: Val) => {\r\n  state.set(key, val);\r\n  localStorage.setItem(\"insitux-state\", JSON.stringify([...state.entries()]));\r\n  return undefined;\r\n};\r\n\r\nfunction exe(name: string, args: Val[]): ValOrErr {\r\n  if (args.length && args[0].t == \"str\" && args[0].v.startsWith(\"$\")) {\r\n    if (args.length === 1) {\r\n      return get(`${args[0].v.substring(1)}.${name}`);\r\n    } else {\r\n      set(`${args[0].v.substring(1)}.${name}`, args[1]);\r\n      return { kind: \"val\", value: args[1] };\r\n    }\r\n  }\r\n  return { kind: \"err\", err: `operation ${name} does not exist` };\r\n}\r\n\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst nullValOrErr: ValOrErr = { kind: \"val\", value: nullVal };\r\nconst v2e = (val: Val) => (val.t === \"str\" ? e(val.v) : <HTMLElement>val.v);\r\nconst functions: ExternalFunction[] = [\r\n  {\r\n    name: \"js\",\r\n    definition: { minArity: 1, params: [\"str\"] },\r\n    handler: params => {\r\n      const func = eval(str(params[0]));\r\n      const v = func(params.slice(1).map(a => a.v));\r\n      let value: Val = { t: \"ext\", v };\r\n      if (typeof v === \"string\") value = { t: \"str\", v };\r\n      return { kind: \"val\", value };\r\n    },\r\n  },\r\n  {\r\n    name: \"html\",\r\n    definition: { exactArity: 2, params: [[\"str\", \"ext\"]], returns: [\"str\"] },\r\n    handler: ([el, html]) => {\r\n      const element = v2e(el);\r\n      if (element) {\r\n        element.innerHTML = val2str(html);\r\n      }\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"new-el\",\r\n    definition: {\r\n      minArity: 2,\r\n      maxArity: 3,\r\n      params: [\"str\", \"str\", \"dict\"],\r\n      returns: [\"ext\"],\r\n    },\r\n    handler: ([tag, body, props]) => {\r\n      if (str(tag) === \"text\") {\r\n      }\r\n      const el = document.createElement(str(tag));\r\n      el.innerHTML = str(body);\r\n      return { kind: \"val\", value: { t: \"ext\", v: el } };\r\n    },\r\n  },\r\n  {\r\n    name: \"new-text-el\",\r\n    definition: { exactArity: 1, params: [\"str\"], returns: [\"ext\"] },\r\n    handler: ([text]) => {\r\n      const el = document.createTextNode(str(text));\r\n      return { kind: \"val\", value: { t: \"ext\", v: el } };\r\n    },\r\n  },\r\n  {\r\n    name: \"child-at\",\r\n    definition: {\r\n      exactArity: 2,\r\n      params: [[\"str\", \"ext\"], \"num\"],\r\n      returns: [\"ext\", \"null\"],\r\n    },\r\n    handler: ([parent, index]) => {\r\n      const el = v2e(parent)?.childNodes[num(index)];\r\n      return { kind: \"val\", value: el ? { t: \"ext\", v: el } : nullVal };\r\n    },\r\n  },\r\n  {\r\n    name: \"append-child\",\r\n    definition: {\r\n      exactArity: 2,\r\n      params: [[\"str\", \"ext\"], \"ext\"],\r\n      returns: [\"null\"],\r\n    },\r\n    handler: ([parent, child]) => {\r\n      const parentEl = v2e(parent);\r\n      parentEl?.appendChild(<HTMLElement>child.v);\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"remove-child\",\r\n    definition: {\r\n      exactArity: 2,\r\n      params: [[\"str\", \"ext\"], \"num\"],\r\n      returns: [\"null\"],\r\n    },\r\n    handler: ([parent, index]) => {\r\n      if (parent.t === \"str\") {\r\n        const parentEl = v2e(parent);\r\n        parentEl?.removeChild(parentEl.childNodes[num(index)]);\r\n      }\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"replace-child\",\r\n    definition: {\r\n      exactArity: 3,\r\n      params: [[\"str\", \"ext\"], \"ext\", \"num\"],\r\n      returns: [\"null\"],\r\n    },\r\n    handler: ([parent, child, index]) => {\r\n      const [parentEl, childEl] = [v2e(parent), v2e(child)];\r\n      const replacedEl = parentEl?.childNodes[num(index)];\r\n      if (parentEl && childEl && replacedEl) {\r\n        parentEl.replaceChild(childEl, replacedEl);\r\n      }\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"prompt\",\r\n    definition: { exactArity: 1, returns: [\"str\", \"null\"] },\r\n    handler: params => {\r\n      const reply = prompt(val2str(params[0]));\r\n      return { kind: \"val\", value: reply ? { t: \"str\", v: reply } : nullVal };\r\n    },\r\n  },\r\n  {\r\n    name: \"alert\",\r\n    definition: { exactArity: 1, returns: [\"null\"] },\r\n    handler: params => {\r\n      alert(val2str(params[0]));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"interval\",\r\n    definition: { exactArity: 2, params: [\"func\", \"num\"], returns: [\"null\"] },\r\n    handler: ([func, interval]) => {\r\n      setInterval(() => invoker(ctx, `(${func.v})`), num(interval));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"timeout\",\r\n    definition: { exactArity: 2, params: [\"func\", \"num\"], returns: [\"null\"] },\r\n    handler: ([func, interval]) => {\r\n      setTimeout(() => invoker(ctx, `(${func.v})`), num(interval));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n];\r\n\r\nconst ctx: Ctx = {\r\n  ...defaultCtx,\r\n  exe,\r\n  get,\r\n  set,\r\n  print: str => console.log(str),\r\n  functions,\r\n};\r\n\r\nconst loadScript = async (scriptEl: HTMLScriptElement) => {\r\n  const code = scriptEl.src\r\n    ? await (await fetch(scriptEl.src)).text()\r\n    : scriptEl.innerHTML;\r\n  window.ix(code);\r\n};\r\n\r\nwindow.onload = async () => {\r\n  const savedState = localStorage.getItem(\"insitux-state\");\r\n  state = new Map<string, Val>(savedState ? JSON.parse(savedState) : []);\r\n  console.log(state);\r\n  const scripts = Array.from(document.querySelectorAll(\"script\")).filter(\r\n    el => el.type === \"text/insitux\",\r\n  );\r\n  for (let s = 0; s < scripts.length; ++s) {\r\n    await loadScript(scripts[s]);\r\n  }\r\n};\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ix: (code: string) => void;\r\n  }\r\n}\r\n\r\nwindow.ix = code => {\r\n  const errors = invoker(ctx, code);\r\n  if (errors.length > 0) {\r\n    const errorTexts = errors.map(({ type, text }) =>\r\n      type === \"error\" ? [...text, \"\"].join(\"\\u0332\") : text,\r\n    );\r\n    alert(`---- Insitux\\n${errorTexts.join(\"\")}`);\r\n  }\r\n};\r\n"],"names":["asBoo","val","t","v","arityCheck","op","nArg","errCtx","exactArity","maxArity","minArity","aErr","msg","amount","e","m","typeCheck","args","optimistic","params","types","numeric","onlyNum","len","nonNumArgIdx","findIndex","a","find","names","map","join","typeErr","typeViolations","need","i","argTypes","isArray","some","has","filter","r","numOpErr","keyOpErr","enclose","name","cins","declarations","forEach","typ","push","value","closure","derefIns","makeDerefFunc","capture","derefed","ins","lim","cin","canCapture","shift","next","flat","slice","splice","slen","starts","sub","substr","strIdx","subIdx","isNum","toNum","nullVal","falseVal","isToken","node","symAt","pos","arg","text","node2str","nodes","sym0","isClosure","n","token2str","poppedBody","expressions","lastExp","truncatedExps","popIns","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","head","unshift","err","eCtx","parsed","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","reduce","acc","when","flatBody","ifJmp","looJmp","symNode","defs","vals","d","def","defIns","shape","errors","parseParams","func","pins","parsedParams","paramNames","param","position","consumeLast","errs","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","returns","badArg","parse","code","invokeId","tokens","stringError","makeCollsOps","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","collected","entries","collectFuncs","_treeise","prefix","token","treeise","namedNodes","nodeOrErr","fae","f","get","state","key","dict","kind","set","exe","output","tests","out","abs","sign","sqrt","floor","ceil","round","max","min","logn","log2","log10","cos","sin","tan","acos","asin","atan","sinh","cosh","tanh","concat","reverse","sortBy","ends","upperCase","lowerCase","trim","trimStart","trimEnd","charCode","codeChar","getTimeMs","randInt","randNum","objKeys","range","externalOps","recurArgs","letsStack","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","monoArityError","getExe","ctx","checkArity","external","valOrErr","tErr","violations","print","keys","sum","x","every","b","pathVal","replacement","coll","arrays","lims","divisors","_","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","count","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","d1","vlen","del","skip","take","src","mapped","okT","y","s","edgeCase","step","nums","split","invoke","terse","results","Map","env","vars","startTime","valOrErrs","str","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","padEnd","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","o","symbols","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","arr","alen","errorsToDict","newKey","k","destruct","inClosure","stackLen","tooManyLoops","last","paramIdx","nextCat","decl","numIns","captures","printResult","definition","handler","innerInvoke","invocations","parensRx","invoker","id","type","invocation","lineText","sym","half1","half2","Number","start","end","numDel","length","isNaN","Array","substring","idx","includes","indexOf","startsWith","endsWith","add","by","sort","toLowerCase","toUpperCase","charCodeAt","num","String","fromCharCode","Math","random","Object","Date","getTime","log","defaultCtx","ops","inc","dec","and","or","xor","rem","vec","for","remove","repeat","rand","into","sect","do","time","version","eval","reset","recur","typeNames","null","bool","ref","clo","wild","ext","assertUnreachable","_x","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","asArray","toDict","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","dictDrop","pathSet","path","vecCopy","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","el","document","querySelector","nullValOrErr","localStorage","setItem","JSON","v2e","html","element","innerHTML","tag","props","createElement","createTextNode","parent","index","childNodes","child","appendChild","parentEl","removeChild","childEl","replacedEl","replaceChild","reply","prompt","alert","interval","setInterval","setTimeout","console","loadScript","async","scriptEl","fetch","window","ix","onload","savedState","getItem","scripts","from","querySelectorAll","errorTexts"],"sourceRoot":""}