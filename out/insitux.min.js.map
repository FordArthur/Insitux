{"version":3,"file":"insitux.min.js","mappings":"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","sources":["webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/val.ts","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/web.ts"],"sourcesContent":["import { has, isArray, len } from \"./poly-fills\";\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\n\nexport const asBoo = (val: Val) =>\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\n\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\n  const { exactArity, maxArity, minArity } = ops[op];\n  const aErr = (msg: string, amount: number) => [\n    <InvokeError>{\n      e: \"Arity\",\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\n      errCtx,\n    },\n  ];\n  if (exactArity !== undefined) {\n    if (nArg !== exactArity) {\n      return aErr(`exactly ${exactArity}`, exactArity);\n    }\n  } else {\n    if (minArity && !maxArity && nArg < minArity) {\n      return aErr(`at least ${minArity}`, minArity);\n    } else if (!minArity && maxArity && nArg > maxArity) {\n      return aErr(`at most ${maxArity}`, maxArity);\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\n    }\n  }\n}\n\nexport function typeCheck(\n  op: string,\n  args: Val[\"t\"][][],\n  errCtx: ErrCtx,\n  optimistic = false,\n): InvokeError[] | undefined {\n  const { params: types, numeric: onlyNum } = ops[op];\n  const nArg = len(args);\n  if (onlyNum) {\n    const nonNumArgIdx = args.findIndex(\n      a =>\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\n    );\n    if (nonNumArgIdx === -1) {\n      return;\n    }\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\n    return [\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\n    ];\n  }\n  if (!types) {\n    return;\n  }\n  const typeViolations = types\n    .map((need, i) => {\n      if (i >= nArg || !args[i]) {\n        return false;\n      }\n      const argTypes = args[i]!;\n      if (isArray(need)) {\n        if (\n          !len(need) ||\n          (optimistic\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\n            : len(argTypes) === 1 && has(need, argTypes[0]))\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        const needs = need.map(t => typeNames[t]).join(\", \");\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\n      } else {\n        if (\n          optimistic\n            ? !len(argTypes) || has(argTypes, need)\n            : len(argTypes) === 1 && need === argTypes[0]\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\n      }\n    })\n    .filter(r => !!r);\n  return len(typeViolations)\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\n    : undefined;\n}\n\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\n  e: \"Type\",\n  m,\n  errCtx,\n});\n\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\nimport * as pf from \"./poly-fills\";\nconst { has, flat, push, slice, splice } = pf;\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\nconst { isNum, len, toNum } = pf;\nimport { ParamsShape, ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\nimport { assertUnreachable, InvokeError } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype Node = Token | Node[];\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\nconst nullVal: Val = { t: \"null\", v: undefined };\nconst falseVal = <Val>{ t: \"bool\", v: false };\ntype NamedNodes = {\n  name: string;\n  nodes: Node[];\n};\nconst isToken = (node: Node | undefined): node is Token =>\n  !!node && \"errCtx\" in node;\nconst symAt = (node: Node, pos = 0) => {\n  if (isToken(node)) {\n    return \"\";\n  }\n  const arg = node[pos];\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\n};\nconst node2str = (nodes: Node[]): string =>\n  nodes.map(n => (isToken(n) ? n.text : `(${node2str(n)})`)).join(\" \");\n\nexport function tokenise(\n  code: string,\n  invokeId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\n  let [inSymbol, inNumber, inHex] = [false, false, false];\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (c === \"\\\\\" && inString) {\n      tokens[len(tokens) - 1].text +=\n        { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\n        (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`);\n      ++col;\n      ++i;\n      continue;\n    }\n    const errCtx: ErrCtx = { invokeId, line, col };\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      const nl = subIdx(substr(code, ++i), \"\\n\");\n      const text = substr(code, i, nl > 0 ? nl : l - i);\n      i += slen(text);\n      ++line;\n      col = 0;\n      if (emitComments) {\n        tokens.push({ typ: \"rem\", text, errCtx });\n      }\n      continue;\n    }\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or hex, or binary, else convert into symbol\n    if (inNumber && !isDigit(c)) {\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\n      inHex = inHex || hexStart;\n      inNumber =\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps && (c === \"[\" || c === \"{\")) {\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inHex = inSymbol = !inNumber;\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\n/** Parses tokens into a tree where each node is a token or token list. */\nfunction treeise(tokens: Token[]): Node[] {\n  const nodes: Node[] = [];\n  const _treeise = (tokens: Token[]): Node => {\n    let prefix: Token | undefined;\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\n      prefix = tokens.shift()!;\n    }\n    const token = tokens.shift()!;\n    if (token.typ !== \"(\" && token.typ !== \")\") {\n      return token;\n    }\n    const nodes: Node[] = prefix ? [prefix] : [];\n    while (tokens[0].typ !== \")\") {\n      nodes.push(_treeise(tokens));\n    }\n    tokens.shift();\n    return nodes;\n  };\n  while (len(tokens)) {\n    nodes.push(_treeise(tokens));\n  }\n  return nodes;\n}\n\n/** Separates function nodes and non-function nodes,\n * with non-function nodes collected into (function entry ...)\n * if there are any.*/\nfunction collectFuncs(\n  nodes: Node[],\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\n  const funcs: ReturnType<typeof collectFuncs> = [];\n  const entries: Node[] = [];\n  nodes.forEach(node => {\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\n      const name = symAt(node, 1);\n      if (!name) {\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\n      } else if (len(node) < 3) {\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\n      }\n      funcs.push({ name, nodes: slice(node, 2) });\n    } else {\n      entries.push(node);\n    }\n  });\n  if (len(entries)) {\n    funcs.push({ name: \"entry\", nodes: entries });\n  }\n  return funcs;\n}\n\nconst parseNode = (node: Node, params: ParamsShape) =>\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\n\nfunction parseForm(\n  nodes: Node[],\n  params: ParamsShape,\n  doArityCheck = true,\n): ParserIns[] {\n  if (!len(nodes)) {\n    return [];\n  }\n  const nodeParser = (node: Node) => parseNode(node, params);\n  let firstNode = nodes.shift()!;\n  let head = nodeParser(firstNode);\n  const { errCtx } = head[0];\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\n    //1-off arity deficiency rewritten as closure\n    if (firstNode.text in ops) {\n      const { exactArity, minArity } = ops[firstNode.text];\n      const a = exactArity ?? minArity;\n      if (a && a !== 1 && len(nodes) + 1 === a) {\n        nodes.unshift(firstNode);\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\n      }\n    }\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\n      nodes.unshift(firstNode);\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\n    }\n    const { text: op, errCtx } = firstNode;\n    const err = (m: string, eCtx = errCtx) => [\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\n    ];\n\n    if (has([\"if\", \"if!\", \"when\", \"match\"], op) && !len(nodes)) {\n      return err(\"provide a condition\");\n    } else if (has([\"if\", \"if!\"], op)) {\n      if (len(nodes) === 1) {\n        return err(\"provide at least one branch\");\n      } else if (len(nodes) > 3) {\n        return err(\"provide fewer than two branches\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [cond, branch1] = parsed;\n      let branch2 = parsed[2];\n      const ifN = op === \"if!\" && [\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\n      ];\n      if (!branch2) {\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\n      }\n      return [\n        ...cond,\n        ...(ifN || []),\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\n        ...branch1,\n        { typ: \"jmp\", value: len(branch2), errCtx },\n        ...branch2,\n      ];\n    } else if (op === \"when\") {\n      if (len(nodes) === 1) {\n        return err(\"provide a body\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\n      const bodyIns = flat(body);\n      return [\n        ...cond,\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\n        ...bodyIns,\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: nullVal, errCtx },\n      ];\n    } else if (op === \"match\") {\n      const parsed = nodes.map(nodeParser);\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\n      if (!len(args)) {\n        return err(\"provide at least one case\");\n      }\n      const elseLen = len(otherwise);\n      let insCount =\n        args.reduce((acc, a) => acc + len(a), 0) +\n        (elseLen ? elseLen : 2) +\n        len(args);\n      const ins: ParserIns[] = cond;\n      while (len(args) > 1) {\n        const [a, when] = [args.shift()!, args.shift()!];\n        push(ins, a);\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\n        push(ins, when);\n        insCount -= len(a) + len(when) + 2;\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\n      }\n      if (len(otherwise)) {\n        push(ins, otherwise);\n      } else {\n        ins.push({ typ: \"pop\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\n      }\n      return ins;\n    } else if (op === \"catch\") {\n      if (len(nodes) < 2) {\n        return err(\"provide at least 2 arguments\");\n      } else if (isToken(nodes[0])) {\n        return err(\"argument 1 must be expression\");\n      }\n      const body = nodeParser(nodes[0]);\n      const when = flat(slice(nodes, 1).map(nodeParser));\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\n      const args = nodes.map(nodeParser);\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\n      if (len(args) < 2) {\n        return err(\"provide at least 2 arguments\");\n      }\n      const ins: ParserIns[] = [];\n      if (op === \"while\") {\n        ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n        insCount += 2; //+1 for the if ins, +1 for the pop ins\n        const [head, body] = [args[0], slice(args, 1)];\n        push(ins, head);\n        ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n        ins.push({ typ: \"pop\", value: len(body), errCtx });\n        push(ins, flat(body));\n        ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n        return ins;\n      }\n      insCount += len(args); //+1 for each if/or ins\n      insCount += toNum(op === \"and\");\n      const typ = op === \"and\" ? \"if\" : \"or\";\n      for (let a = 0; a < len(args); ++a) {\n        push(ins, args[a]);\n        insCount -= len(args[a]);\n        ins.push({ typ, value: insCount, errCtx });\n        --insCount;\n      }\n      if (op === \"and\") {\n        push(ins, [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n          { typ: \"jmp\", value: 1, errCtx },\n        ]);\n      }\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\n      return ins;\n    } else if (op === \"var\" || op === \"let\") {\n      const defs = nodes.filter((n, i) => !(i % 2));\n      const vals = nodes.filter((n, i) => !!(i % 2));\n      if (!len(defs)) {\n        return err(\"provide at least 1 declaration name and value\");\n      } else if (len(defs) > len(vals)) {\n        return err(\"provide a value after each declaration name\");\n      }\n      const ins: ParserIns[] = [];\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\n        push(ins, nodeParser(vals[d]));\n        const def = defs[d];\n        if (isToken(def)) {\n          const defIns = parseNode(defs[d], params);\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\n            return err(\"declaration name must be symbol\", defIns[0].errCtx);\n          }\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\n        } else {\n          const { shape, errors } = parseParams([def], true);\n          if (len(errors)) {\n            return errors;\n          }\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\n          ins.push({ typ, value: shape, errCtx });\n        }\n      }\n      return ins;\n    } else if (op === \"var!\" || op === \"let!\") {\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\n      if (len(nodes) < 2) {\n        return err(\"provide 1 declaration name and 1 function\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\n      if (def.typ !== \"ref\") {\n        return err(\"declaration name must be symbol\", def.errCtx);\n      }\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\n      push(ins, [...flat(args), ...func]);\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\n      const typ = op === \"var!\" ? \"var\" : \"let\";\n      ins.push({ typ, value: def.value, errCtx });\n      return ins;\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\n      const pins: ParserIns[] = [];\n      let asStr = node2str(nodes);\n      asStr = op === \"fn\" ? `(fn ${asStr})` : `${op}(${asStr})`;\n      if (op === \"fn\") {\n        const parsedParams = parseParams(nodes, false);\n        params = parsedParams.shape;\n        push(pins, parsedParams.errors);\n        if (!len(nodes)) {\n          return err(\"provide a body\");\n        }\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\n      }\n      //Rewrite partial closure to #(... [body] args)\n      if (op === \"@\") {\n        nodes = [\n          { typ: \"sym\", text: \"...\", errCtx },\n          ...nodes,\n          { typ: \"sym\", text: \"args\", errCtx },\n        ];\n      }\n      push(pins, parseForm(nodes, params, op !== \"@\"));\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\n      const errors = pins.filter(i => i.typ === \"err\");\n      if (len(errors)) {\n        return errors;\n      }\n      if (op === \"fn\") {\n        cins.forEach(i => {\n          if (i.typ === \"npa\") {\n            i.typ = \"upa\";\n          }\n        });\n      }\n      //Calculate captures\n      const captureIns: Ins[] = [];\n      const captured: boolean[] = [];\n      for (let i = 0; i < len(cins); ++i) {\n        const ci = cins[i];\n        const isExe =\n          ci.typ === \"val\" &&\n          i + 1 < len(cins) &&\n          cins[i + 1].typ === \"exe\" &&\n          ((ci.value.t === \"func\" && !ops[ci.value.v]) || ci.value.t === \"str\");\n        captured[i] =\n          (ci.typ === \"ref\" &&\n            !cins.find(i => i.typ === \"let\" && i.value === ci.value)) ||\n          ci.typ === \"npa\" ||\n          isExe;\n        if (captured[i]) {\n          captureIns.push(ci);\n        }\n      }\n      const value = { name: asStr, closureIns: cins, captureIns, captured };\n      return [{ typ: op === \"@\" ? \"par\" : \"clo\", value, errCtx }];\n    }\n\n    //Operation arity check, optionally disabled for partial closures\n    if (ops[op] && doArityCheck) {\n      const errors = arityCheck(op, len(nodes), errCtx);\n      const err = (value: string, eCtx = errCtx) => [\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\n      ];\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\n      if (!errors) {\n        //Upgrade some math and logic functions to their faster counterparts\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\n        }\n      }\n    }\n  }\n\n  const args = nodes.map(nodeParser);\n  const ins: ParserIns[] = flat(args);\n  if (symAt([firstNode]) === \"return\") {\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\n  } else if (head[0].typ === \"ref\") {\n    const { value: v, errCtx } = head[0];\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\n  }\n  push(ins, head);\n  const typ = len(head) > 1 ? \"exa\" : \"exe\";\n  return [...ins, { typ, value: len(args), errCtx }];\n}\n\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\n  if (isToken(node)) {\n    const { errCtx } = node;\n    if (node.typ === \"str\") {\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\n    } else if (node.typ === \"num\") {\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\n    } else if (node.typ === \"sym\") {\n      const { text } = node;\n      const paramNames = params.map(({ name }) => name);\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (text === \"_\") {\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(paramNames, text)) {\n        const param = params.find(({ name }) => name === text)!;\n        if (len(param.position) === 1) {\n          return [{ typ: \"npa\", value: param.position[0], errCtx }];\n        }\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (text === \"PI\" || text === \"E\") {\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    }\n    return [];\n  } else if (!len(node)) {\n    return [];\n  }\n  return parseForm(node, params);\n}\n\n/** Consumes some tokens and returns ParamsShape.\n * Example inputs:\n * \"(fn \"   a [b [c]] d [d c b a]\n * \"(var \" [a] [1 2] b [1 2]\n * \"(function \" [x] (print x) x\n * \"(function \" x [x]\n * \"(fn \"\n * \"(function \"\n * */\nfunction parseParams(\n  nodes: Node[],\n  consumeLast: boolean,\n  position: number[] = [],\n): { shape: ParamsShape; errors: ParserIns[] } {\n  const shape: ParamsShape = [],\n    errs: ParserIns[] = [];\n  let n = 0;\n  while (\n    len(nodes) > (consumeLast ? 0 : 1) &&\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\n  ) {\n    const param = nodes.shift()!;\n    if (!isToken(param)) {\n      param.shift();\n      const parsed = parseParams(param, true, [...position, n]);\n      push(shape, parsed.shape);\n      push(errs, parsed.errors);\n    } else {\n      const { typ, errCtx } = param;\n      if (typ === \"sym\") {\n        shape.push({ name: param.text, position: [...position, n] });\n      } else {\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\n      }\n    }\n    ++n;\n  }\n  return { shape, errors: errs };\n}\n\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\n  const { shape: params, errors } = parseParams(nodes, false);\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\n  for (let i = 0, lim = len(ins); i < lim; i++) {\n    const { typ, value, errCtx } = ins[i];\n    if (typ === \"err\") {\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\n    }\n  }\n  return { name, ins: <Ins[]>ins };\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\n    return errors;\n  }\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\n    }\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\n//TODO: investigate Node implementation replacement\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\n  type TypeInfo = {\n    types?: Val[\"t\"][];\n    val?: Val;\n  };\n  const stack: TypeInfo[] = [];\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\n    const ins = fins[i];\n    switch (ins.typ) {\n      case \"val\":\n        stack.push({ types: [ins.value.t], val: ins.value });\n        break;\n      case \"exa\":\n      case \"exe\": {\n        const head = stack.pop()!;\n        const args = splice(stack, len(stack) - ins.value, ins.value);\n        const badMatch = (okTypes: Val[\"t\"][]) =>\n          args.findIndex(\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\n          );\n        const headIs = (t: Val[\"t\"]) =>\n          head.val\n            ? head.val.t === t\n            : head.types && len(head.types) === 1 && head.types[0] === t;\n        if (head.val && head.val.t === \"func\") {\n          if (head.val.v === \"recur\") {\n            splice(stack, len(stack) - ins.value, ins.value);\n            break;\n          }\n          const errors = typeCheck(\n            head.val.v,\n            args.map(a => a.types ?? []),\n            ins.errCtx,\n            true,\n          );\n          if (errors) {\n            return errors;\n          }\n          const { returns, numeric: onlyNum } = ops[head.val.v];\n          stack.push(\n            onlyNum && onlyNum !== \"in only\"\n              ? { types: [\"num\"] }\n              : { types: returns },\n          );\n        } else if (headIs(\"num\")) {\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return numOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"key\")) {\n          const badArg = badMatch([\"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return keyOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\n          stack.push({});\n        } else if (!head.types && !head.val) {\n          stack.push({});\n        }\n        break;\n      }\n      case \"or\":\n        stack.pop();\n        stack.push({});\n        i += ins.value;\n        break;\n      case \"cat\":\n      case \"var\":\n      case \"let\":\n      case \"dva\":\n      case \"dle\":\n      case \"loo\":\n      case \"jmp\":\n        break;\n      case \"clo\":\n      case \"par\": {\n        const errors = insErrorDetect(ins.value.closureIns);\n        if (errors) {\n          return errors;\n        }\n      }\n      case \"ref\":\n      case \"npa\":\n      case \"upa\":\n      case \"dpa\":\n        stack.push({});\n        break;\n      case \"if\": {\n        stack.pop();\n        stack.push({});\n        const ifIns = slice(fins, i + 1, ins.value + 1);\n        const errors = insErrorDetect(ifIns);\n        if (errors) {\n          return errors;\n        }\n        i += ins.value - 1;\n        break;\n      }\n      case \"mat\": {\n        stack.pop(); //first match\n        stack.pop(); //cond\n        i += ins.value;\n        i += fins[i].value as number; //The first jmp\n        stack.push({});\n        break;\n      }\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          stack.pop();\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n}\n\nexport function parse(\n  code: string,\n  invokeId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, invokeId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const okFuncs: Func[] = [],\n    errors: InvokeError[] = [];\n  const tree = treeise(slice(tokens));\n  const collected = collectFuncs(tree);\n  const namedNodes: NamedNodes[] = [];\n  collected.forEach(nodeOrErr => {\n    if (\"err\" in nodeOrErr) {\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\n    } else {\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\n    }\n  });\n  namedNodes.map(compileFunc).forEach(fae => {\n    if (\"e\" in fae) {\n      errors.push(fae);\n    } else {\n      okFuncs.push(fae);\n    }\n  });\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\n  return { errors, funcs };\n}\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\n\ntype State = { dict: Map<string, Val>; output: string };\n\nfunction get(state: State, key: string): ValOrErr {\n  if (!state.dict.has(key)) {\n    return { kind: \"err\", err: `\"${key}\" not found.` };\n  }\n  return { kind: \"val\", value: state.dict.get(key)! };\n}\n\nfunction set(state: State, key: string, val: Val): string | undefined {\n  state.dict.set(key, val);\n  return undefined;\n}\n\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\n  const nullVal: Val = { t: \"null\", v: undefined };\n  switch (name) {\n    case \"test.function\":\n      state.output += args[0].v + \"\\n\";\n      break;\n    default:\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\n  }\n  return { kind: \"val\", value: nullVal };\n}\n\nconst tests: {\n  name: string;\n  code: string;\n  err?: string[];\n  out?: string;\n}[] = [\n  //Basic snippets\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\n  {\n    name: \"Say Hello, world!\",\n    code: `(print \"Hello, world!\")`,\n    out: `Hello, world!\\nnull`,\n  },\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\n  {\n    name: \"Whens\",\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\n    out: `hi\\n[234 null]`,\n  },\n  {\n    name: \"match and wildcard\",\n    code: `(match [1 2]\n             [0 0] (print \"hello\")\n             [0 2] (print \"bye\")\n             [1 _] \"hey\")`,\n    out: `hey`,\n  },\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\n  {\n    name: \"and & short-circuit\",\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\n    out: `[false true]`,\n  },\n  {\n    name: \"or & short-circuit\",\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\n    out: `-> [true 1]`,\n  },\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\n  {\n    name: \"Key as operation\",\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\n    out: `[24 :abc]`,\n  },\n  {\n    name: \"Dictionary as op 1\",\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 2\",\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\n  },\n  {\n    name: \"Equalities\",\n    code: `[(= 1 2 1)\n            (!= 1 2 1)\n            (= \"Hello\" \"hello\")\n            (!= \"world\" \"world\")\n            (= [0 [1]] [0 [1]])]`,\n    out: `[false 1 false false [0 [1]]]`,\n  },\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\n  {\n    name: \"Define num and call\",\n    code: `(var f 1) (f [:a :b :c])`,\n    out: `:b`,\n  },\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\n  {\n    name: \"Apply op to let\",\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\n    out: `20`,\n  },\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\n  {\n    name: \"Sum vector of numbers\",\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\n    out: `[6 9]`,\n  },\n  {\n    name: \"Sum vectors of numbers\",\n    code: `(map + [1 2 3] [1 2 3 4])`,\n    out: `[2 4 6]`,\n  },\n  {\n    name: \"Filter by integer\",\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\n    out: `[[:a :b :c] \"hello\"]`,\n  },\n  {\n    name: \"Comments, short decimal\",\n    code: `;((print \"Hello\")\n           .456`,\n    out: `0.456`,\n  },\n  {\n    name: \"Dictionary into vector\",\n    code: `(into [1 2] {3 4 5 6})`,\n    out: `[1 2 [3 4] [5 6]]`,\n  },\n  {\n    name: \"Vector into dictionary\",\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\n    out: `{[0] 2, [2] 3}`,\n  },\n  {\n    name: \"While loop\",\n    code: `(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))`,\n    out: `543210`,\n  },\n  {\n    name: \"Catch error\",\n    code: `(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print \"hi\"))`,\n    out: `Type`,\n  },\n  //Basic functions and closures\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\n  {\n    name: \"Call greet func\",\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\n    out: `Hello!\\nnull`,\n  },\n  {\n    name: \"Call const value func\",\n    code: `(function const 123) (const)`,\n    out: `123`,\n  },\n  {\n    name: \"Call identity funcs\",\n    code: `(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]`,\n    out: `[123 456]`,\n  },\n  {\n    name: \"Call greet with name\",\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\n           (greeting \"Patrick\")`,\n    out: `Hello, Patrick!\\nnull`,\n  },\n  {\n    name: \"Call with too few args\",\n    code: `(function func a b c [a b c]) (func 1 2)`,\n    out: `[1 2 null]`,\n  },\n  {\n    name: \"Define func and call\",\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Anonymous parameters\",\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)`,\n    out: `false`,\n  },\n  {\n    name: \"Call parameter\",\n    code: `(function f x (x \"hello\")) (f print)`,\n    out: `hello\\nnull`,\n  },\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\n  {\n    name: \"Let num op and call\",\n    code: `(function f (let n 0) (n [1])) (f)`,\n    out: `1`,\n  },\n  {\n    name: \"Explicit return\",\n    code: `(function f (return 123) (print 456)) (f)`,\n    out: `123`,\n  },\n  {\n    name: \"Closure 1\",\n    code: `(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)`,\n    out: `20`,\n  },\n  {\n    name: \"Closure 2\",\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\n    out: `[0 2 4 5 6 8]`,\n  },\n  {\n    name: \"Closure 3\",\n    code: `(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]`,\n    out: `[20 40]`,\n  },\n  {\n    name: \"Func returns closure\",\n    code: `(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)`,\n    out: `4`,\n  },\n  {\n    name: \"Dictionary closure\",\n    code: `(function f x #{x 2})\n           (let closure (f :a))\n           (closure)`,\n    out: `{:a 2}`,\n  },\n  {\n    name: \"Vector closure\",\n    code: `(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Closure as head\",\n    code: `(#[% %1 %2] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 1\",\n    code: `(@[] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 2\",\n    code: `(@((do +) 2) 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Parameterised closure 1\",\n    code: `((fn a b (+ a b)) 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Parameterised closure 2\",\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\n    out: `224`,\n  },\n  {\n    name: \"Closure with mixed lets\",\n    code: `(let a + c 5 d 10)\n           (let closure (fn b (let d 1) (a b c d)))\n           (let a - c 4 d 11)\n           (closure 1)`,\n    out: `7`,\n  },\n  {\n    name: \"Destructure var\",\n    code: `(var [x [y]] [1 [2]]) [y x]`,\n    out: `[2 1]`,\n  },\n  {\n    name: \"Destructure string\",\n    code: `(let [a b c] \"hello\") [a b c]`,\n    out: `[\"h\" \"e\" \"l\"]`,\n  },\n  {\n    name: \"Destructure function\",\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\n    out: `[4 3 2 1 0]`,\n  },\n  {\n    name: \"Destructuring closure\",\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\n    out: `[3 2 1 0]`,\n  },\n  {\n    name: \"Destructuring fn decoy\",\n    code: `(let f (fn a [a [a]])) (f 0)`,\n    out: `[0 [0]]`,\n  },\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\n  //Runtime errors\n  {\n    name: \"String instead of number\",\n    code: `(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 \"hi\")`,\n    out: `4`,\n    err: [\"Type\"],\n  },\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\n  {\n    name: \"Expired let retrieve\",\n    code: `(function f (let a 1) a) (f) a`,\n    err: [\"Reference\"],\n  },\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\n  {\n    name: \"Loop budget\",\n    code: `(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))`,\n    err: [\"Budget\"],\n  },\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\n  {\n    name: \"Head exe arity check\",\n    code: `(((fn +)) 1)`,\n    err: [\"Arity\"],\n  },\n  //Complex functions\n  {\n    name: \"Fibonacci 13\",\n    code: `(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)`,\n    out: `233`,\n  },\n  {\n    name: \"dedupe (recur)\",\n    code: `(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"frequencies\",\n    code: `(function frequencies list\n             (reduce #(push % %1 (inc (or (% %1) 0))) {} list))\n           (frequencies \"12121212\")`,\n    out: `{\"1\" 4, \"2\" 4}`,\n  },\n  //Test environment functions\n  {\n    name: \"set get\",\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\n    out: `[5.5 5.5]`,\n  },\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\n  //Syntax errors\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\n  {\n    name: \"Imbalanced quotes\",\n    code: `(print \"Hello)`,\n    err: [\"Parse\"],\n  },\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\n  //Parser type and arity errors\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\n  {\n    name: \"Parser type error 2\",\n    code: `(function f (+ 1 (into {} {})))`,\n    err: [\"Type\"],\n  },\n  {\n    name: \"Parser type error 3\",\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\n    err: [\"Type\"],\n  },\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\n];\n\nexport function doTests(\n  invoke: (\n    ctx: Ctx,\n    code: string,\n    invokeId: string,\n    print: boolean,\n  ) => InvokeResult,\n  terse = true,\n): string[] {\n  const results: {\n    okErr: boolean;\n    okOut: boolean;\n    elapsedMs: number;\n    display: string;\n  }[] = [];\n  for (let t = 0; t < len(tests); ++t) {\n    const { name, code, err, out } = tests[t];\n    const state: State = {\n      dict: new Map<string, Val>(),\n      output: \"\",\n    };\n    const env: Env = { funcs: {}, vars: {} };\n    const startTime = getTimeMs();\n    const valOrErrs = invoke(\n      {\n        get: (key: string) => get(state, key),\n        set: (key: string, val: Val) => set(state, key, val),\n        print: (str, withNewLine) => {\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\n        },\n        exe: (name: string, args: Val[]) => exe(state, name, args),\n        functions: [],\n        env,\n        loopBudget: 10000,\n        rangeBudget: 1000,\n        callBudget: 1000,\n        recurBudget: 10000,\n      },\n      code,\n      code,\n      true,\n    );\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\n    const okOut = !out || trim(state.output) === out;\n    const elapsedMs = getTimeMs() - startTime;\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\n      padEnd(`${t + 1}`, 3),\n      padEnd(name, 24),\n      padEnd(`${elapsedMs}ms`, 6),\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\n      okErr ||\n        errors.map(\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\n        ),\n    ];\n    results.push({\n      okErr,\n      okOut,\n      elapsedMs,\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\n    });\n  }\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\n  return concat(\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\n  );\n}\n","export const insituxVersion = 20220103;\nimport { asBoo } from \"./checks\";\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\nimport { parse } from \"./parse\";\nimport * as pf from \"./poly-fills\";\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\nconst { logn, log2, log10 } = pf;\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\nconst { getTimeMs, randInt, randNum } = pf;\nconst { isNum, len, objKeys, range, toNum } = pf;\nimport { doTests } from \"./test\";\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\nimport { ExternalFunction, ExternalHandler } from \"./types\";\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\n\nconst externalOps: { [name: string]: ExternalHandler } = {};\nlet stack: Val[] = [];\nlet lets: { [key: string]: Val }[] = [];\nlet recurArgs: undefined | Val[];\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\nconst _num = (v: number) => stack.push({ t: \"num\", v });\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\n\nfunction exeOp(\n  op: string,\n  args: Val[],\n  ctx: Ctx,\n  errCtx: ErrCtx,\n  checkArity: boolean,\n): InvokeError[] | undefined {\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\n  //Optional arity check\n  if (checkArity) {\n    const violations = arityCheck(op, len(args), errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n  //Argument type check\n  {\n    const types = args.map(a => [a.t]);\n    const violations = typeCheck(op, types, errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n\n  switch (op) {\n    case \"str\":\n      stack.push({ t: \"str\", v: stringify(args) });\n      return;\n    case \"print\":\n    case \"print-str\":\n      ctx.print(stringify(args), op === \"print\");\n      _nul();\n      return;\n    case \"vec\":\n      _vec(args);\n      return;\n    case \"dict\":\n      stack.push(toDict(args));\n      return;\n    case \"len\":\n      _num(\n        args[0].t === \"str\"\n          ? slen(args[0].v)\n          : args[0].t === \"vec\"\n          ? len(args[0].v)\n          : len(dic(args[0]).keys),\n      );\n      return;\n    case \"to-num\":\n      if (isNum(args[0].v)) {\n        _num(toNum(args[0].v));\n      } else {\n        _nul();\n      }\n      return;\n    case \"to-key\":\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\n      return;\n    case \"!\":\n      _boo(!asBoo(args[0]));\n      return;\n    case \"=\":\n    case \"!=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\n          _boo(false);\n          return;\n        }\n      }\n      stack.push(args[0]);\n      return;\n    case \"-\":\n      _num(\n        len(args) === 1\n          ? -num(args[0])\n          : args.map(num).reduce((sum, n) => sum - n),\n      );\n      return;\n    case \"**\":\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\n      return;\n    case \"+\":\n      _num(args.map(num).reduce((sum, n) => sum + n));\n      return;\n    case \"*\":\n      _num(args.map(num).reduce((sum, n) => sum * n));\n      return;\n    case \"/\":\n      _num(args.map(num).reduce((sum, n) => sum / n));\n      return;\n    case \"//\":\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\n      return;\n    case \"fast=\":\n    case \"fast!=\":\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\n        _boo(false);\n        return;\n      }\n      stack.push(args[0]);\n      return;\n    case \"fast-\":\n      _num(<number>args[0].v - <number>args[1].v);\n      return;\n    case \"fast+\":\n      _num(<number>args[0].v + <number>args[1].v);\n      return;\n    case \"fast*\":\n      _num(<number>args[0].v * <number>args[1].v);\n      return;\n    case \"fast/\":\n      _num(<number>args[0].v / <number>args[1].v);\n      return;\n    case \"fast//\":\n      _num(floor(<number>args[0].v / <number>args[1].v));\n      return;\n    case \"fast<\":\n      _boo(<number>args[0].v < <number>args[1].v);\n      return;\n    case \"fast>\":\n      _boo(<number>args[0].v > <number>args[1].v);\n      return;\n    case \"fast<=\":\n      _boo(<number>args[0].v <= <number>args[1].v);\n      return;\n    case \"fast>=\":\n      _boo(<number>args[0].v >= <number>args[1].v);\n      return;\n    case \"rem\":\n      _num(args.map(num).reduce((sum, n) => sum % n));\n      return;\n    case \"min\":\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\n      return;\n    case \"max\":\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\n      return;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\n        if (\n          (op === \"<\" && a >= b) ||\n          (op === \">\" && a <= b) ||\n          (op === \"<=\" && a > b) ||\n          (op === \">=\" && a < b)\n        ) {\n          _boo(false);\n          return;\n        }\n      }\n      _boo(true);\n      return;\n    case \"inc\":\n      _num(<number>args[0].v + 1);\n      return;\n    case \"dec\":\n      _num(<number>args[0].v - 1);\n      return;\n    case \"abs\":\n      _num(abs(<number>args[0].v));\n      return;\n    case \"round\":\n      if (len(args) === 2) {\n        const x = 10 ** <number>args[0].v;\n        _num(round(<number>args[1].v * x) / x);\n      } else {\n        _num(round(<number>args[0].v));\n      }\n      return;\n    case \"sin\":\n    case \"cos\":\n    case \"tan\":\n    case \"sqrt\":\n    case \"floor\":\n    case \"ceil\":\n    case \"logn\":\n    case \"log2\":\n    case \"log10\": {\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\n      _num(f(num(args[0])));\n      return;\n    }\n    case \"and\":\n      _boo(args.every(asBoo));\n      return;\n    case \"or\":\n      _boo(args.some(asBoo));\n      return;\n    case \"xor\":\n      if (asBoo(args[0]) !== asBoo(args[1])) {\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\n      } else {\n        _boo(false);\n      }\n      return;\n    case \"&\":\n    case \"|\":\n    case \"^\":\n    case \"<<\":\n    case \">>\":\n    case \">>>\":\n      const [a, b] = [num(args[0]), num(args[1])];\n      _num(\n        op === \"&\"\n          ? a & b\n          : op === \"|\"\n          ? a | b\n          : op === \"^\"\n          ? a ^ b\n          : op === \"<<\"\n          ? a << b\n          : op === \">>\"\n          ? a >> b\n          : a >>> b,\n      );\n      return;\n    case \"~\":\n      _num(~num(args[0]));\n      return;\n    case \"odd?\":\n    case \"even?\":\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\n      return;\n    case \"pos?\":\n    case \"neg?\":\n    case \"zero?\": {\n      const n = num(args[0]);\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\n      return;\n    }\n    case \"null?\":\n    case \"num?\":\n    case \"bool?\":\n    case \"str?\":\n    case \"dict?\":\n    case \"vec?\":\n    case \"key?\":\n    case \"func?\":\n    case \"wild?\":\n    case \"ext?\": {\n      const { t } = args[0];\n      _boo(\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\n          substr(op, 0, slen(op) - 1) === t,\n      );\n      return;\n    }\n    case \"has?\":\n      _boo(sub(str(args[0]), str(args[1])));\n      return;\n    case \"idx\": {\n      let i = -1;\n      if (args[0].t === \"str\") {\n        if (args[1].t !== \"str\") {\n          return tErr(\"strings can only contain strings\");\n        }\n        if (len(args) < 3) {\n          i = subIdx(args[0].v, args[1].v);\n        } else {\n          const arr = args[0].v.split(\"\");\n          arr[num(args[2])] = args[1].v;\n          _str(arr.join(\"\"));\n          return;\n        }\n      } else if (args[0].t === \"vec\") {\n        if (len(args) < 3) {\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\n        } else {\n          const v = slice(args[0].v);\n          v[num(args[2])] = args[1];\n          _vec(v);\n          return;\n        }\n      }\n      if (i === -1) {\n        _nul();\n      } else {\n        _num(i);\n      }\n      return;\n    }\n    case \"map\":\n    case \"for\":\n    case \"reduce\":\n    case \"filter\":\n    case \"remove\":\n    case \"find\":\n    case \"count\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      if (op === \"map\" || op === \"for\") {\n        const badArg = args.findIndex(\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\n        );\n        if (badArg !== -1) {\n          const badType = typeNames[args[badArg].t];\n          return tErr(\n            `argument ${\n              badArg + 2\n            } must be either: string, vector, dictionary, not ${badType}`,\n          );\n        }\n      }\n\n      if (op === \"for\") {\n        const arrays = args.map(asArray);\n        const lims = arrays.map(len);\n        const divisors = lims.map((_, i) =>\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\n        );\n        divisors.unshift(1);\n        const lim = divisors.pop()!;\n        if (lim > ctx.loopBudget) {\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\n        }\n        const array: Val[] = [];\n        for (let t = 0; t < lim; ++t) {\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      if (op === \"map\") {\n        const arrays = args.map(asArray);\n        const shortest = min(...arrays.map(len));\n        const array: Val[] = [];\n        for (let i = 0; i < shortest; ++i) {\n          const errors = closure(arrays.map(a => a[i]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      if (op !== \"reduce\") {\n        const arrArg = args.shift()!;\n        const array = asArray(arrArg);\n        const isRemove = op === \"remove\",\n          isFind = op === \"find\",\n          isCount = op === \"count\";\n        const filtered: Val[] = [];\n        let count = 0;\n        for (let i = 0, lim = len(array); i < lim; ++i) {\n          const errors = closure([array[i], ...args]);\n          if (errors) {\n            return errors;\n          }\n          const b = asBoo(stack.pop()!);\n          if (isCount) {\n            count += b ? 1 : 0;\n          } else if (isFind) {\n            if (b) {\n              stack.push(array[i]);\n              return;\n            }\n          } else if (b !== isRemove) {\n            filtered.push(array[i]);\n          }\n        }\n        switch (op) {\n          case \"count\":\n            _num(count);\n            return;\n          case \"find\":\n            _nul();\n            return;\n        }\n        if (arrArg.t === \"str\") {\n          _str(filtered.map(v => val2str(v)).join(\"\"));\n        } else if (arrArg.t === \"dict\") {\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\n        } else {\n          _vec(filtered);\n        }\n        return;\n      }\n      const arrayVal = args.pop()!;\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\n        return tErr(\n          `must reduce either: string, vector, dictionary, not ${\n            typeNames[arrayVal.t]\n          }`,\n        );\n      }\n      const array = asArray(arrayVal);\n\n      if (!len(array)) {\n        if (len(args)) {\n          stack.push(args[0]);\n        } else {\n          _vec();\n        }\n        return;\n      }\n      if (len(array) < 2 && !len(args)) {\n        push(stack, array);\n        return;\n      }\n\n      let reduction: Val = (len(args) ? args : array).shift()!;\n      for (let i = 0, lim = len(array); i < lim; ++i) {\n        const errors = closure([reduction, array[i]]);\n        if (errors) {\n          return errors;\n        }\n        reduction = stack.pop()!;\n      }\n      stack.push(reduction);\n      return;\n    }\n    case \"repeat\": {\n      const toRepeat = args.shift()!;\n      const result: Val[] = [];\n      const count = num(args[0]);\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\n        const closure = getExe(ctx, toRepeat, errCtx);\n        for (let i = 0; i < count; ++i) {\n          const errors = closure([{ t: \"num\", v: i }]);\n          if (errors) {\n            return errors;\n          }\n          result.push(stack.pop()!);\n        }\n      } else {\n        for (let i = 0; i < count; ++i) {\n          result.push(toRepeat);\n        }\n      }\n      _vec(result);\n      return;\n    }\n    case \"->\": {\n      stack.push(args.shift()!);\n      for (let i = 0, lim = len(args); i < lim; ++i) {\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\n        if (errors) {\n          return errors;\n        }\n      }\n      return;\n    }\n    case \"rand-int\":\n    case \"rand\":\n      {\n        const nArgs = len(args);\n        const [a, b] = [\n          nArgs < 2 ? 0 : num(args[0]),\n          nArgs === 0\n            ? 1 + toNum(op === \"rand-int\")\n            : nArgs === 1\n            ? num(args[0])\n            : num(args[1]),\n        ];\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\n      }\n      return;\n    case \"do\":\n    case \"val\":\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\n      return;\n    case \".\":\n    case \"..\":\n    case \"...\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      if (op === \".\") {\n        return closure(args);\n      }\n      let flatArgs: Val[] = args;\n      if (op === \"..\") {\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\n      } else {\n        const a = flatArgs.pop()!;\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\n      }\n      return closure(flatArgs);\n    }\n    case \"into\": {\n      if (args[0].t === \"vec\") {\n        _vec(concat(args[0].v, asArray(args[1])));\n      } else {\n        if (args[1].t === \"vec\") {\n          stack.push(\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\n          );\n        } else {\n          const { keys, vals } = dic(args[0]);\n          const d1 = dic(args[1]);\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\n        }\n      }\n      return;\n    }\n    case \"push\": {\n      if (args[0].t === \"vec\") {\n        const v = args[0].v;\n        if (len(args) < 3) {\n          _vec(concat(v, [args[1]]));\n        } else {\n          const n = num(args[2]);\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\n        }\n      } else {\n        if (len(args) < 3) {\n          stack.push(dictDrop(dic(args[0]), args[1]));\n        } else {\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\n        }\n      }\n      return;\n    }\n    case \"sect\": {\n      const v = args[0];\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\n      let a = 0,\n        b = vlen;\n      switch (len(args)) {\n        case 1:\n          a = 1;\n          break;\n        case 2: {\n          const del = num(args[1]);\n          if (del < 0) {\n            b += del;\n          } else {\n            a += del;\n          }\n          break;\n        }\n        case 3: {\n          const skip = num(args[1]);\n          const take = num(args[2]);\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\n          b = (take < 0 ? b : a) + take;\n          break;\n        }\n      }\n      a = max(a, 0);\n      b = min(b, vlen);\n      if (a > b) {\n        (v.t === \"vec\" ? _vec : _str)();\n        return;\n      }\n      if (v.t === \"vec\") {\n        _vec(slice(v.v, a, b));\n      } else {\n        _str(substr(str(args[0]), a, b - a));\n      }\n      return;\n    }\n    case \"reverse\":\n      if (args[0].t === \"str\") {\n        _str(stringify(reverse(asArray(args[0]))));\n      } else {\n        _vec(reverse(asArray(args[0])));\n      }\n      return;\n    case \"sort\": {\n      const src = asArray(args[0]);\n      if (!len(src)) {\n        _vec();\n        return;\n      }\n      const mapped: Val[][] = [];\n      if (len(args) === 1) {\n        push(\n          mapped,\n          src.map(v => [v, v]),\n        );\n      } else {\n        const closure = getExe(ctx, args.pop()!, errCtx);\n        for (let i = 0, lim = len(src); i < lim; ++i) {\n          const errors = closure([src[i]]);\n          if (errors) {\n            return errors;\n          }\n          mapped.push([src[i], stack.pop()!]);\n        }\n      }\n      const okT = mapped[0][1].t;\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\n        return tErr(\"can only sort by all number or all string\");\n      }\n      if (mapped[0][1].t === \"num\") {\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\n      } else {\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\n      }\n      _vec(mapped.map(([v]) => v));\n      return;\n    }\n    case \"range\": {\n      const [a, b, s] = args.map(num);\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\n      const [x, y] =\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\n      const step = sign((y - x) * (s || 1)) * (s || 1);\n      const count = ceil(abs((y - x) / step));\n      if (!count) {\n        _vec([]);\n        return;\n      }\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      const nums = range(count).map(n => n * step + x);\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\n      return;\n    }\n    case \"empty?\":\n      _boo(!len(asArray(args[0])));\n      return;\n    case \"keys\":\n    case \"vals\":\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\n      return;\n    case \"split\":\n      _vec(\n        str(args[len(args) - 1])\n          .split(len(args) - 1 ? str(args[0]) : \" \")\n          .map(v => <Val>{ t: \"str\", v }),\n      );\n      return;\n    case \"join\":\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\n      return;\n    case \"starts?\":\n    case \"ends?\":\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\n      return;\n    case \"upper-case\":\n    case \"lower-case\":\n    case \"trim\":\n    case \"trim-start\":\n    case \"trim-end\":\n      _str(\n        (op === \"upper-case\"\n          ? upperCase\n          : op === \"lower-case\"\n          ? lowerCase\n          : op === \"trim\"\n          ? trim\n          : op === \"trim-start\"\n          ? trimStart\n          : trimEnd)(str(args[0])),\n      );\n      return;\n    case \"str*\": {\n      const text = str(args[0]);\n      _str(\n        range(max(ceil(num(args[1])), 0))\n          .map(n => text)\n          .join(\"\"),\n      );\n      return;\n    }\n    case \"char-code\": {\n      if (args[0].t === \"str\") {\n        const n = len(args) > 1 ? num(args[1]) : 0;\n        const s = str(args[0]);\n        if (slen(s) <= n || n < 0) {\n          _nul();\n        } else {\n          _num(charCode(strIdx(s, n)));\n        }\n      } else {\n        _str(codeChar(num(args[0])));\n      }\n      return;\n    }\n    case \"time\":\n      _num(getTimeMs());\n      return;\n    case \"version\":\n      _num(insituxVersion);\n      return;\n    case \"tests\":\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\n      return;\n    case \"symbols\":\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\n      return;\n    case \"eval\": {\n      delete ctx.env.funcs[\"entry\"];\n      const sLen = len(stack);\n      const invokeId = `${errCtx.invokeId} eval`;\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\n      if (errors) {\n        return [\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\n          ...errors,\n        ];\n      }\n      if (sLen === len(stack)) {\n        _nul();\n      }\n      return;\n    }\n    case \"recur\":\n      recurArgs = args;\n      return;\n    case \"reset\":\n      ctx.env.vars = {};\n      ctx.env.funcs = {};\n      lets = [];\n      _nul();\n      return;\n  }\n\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\n}\n\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\n  {\n    e: \"Arity\",\n    m: `${typeNames[t]} as op requires one sole argument`,\n    errCtx,\n  },\n];\nfunction getExe(\n  ctx: Ctx,\n  op: Val,\n  errCtx: ErrCtx,\n  checkArity = true,\n): (params: Val[]) => InvokeError[] | undefined {\n  if (op.t === \"str\" || op.t === \"func\") {\n    const name = op.v;\n    if (ops[name]) {\n      if (ops[name].external) {\n        return (params: Val[]) => {\n          const valOrErr = externalOps[name](params);\n          if (valOrErr.kind === \"err\") {\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\n          }\n          stack.push(valOrErr.value);\n        };\n      }\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\n    }\n    if (name in ctx.env.funcs) {\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\n    }\n    if (name in ctx.env.vars) {\n      return getExe(ctx, ctx.env.vars[name], errCtx);\n    }\n    if (name in lets[len(lets) - 1]) {\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\n    }\n    if (starts(name, \"$\")) {\n      return (params: Val[]) => {\n        if (!len(params)) {\n          return monoArityError(op.t, errCtx);\n        }\n        const err = ctx.set(substr(name, 1), params[0]);\n        stack.push(params[0]);\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n      };\n    }\n    return (params: Val[]) => {\n      const valAndErr = ctx.exe(name, params);\n      if (valAndErr.kind === \"val\") {\n        stack.push(valAndErr.value);\n        return;\n      }\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\n    };\n  } else if (op.t === \"clo\") {\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\n  } else if (op.t === \"key\") {\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      if (params[0].t === \"dict\") {\n        stack.push(dictGet(dic(params[0]), op));\n      } else if (params[0].t === \"vec\") {\n        const found = vec(params[0]).find(v => isEqual(v, op));\n        stack.push(found ?? { t: \"null\", v: undefined });\n      } else {\n        return keyOpErr(errCtx, [params[0].t]);\n      }\n      return;\n    };\n  } else if (op.t === \"num\") {\n    const n = floor(op.v);\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      const a = params[0];\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\n        return numOpErr(errCtx, [a.t]);\n      }\n      const arr = asArray(a),\n        alen = len(arr);\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\n        _nul();\n      } else if (n < 0) {\n        stack.push(arr[alen + n]);\n      } else {\n        stack.push(arr[n]);\n      }\n      return;\n    };\n  } else if (op.t === \"vec\") {\n    const { v } = op;\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      const found = v.find(val => isEqual(val, params[0]));\n      if (found) {\n        stack.push(found);\n      } else {\n        _nul();\n      }\n      return;\n    };\n  } else if (op.t === \"dict\") {\n    const dict = op.v;\n    return (params: Val[]) => {\n      if (len(params) === 1) {\n        stack.push(dictGet(dict, params[0]));\n      } else if (len(params) === 2) {\n        _dic(dictSet(dict, params[0], params[1]));\n      } else {\n        return [\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\n        ];\n      }\n      return;\n    };\n  } else if (op.t === \"bool\") {\n    const cond = op.v;\n    return (params: Val[]) => {\n      if (!len(params) || len(params) > 2) {\n        return [\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\n        ];\n      }\n      stack.push(\n        cond\n          ? params[0]\n          : len(params) > 1\n          ? params[1]\n          : { t: \"null\", v: undefined },\n      );\n      return;\n    };\n  }\n  return _ => [\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\n  ];\n}\n\nfunction errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n\nfunction destruct(args: Val[], shape: number[]): Val {\n  let arr: Val[] = args;\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\n    const val = arr[shape[a]];\n    if (val.t === \"vec\") {\n      arr = val.v;\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\n    } else {\n      return { t: \"null\", v: undefined };\n    }\n  }\n  const pos = shape[len(shape) - 1];\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\n}\n\nfunction exeFunc(\n  ctx: Ctx,\n  func: Func,\n  args: Val[],\n  inClosure = false,\n): InvokeError[] | undefined {\n  --ctx.callBudget;\n  if (!inClosure) {\n    lets.push({});\n  }\n  const stackLen = len(stack);\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\n    const ins = func.ins[i];\n    const { errCtx } = func.ins[i];\n\n    const tooManyLoops = ctx.loopBudget < 1;\n    if (tooManyLoops || ctx.callBudget < 1) {\n      return [\n        {\n          e: \"Budget\",\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\n          errCtx,\n        },\n      ];\n    }\n\n    switch (ins.typ) {\n      case \"val\":\n        stack.push(ins.value);\n        break;\n      case \"var\":\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\n        break;\n      case \"let\":\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\n        break;\n      case \"dle\":\n      case \"dva\": {\n        const val = stack.pop()!;\n        let last: Val | undefined;\n        ins.value.forEach(({ name, position }) => {\n          if (ins.typ === \"dva\") {\n            last = ctx.env.vars[name] = destruct([val], position);\n          } else {\n            last = lets[len(lets) - 1][name] = destruct([val], position);\n          }\n        });\n        stack.push(last!);\n        break;\n      }\n      case \"npa\":\n      case \"upa\": {\n        const paramIdx = ins.value;\n        if (paramIdx === -1) {\n          _vec(args);\n        } else if (len(args) <= paramIdx) {\n          _nul();\n        } else {\n          stack.push(args[paramIdx]);\n        }\n        break;\n      }\n      case \"dpa\":\n        stack.push(destruct(args, ins.value));\n        break;\n      case \"ref\": {\n        const name = ins.value;\n        if (ops[name]) {\n          _fun(name);\n        } else if (starts(name, \"$\")) {\n          const valAndErr = ctx.get(substr(name, 1));\n          if (valAndErr.kind === \"err\") {\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\n          }\n          stack.push(valAndErr.value);\n        } else if (name in ctx.env.vars) {\n          stack.push(ctx.env.vars[name]);\n        } else if (name in lets[len(lets) - 1]) {\n          stack.push(lets[len(lets) - 1][name]);\n        } else if (name in ctx.env.funcs) {\n          _fun(name);\n        } else {\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\n        }\n        break;\n      }\n      case \"exa\":\n      case \"exe\": {\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\n        const nArgs = ins.value;\n        const params = splice(stack, len(stack) - nArgs, nArgs);\n        const errors = closure(params);\n        if (errors) {\n          //Find next catch statement\n          const nextCat = slice(func.ins, i).findIndex(\n            ins => ins.typ === \"cat\",\n          );\n          if (nextCat !== -1) {\n            i += nextCat;\n            lets[len(lets) - 1][\"errors\"] = {\n              t: \"vec\",\n              v: errorsToDict(errors),\n            };\n            break;\n          }\n          return errors;\n        }\n        if (recurArgs) {\n          lets[len(lets) - 1] = {};\n          i = -1;\n          const nArgs = ins.value;\n          args = recurArgs;\n          recurArgs = undefined;\n          --ctx.recurBudget;\n          if (!ctx.recurBudget) {\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\n          }\n          break;\n        }\n        break;\n      }\n      case \"or\":\n        if (asBoo(stack[len(stack) - 1])) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      case \"mat\": {\n        const a = stack[len(stack) - 2];\n        if (!isEqual(a, stack.pop()!)) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      }\n      case \"if\":\n        if (!asBoo(stack.pop()!)) {\n          i += ins.value;\n        }\n        break;\n      case \"jmp\":\n      case \"cat\":\n        i += ins.value;\n        break;\n      case \"loo\":\n        i += ins.value;\n        --ctx.loopBudget;\n        break;\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          splice(stack, stackLen, len(stack) - stackLen - 1);\n        } else {\n          _nul();\n        }\n        i = lim;\n        break;\n      case \"clo\":\n      case \"par\": {\n        const { name, captured, captureIns } = ins.value;\n        let { closureIns: cins } = ins.value;\n        const newCins: Ins[] = [];\n        if (!len(captureIns)) {\n          push(newCins, cins);\n        } else {\n          cins = cins.map((ins, i) => {\n            const decl =\n              ins.typ === \"val\" &&\n              ins.value.t === \"str\" &&\n              (lets[len(lets) - 1][ins.value.v] ?? ctx.env.vars[ins.value.v]);\n            captured[i] = decl ? false : captured[i];\n            return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\n          });\n          const errors = exeFunc(ctx, { ins: captureIns }, args, true);\n          if (errors) {\n            return errors;\n          }\n          const numIns = len(captureIns);\n          const captures = splice(stack, len(stack) - numIns, numIns);\n          const cap = (value: Val) => <Ins>{ typ: \"val\", value, errCtx };\n          for (let i = 0, c = 0; i < len(captured); ++i) {\n            newCins.push(captured[i] ? cap(captures[c++]) : cins[i]);\n          }\n        }\n        stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: newCins } });\n        break;\n      }\n      default:\n        assertUnreachable(ins);\n    }\n  }\n  if (!inClosure) {\n    lets.pop();\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\n  }\n  return;\n}\n\nfunction parseAndExe(\n  ctx: Ctx,\n  code: string,\n  invokeId: string,\n): InvokeError[] | undefined {\n  const parsed = parse(code, invokeId);\n  if (len(parsed.errors)) {\n    return parsed.errors;\n  }\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\n  if (!(\"entry\" in ctx.env.funcs)) {\n    return;\n  }\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\n}\n\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\n  functions.forEach(({ name, definition, handler }) => {\n    if (ops[name] && !externalOps[name]) {\n      throw \"Redefining internal operations is disallowed.\";\n    }\n    ops[name] = { ...definition, external: true };\n    externalOps[name] = handler;\n  });\n}\n\nfunction removeExternalOperations(functions: ExternalFunction[]) {\n  functions.forEach(({ name }) => {\n    delete ops[name];\n    delete externalOps[name];\n  });\n}\n\nfunction innerInvoke(\n  ctx: Ctx,\n  closure: () => InvokeError[] | undefined,\n): InvokeResult {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  ingestExternalOperations(ctx.functions);\n  const errors = closure();\n  removeExternalOperations(ctx.functions);\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\n  delete ctx.env.funcs[\"entry\"];\n  const value = stack.pop();\n  [stack, lets] = [[], []];\n  return errors\n    ? { kind: \"errors\", errors }\n    : value\n    ? { kind: \"val\", value }\n    : { kind: \"empty\" };\n}\n\n/**\n * Parses and executes the given code.\n * @param ctx An environment context you retain.\n * @param code The code to parse and execute.\n * @param invokeId A unique ID referenced in invocation errors.\n * @param printResult Automatically print the final value of this invocation?\n * @returns Invocation errors caused during execution of the code,\n * or the final value of the invocation.\n */\nexport function invoke(\n  ctx: Ctx,\n  code: string,\n  invokeId: string,\n  printResult = false,\n): InvokeResult {\n  const result = innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId));\n  if (printResult && result.kind === \"val\") {\n    ctx.print(val2str(result.value), true);\n  }\n  return result;\n}\n\n/**\n * Executes a user-defined Insitux function by name.\n * @param ctx An environment context you retain.\n * @param funcName The function to execute.\n * @param params The parameters to pass to the function.\n * @returns Invocation errors caused during execution of the function,\n * or the final value of the invocation,\n * or undefined if the function was not found.\n */\nexport function invokeFunction(\n  ctx: Ctx,\n  funcName: string,\n  params: Val[],\n): InvokeResult | undefined {\n  if (!(funcName in ctx.env.funcs)) {\n    return;\n  }\n  return innerInvoke(ctx, () => exeFunc(ctx, ctx.env.funcs[funcName], params));\n}\n\n/**\n * @param ctx An environment context you retain.\n * @param alsoSyntax To optionally include syntax symbols.\n * @returns List of symbols defined in Insitux, including built-in operations,\n * (optionally) syntax, constants, and user-defined functions.\n */\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\n  let syms = alsoSyntax\n    ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"when\", \"while\", \"match\", \"catch\"]\n    : [];\n  push(syms, [\"args\", \"PI\", \"E\"]);\n  syms = concat(syms, objKeys(ops));\n  syms = concat(syms, objKeys(ctx.env.funcs));\n  syms = concat(syms, objKeys(ctx.env.vars));\n  const hidden = [\"entry\"];\n  syms = syms.filter(o => !has(hidden, o));\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\n}\n","import { invoke } from \".\";\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\nimport { getTimeMs } from \"./poly-fills\";\nimport { Ctx } from \"./types\";\n\nexport type InvokeOutput = {\n  type: \"message\" | \"error\";\n  text: string;\n}[];\n\nconst invocations = new Map<string, string>();\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\n\nexport function invoker(ctx: Ctx, code: string, id?: string): InvokeOutput {\n  id = id ? `-${id}` : `${getTimeMs()}`;\n  invocations.set(id, code);\n  const valOrErrs = invoke(ctx, code, id, true);\n  if (valOrErrs.kind !== \"errors\") {\n    return [];\n  }\n  let out: InvokeOutput = [];\n  const msg = (text: string) => out.push({ type: \"message\", text });\n  const err = (text: string) => out.push({ type: \"error\", text });\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\n    const invocation = invocations.get(invokeId);\n    if (!invocation) {\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\n      return;\n    }\n    const lineText = invocation.split(\"\\n\")[line - 1];\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\n    const half1 = trimStart(substr(lineText, 0, col - 1));\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\n    if (!sym) {\n      const half2 = substr(lineText, col);\n      err(lineText[col - 1]);\n      msg(`${half2}\\n`);\n    } else {\n      const half2 = substr(lineText, col - 1 + slen(sym));\n      err(sym);\n      msg(`${half2}\\n`);\n    }\n    msg(`${e} Error: ${m}.\\n`);\n  });\n  return out;\n}\n","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = <T>(arr: T[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const charCode = (str: string): number => str.charCodeAt(0);\nexport const codeChar = (num: number): string => String.fromCharCode(num);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;\n","export type Val =\n  | { t: \"vec\"; v: Val[] }\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\n  | { t: \"null\"; v: undefined }\n  | { t: \"wild\"; v: undefined }\n  | { t: \"bool\"; v: boolean }\n  | { t: \"num\"; v: number }\n  | { t: \"clo\"; v: Func }\n  | { t: \"dict\"; v: Dict }\n  | { t: \"ext\"; v: unknown };\n\nexport type ErrCtx = { invokeId: string; line: number; col: number };\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\nexport type ValOrErr =\n  | { kind: \"val\"; value: Val }\n  | { kind: \"err\"; err: string };\n/**\n * @summary \"empty\" occurs when there was only function declaration;\n *          \"val\" occurs when there were no errors and there is a final value;\n *          \"errors\" occurs when there were any errors.\n */\nexport type InvokeResult =\n  | { kind: \"empty\" }\n  | { kind: \"val\"; value: Val }\n  | { kind: \"errors\"; errors: InvokeError[] };\n\nexport type Dict = {\n  keys: Val[];\n  vals: Val[];\n};\n\nexport type Func = {\n  name?: string;\n  ins: Ins[];\n};\nexport type Funcs = { [key: string]: Func };\nexport type Env = {\n  funcs: Funcs;\n  vars: { [key: string]: Val };\n};\n\n/** A context supplied with an Insitux invocation to provide its environment. */\nexport type Ctx = {\n  /** Called to set an external variable, returning nothing or an error. */\n  set: (key: string, val: Val) => undefined | string;\n  /** Called to retrieve an external variable,\n   * returning the value or an error. */\n  get: (key: string) => ValOrErr;\n  /** Called to print data out of Insitux. */\n  print: (str: string, withNewline: boolean) => void;\n  /** Extra function definitions to make available within this invocation */\n  functions: ExternalFunction[];\n  /** Called when Insitux cannot find a function definition otherwise.\n   * You should return an error if unknown externally too. */\n  exe: (name: string, args: Val[]) => ValOrErr;\n  /** Function and variable definitions, retained by you for each invocation. */\n  env: Env;\n  /** The number of loops an invocation is permitted. */\n  loopBudget: number;\n  /** The total length of all `range` calls permitted. */\n  rangeBudget: number;\n  /** The total number of function calls permitted. */\n  callBudget: number;\n  /** The total number of explicit recursions permitted.\n   * Explicit recursions are unlikely to cause a stack-overflow. */\n  recurBudget: number;\n};\n\nexport const defaultCtx = {\n  env: { funcs: {}, vars: {} },\n  loopBudget: 1e7,\n  rangeBudget: 1e6,\n  callBudget: 1e8,\n  recurBudget: 1e4,\n};\n\nexport type ParamsShape = { name: string; position: number[] }[];\nexport type Closure = {\n  name: string;\n  closureIns: Ins[];\n  captured: boolean[];\n  captureIns: Ins[];\n};\n\nexport type Ins = { errCtx: ErrCtx } & (\n  | { typ: \"val\"; value: Val }\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\n  | { typ: \"ret\"; value: boolean } //Return, with value?\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\n  | { typ: \"clo\" | \"par\"; value: Closure } //Closure and partial, text representation and instructions\n);\n\n/** Definition of an operation in Insitux,\n * with guarantees made for arity (number of parameters) and parameter types.\n * Return type is specified to inform the parse-time type-checker. */\nexport type Operation = {\n  minArity?: number;\n  maxArity?: number;\n  exactArity?: number;\n  numeric?: true | \"in only\";\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\n  returns?: Val[\"t\"][];\n};\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\nexport type ExternalFunction = {\n  name: string;\n  definition: Operation;\n  handler: ExternalHandler;\n};\n\nexport const ops: {\n  [name: string]: Operation & { external?: boolean };\n} = {\n  print: { returns: [\"null\"] },\n  \"print-str\": { returns: [\"null\"] },\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\n  \"=\": { minArity: 2 },\n  \"!=\": { minArity: 2 },\n  \"+\": { minArity: 2, numeric: true },\n  \"-\": { minArity: 1, numeric: true },\n  \"*\": { minArity: 2, numeric: true },\n  \"/\": { minArity: 2, numeric: true },\n  \"//\": { minArity: 2, numeric: true },\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\n  \"<\": { minArity: 2, numeric: true },\n  \">\": { minArity: 2, numeric: true },\n  \"<=\": { minArity: 2, numeric: true },\n  \">=\": { minArity: 2, numeric: true },\n  \"fast=\": { exactArity: 2 },\n  \"fast!=\": { exactArity: 2 },\n  \"fast+\": { exactArity: 2, numeric: true },\n  \"fast-\": { exactArity: 2, numeric: true },\n  \"fast*\": { exactArity: 2, numeric: true },\n  \"fast/\": { exactArity: 2, numeric: true },\n  \"fast//\": { exactArity: 2, numeric: true },\n  \"fast<\": { exactArity: 2, numeric: true },\n  \"fast>\": { exactArity: 2, numeric: true },\n  \"fast<=\": { exactArity: 2, numeric: true },\n  \"fast>=\": { exactArity: 2, numeric: true },\n  inc: { exactArity: 1, numeric: true },\n  dec: { exactArity: 1, numeric: true },\n  min: { minArity: 2, numeric: true },\n  max: { minArity: 2, numeric: true },\n  abs: { exactArity: 1, numeric: true },\n  sqrt: { exactArity: 1, numeric: true },\n  round: { minArity: 1, maxArity: 2, numeric: true },\n  floor: { exactArity: 1, numeric: true },\n  ceil: { exactArity: 1, numeric: true },\n  logn: { exactArity: 1, numeric: true },\n  log2: { exactArity: 1, numeric: true },\n  log10: { exactArity: 1, numeric: true },\n  and: { minArity: 1 },\n  or: { minArity: 1 },\n  xor: { exactArity: 2 },\n  \"&\": { exactArity: 2, numeric: true },\n  \"|\": { exactArity: 2, numeric: true },\n  \"^\": { exactArity: 2, numeric: true },\n  \"~\": { exactArity: 1, numeric: true },\n  \"<<\": { exactArity: 2, numeric: true },\n  \">>\": { exactArity: 2, numeric: true },\n  \">>>\": { exactArity: 2, numeric: true },\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\n  rem: { minArity: 2, numeric: true },\n  sin: { exactArity: 1, numeric: true },\n  cos: { exactArity: 1, numeric: true },\n  tan: { exactArity: 1, numeric: true },\n  vec: { returns: [\"vec\"] },\n  dict: { returns: [\"dict\"] },\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\n  \"to-num\": {\n    exactArity: 1,\n    params: [[\"str\", \"num\"]],\n    returns: [\"num\", \"null\"],\n  },\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  idx: { minArity: 2, maxArity: 3, params: [[\"str\", \"vec\"]], returns: [\"num\"] },\n  map: { minArity: 2, returns: [\"vec\"] },\n  for: { minArity: 2, returns: [\"vec\"] },\n  reduce: { minArity: 2, maxArity: 3 },\n  filter: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\", \"str\", \"dict\"],\n  },\n  remove: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\", \"str\", \"dict\"],\n  },\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\n  count: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"num\"],\n  },\n  repeat: { minArity: 2, params: [[], \"num\"] },\n  \"->\": { minArity: 2 },\n  str: { returns: [\"str\"] },\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \".\": { minArity: 1 },\n  \"..\": { minArity: 2 },\n  \"...\": { minArity: 2 },\n  into: {\n    exactArity: 2,\n    params: [\n      [\"vec\", \"dict\"],\n      [\"vec\", \"dict\"],\n    ],\n    returns: [\"vec\", \"dict\"],\n  },\n  push: {\n    minArity: 2,\n    maxArity: 3,\n    params: [[\"vec\", \"dict\"]],\n    returns: [\"vec\", \"dict\"],\n  },\n  sect: {\n    minArity: 1,\n    maxArity: 3,\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\n    returns: [\"vec\", \"str\"],\n  },\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\n  sort: {\n    minArity: 1,\n    maxArity: 2,\n    params: [[\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\"],\n  },\n  keys: { exactArity: 1, params: [\"dict\"] },\n  vals: { exactArity: 1, params: [\"dict\"] },\n  do: { minArity: 1 },\n  val: { minArity: 1 },\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\n  \"empty?\": {\n    exactArity: 1,\n    params: [[\"str\", \"vec\", \"dict\"]],\n    returns: [\"bool\"],\n  },\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\n  join: {\n    exactArity: 2,\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\n    returns: [\"str\"],\n  },\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\n  \"char-code\": {\n    minArity: 1,\n    maxArity: 2,\n    params: [[\"str\", \"num\"], \"num\"],\n    returns: [\"str\", \"num\", \"null\"],\n  },\n  time: { exactArity: 0, returns: [\"num\"] },\n  version: { exactArity: 0, returns: [\"num\"] },\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\n  symbols: { exactArity: 0, returns: [\"vec\"] },\n  eval: { exactArity: 1, params: [\"str\"] },\n  reset: { exactArity: 0 },\n  recur: {},\n};\n\nexport const typeNames = {\n  null: \"null\",\n  str: \"string\",\n  num: \"number\",\n  bool: \"boolean\",\n  key: \"keyword\",\n  ref: \"reference\",\n  vec: \"vector\",\n  dict: \"dictionary\",\n  func: \"function\",\n  clo: \"closure\",\n  wild: \"wildcard\",\n  ext: \"external\",\n};\n\nexport const assertUnreachable = (_x: never): never => <never>0;\n","import { len, slice, splice } from \"./poly-fills\";\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\n\nexport const num = ({ v }: Val) => v as number;\nexport const str = ({ v }: Val) => v as string;\nexport const vec = ({ v }: Val) => v as Val[];\nexport const dic = ({ v }: Val) => v as Dict;\n\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\n\nexport const isEqual = (a: Val, b: Val) => {\n  if (a.t === \"wild\" || b.t === \"wild\") {\n    return true;\n  }\n  if (a.t !== b.t) {\n    return false;\n  }\n  switch (a.t) {\n    case \"null\":\n      return true;\n    case \"bool\":\n      return a.v === b.v;\n    case \"num\":\n      return a.v === b.v;\n    case \"vec\":\n      return isVecEqual(a.v, vec(b));\n    case \"dict\": {\n      const bd = dic(b);\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\n    }\n    case \"str\":\n    case \"ref\":\n    case \"key\":\n    case \"func\":\n      return str(a) === str(b);\n    case \"clo\":\n      return (<Func>a.v).name === (<Func>b.v).name;\n    case \"ext\":\n      return a.v === b.v;\n  }\n  return assertUnreachable(a);\n};\n\nexport const stringify = (vals: Val[]) =>\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\n\nexport const val2str = (val: Val): string => {\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\n  if (val.t === \"clo\") {\n    return val.v.name ?? \"\";\n  } else if (val.t === \"vec\") {\n    return `[${val.v.map(quoted).join(\" \")}]`;\n  } else if (val.t === \"dict\") {\n    const { keys, vals } = val.v;\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\n    return `{${entries.join(\", \")}}`;\n  } else if (val.t === \"null\") {\n    return \"null\";\n  } else if (val.t === \"wild\") {\n    return \"_\";\n  }\n  return `${val.v}`;\n};\n\nexport const asArray = (val: Val): Val[] =>\n  val.t === \"vec\"\n    ? slice(val.v)\n    : val.t === \"str\"\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\n    : val.t === \"dict\"\n    ? val.v.keys.map((k, i) => ({\n        t: \"vec\",\n        v: [k, val.v.vals[i]],\n      }))\n    : [];\n\nexport const toDict = (args: Val[]): Val => {\n  if (len(args) % 2 === 1) {\n    args.pop();\n  }\n  const keys = args.filter((_, i) => i % 2 === 0);\n  const vals = args.filter((_, i) => i % 2 === 1);\n  const ddKeys: Val[] = [],\n    ddVals: Val[] = [];\n  keys.forEach((key, i) => {\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\n    if (existingIdx === -1) {\n      ddKeys.push(key);\n      ddVals.push(vals[i]);\n    } else {\n      ddVals[existingIdx] = vals[i];\n    }\n  });\n  return {\n    t: \"dict\",\n    v: { keys: ddKeys, vals: ddVals },\n  };\n};\n\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\n  const idx = keys.findIndex(k => isEqual(k, key));\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\n};\n\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    nVals[idx] = val;\n  } else {\n    nKeys.push(key);\n    nVals.push(val);\n  }\n  return <Dict>{ keys: nKeys, vals: nVals };\n};\n\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    splice(nKeys, idx, 1);\n    splice(nVals, idx, 1);\n  }\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\n};\n\nexport function errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { invoker } from \"./invoker\";\nimport { Ctx, defaultCtx, ExternalFunction, Val, ValOrErr } from \"./types\";\nimport { num, str, val2str } from \"./val\";\n\nconst e = (el: string) => document.querySelector(el);\nlet state = new Map<string, Val>();\n\nconst get = (key: string): ValOrErr =>\n  state.has(key) ? { kind: \"val\", value: state.get(key)! } : nullValOrErr;\nconst set = (key: string, val: Val) => {\n  state.set(key, val);\n  localStorage.setItem(\"insitux-state\", JSON.stringify([...state.entries()]));\n  return undefined;\n};\n\nfunction exe(name: string, args: Val[]): ValOrErr {\n  if (args.length && args[0].t == \"str\" && args[0].v.startsWith(\"$\")) {\n    if (args.length === 1) {\n      return get(`${args[0].v.substring(1)}.${name}`);\n    } else {\n      set(`${args[0].v.substring(1)}.${name}`, args[1]);\n      return { kind: \"val\", value: args[1] };\n    }\n  }\n  return { kind: \"err\", err: `operation ${name} does not exist` };\n}\n\nconst nullVal: Val = { t: \"null\", v: undefined };\nconst nullValOrErr: ValOrErr = { kind: \"val\", value: nullVal };\nconst v2e = (val: Val) => (val.t === \"str\" ? e(val.v) : <HTMLElement>val.v);\nconst functions: ExternalFunction[] = [\n  {\n    name: \"js\",\n    definition: { minArity: 1, params: [\"str\"] },\n    handler: params => {\n      const func = eval(str(params[0]));\n      const v = func(params.slice(1).map(a => a.v));\n      let value: Val = { t: \"ext\", v };\n      if (typeof v === \"string\") value = { t: \"str\", v };\n      return { kind: \"val\", value };\n    },\n  },\n  {\n    name: \"html\",\n    definition: { exactArity: 2, params: [[\"str\", \"ext\"]], returns: [\"str\"] },\n    handler: ([el, html]) => {\n      const element = v2e(el);\n      if (element) {\n        element.innerHTML = val2str(html);\n      }\n      return nullValOrErr;\n    },\n  },\n  {\n    name: \"new-el\",\n    definition: {\n      minArity: 2,\n      maxArity: 3,\n      params: [\"str\", \"str\", \"dict\"],\n      returns: [\"ext\"],\n    },\n    handler: ([tag, body, props]) => {\n      if (str(tag) === \"text\") {\n      }\n      const el = document.createElement(str(tag));\n      el.innerHTML = str(body);\n      return { kind: \"val\", value: { t: \"ext\", v: el } };\n    },\n  },\n  {\n    name: \"new-text-el\",\n    definition: { exactArity: 1, params: [\"str\"], returns: [\"ext\"] },\n    handler: ([text]) => {\n      const el = document.createTextNode(str(text));\n      return { kind: \"val\", value: { t: \"ext\", v: el } };\n    },\n  },\n  {\n    name: \"child-at\",\n    definition: {\n      exactArity: 2,\n      params: [[\"str\", \"ext\"], \"num\"],\n      returns: [\"ext\", \"null\"],\n    },\n    handler: ([parent, index]) => {\n      const el = v2e(parent)?.childNodes[num(index)];\n      return { kind: \"val\", value: el ? { t: \"ext\", v: el } : nullVal };\n    },\n  },\n  {\n    name: \"append-child\",\n    definition: {\n      exactArity: 2,\n      params: [[\"str\", \"ext\"], \"ext\"],\n      returns: [\"null\"],\n    },\n    handler: ([parent, child]) => {\n      const parentEl = v2e(parent);\n      parentEl?.appendChild(<HTMLElement>child.v);\n      return nullValOrErr;\n    },\n  },\n  {\n    name: \"remove-child\",\n    definition: {\n      exactArity: 2,\n      params: [[\"str\", \"ext\"], \"num\"],\n      returns: [\"null\"],\n    },\n    handler: ([parent, index]) => {\n      if (parent.t === \"str\") {\n        const parentEl = v2e(parent);\n        parentEl?.removeChild(parentEl.childNodes[num(index)]);\n      }\n      return nullValOrErr;\n    },\n  },\n  {\n    name: \"replace-child\",\n    definition: {\n      exactArity: 3,\n      params: [[\"str\", \"ext\"], \"ext\", \"num\"],\n      returns: [\"null\"],\n    },\n    handler: ([parent, child, index]) => {\n      const [parentEl, childEl] = [v2e(parent), v2e(child)];\n      const replacedEl = parentEl?.childNodes[num(index)];\n      if (parentEl && childEl && replacedEl) {\n        parentEl.replaceChild(childEl, replacedEl);\n      }\n      return nullValOrErr;\n    },\n  },\n  {\n    name: \"prompt\",\n    definition: { exactArity: 1, returns: [\"str\", \"null\"] },\n    handler: params => {\n      const reply = prompt(val2str(params[0]));\n      return { kind: \"val\", value: reply ? { t: \"str\", v: reply } : nullVal };\n    },\n  },\n  {\n    name: \"alert\",\n    definition: { exactArity: 1, returns: [\"null\"] },\n    handler: params => {\n      alert(val2str(params[0]));\n      return nullValOrErr;\n    },\n  },\n  {\n    name: \"interval\",\n    definition: { exactArity: 2, params: [\"func\", \"num\"], returns: [\"null\"] },\n    handler: ([func, interval]) => {\n      setInterval(() => invoker(ctx, `(${func.v})`), num(interval));\n      return nullValOrErr;\n    },\n  },\n  {\n    name: \"timeout\",\n    definition: { exactArity: 2, params: [\"func\", \"num\"], returns: [\"null\"] },\n    handler: ([func, interval]) => {\n      setTimeout(() => invoker(ctx, `(${func.v})`), num(interval));\n      return nullValOrErr;\n    },\n  },\n];\n\nconst ctx: Ctx = {\n  ...defaultCtx,\n  exe,\n  get,\n  set,\n  print: str => console.log(str),\n  functions,\n};\n\nconst loadScript = async (scriptEl: HTMLScriptElement) => {\n  const code = scriptEl.src\n    ? await (await fetch(scriptEl.src)).text()\n    : scriptEl.innerHTML;\n  window.ix(code);\n};\n\nwindow.onload = async () => {\n  const savedState = localStorage.getItem(\"insitux-state\");\n  state = new Map<string, Val>(savedState ? JSON.parse(savedState) : []);\n  console.log(state);\n  const scripts = Array.from(document.querySelectorAll(\"script\")).filter(\n    el => el.type === \"text/insitux\",\n  );\n  for (let s = 0; s < scripts.length; ++s) {\n    await loadScript(scripts[s]);\n  }\n};\n\ndeclare global {\n  interface Window {\n    ix: (code: string) => void;\n  }\n}\n\nwindow.ix = code => {\n  const errors = invoker(ctx, code);\n  if (errors.length > 0) {\n    const errorTexts = errors.map(({ type, text }) =>\n      type === \"error\" ? [...text, \"\"].join(\"\\u0332\") : text,\n    );\n    alert(`---- Insitux\\n${errorTexts.join(\"\")}`);\n  }\n};\n"],"names":["asBoo","val","t","v","arityCheck","op","nArg","errCtx","exactArity","maxArity","minArity","aErr","msg","amount","e","m","typeCheck","args","optimistic","params","types","numeric","onlyNum","len","nonNumArgIdx","findIndex","a","find","names","map","join","typeErr","typeViolations","need","i","argTypes","isArray","some","has","filter","r","numOpErr","keyOpErr","flat","push","slice","splice","slen","starts","sub","substr","strIdx","subIdx","isNum","toNum","nullVal","falseVal","isToken","node","symAt","pos","arg","typ","text","node2str","nodes","n","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","shift","head","unshift","err","eCtx","value","parsed","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","reduce","acc","when","defs","vals","d","lim","def","defIns","shape","errors","parseParams","func","pins","asStr","parsedParams","cins","forEach","captureIns","captured","ci","isExe","name","closureIns","ins","paramNames","param","position","consumeLast","errs","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","returns","badArg","parse","code","invokeId","tokens","stringError","makeCollsOps","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","tree","_treeise","prefix","token","treeise","collected","entries","collectFuncs","namedNodes","nodeOrErr","fae","f","get","state","key","dict","kind","set","exe","output","tests","out","abs","cos","sin","tan","sign","sqrt","floor","ceil","round","max","min","logn","log2","log10","concat","reverse","sortBy","ends","upperCase","lowerCase","trim","trimStart","trimEnd","charCode","codeChar","getTimeMs","randInt","randNum","objKeys","range","externalOps","recurArgs","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","monoArityError","getExe","ctx","checkArity","external","valOrErr","tErr","violations","print","keys","sum","x","every","b","arr","split","closure","arrays","lims","divisors","_","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","count","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","d1","vlen","del","skip","take","src","mapped","okT","y","s","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","str","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","padEnd","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","o","symbols","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","alen","errorsToDict","newKey","k","destruct","inClosure","stackLen","tooManyLoops","last","paramIdx","nextCat","newCins","decl","numIns","captures","cap","printResult","definition","handler","innerInvoke","invocations","parensRx","invoker","id","type","invocation","lineText","sym","half1","half2","Number","start","end","numDel","length","isNaN","Array","substring","idx","includes","indexOf","startsWith","endsWith","add","by","sort","toLowerCase","toUpperCase","charCodeAt","num","String","fromCharCode","Math","random","Object","Date","getTime","log","defaultCtx","ops","inc","dec","and","or","xor","rem","vec","for","remove","repeat","rand","into","sect","do","time","version","eval","reset","recur","typeNames","null","bool","ref","clo","wild","ext","assertUnreachable","_x","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","asArray","toDict","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","dictDrop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","el","document","querySelector","nullValOrErr","localStorage","setItem","JSON","v2e","html","element","innerHTML","tag","props","createElement","createTextNode","parent","index","childNodes","child","appendChild","parentEl","removeChild","childEl","replacedEl","replaceChild","reply","prompt","alert","interval","setInterval","setTimeout","console","loadScript","async","scriptEl","fetch","window","ix","onload","savedState","getItem","scripts","from","querySelectorAll","errorTexts"],"sourceRoot":""}