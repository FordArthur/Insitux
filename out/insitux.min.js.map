{"version":3,"file":"insitux.min.js","mappings":"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","sources":["webpack://insitux/./src/checks.ts","webpack://insitux/./src/closure.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/val.ts","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/web.ts"],"sourcesContent":["import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i] || need === \"any\") {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { has, len, push, slice } from \"./poly-fills\";\r\nimport { Closure, Func, Ins, Val } from \"./types\";\r\n\r\n/** Declare a closure from instructions and other info, calculating its\r\n * captures ahead-of-time. Skips sub-closures as the parser builds them\r\n * bottom-up. */\r\nexport function makeClosure(\r\n  name: string,\r\n  params: string[],\r\n  cins: Ins[],\r\n): Closure {\r\n  const captures: boolean[] = [];\r\n  const derefs: Ins[] = [];\r\n  const exclusions: string[] = params;\r\n  for (let i = 0, lim = len(cins); i < lim; ++i) {\r\n    const cin = cins[i];\r\n    let capture = false;\r\n    if (cin.typ === \"clo\") {\r\n      //Skip sub-closures as they have already calculated their captures\r\n      i += cin.value.length;\r\n      continue;\r\n    } else if (cin.typ === \"let\" || cin.typ === \"var\") {\r\n      exclusions.push(cin.value);\r\n    } else if (canCapture(exclusions, cin, i + 1 !== lim && cins[i + 1])) {\r\n      derefs.push(cin);\r\n      capture = true;\r\n    }\r\n    captures.push(capture);\r\n  }\r\n  return { name, length: len(cins), captures, derefs };\r\n}\r\n\r\n/** Create a function representing a parent closure, and its sub-closures with\r\n * all values needing captured at this point having been replaced. */\r\nexport function makeEnclosure(\r\n  { name, length, captures, derefs }: Closure,\r\n  cins: Ins[],\r\n  derefed: Val[],\r\n): Func {\r\n  const ins: Ins[] = [];\r\n  const errCtxs = derefs.map(i => i.errCtx);\r\n  for (let i = 0, ci = 0; i < length; ++i) {\r\n    const cin = cins[i];\r\n    if (cin.typ === \"clo\") {\r\n      push(ins, slice(cins, i, i + 1 + cin.value.length));\r\n      i += cin.value.length;\r\n    } else if (captures[ci++]) {\r\n      ins.push({\r\n        typ: \"val\",\r\n        value: derefed.shift()!,\r\n        errCtx: errCtxs.shift()!,\r\n      });\r\n    } else {\r\n      ins.push(cin);\r\n    }\r\n  }\r\n  return { name, ins };\r\n}\r\n\r\n/** Tests whether an Instruction in a particular context can be captured.\r\n * Doesn't attempt to rewrite str Vals because they are mapped and captured\r\n * (or not) within the let/var Ctx in the machine. */\r\nfunction canCapture(exclusions: string[], ins0: Ins, ins1: false | Ins) {\r\n  const isExeVal =\r\n    ins1 && ins0.typ === \"val\" && ins0.value.t === \"str\" && ins1.typ === \"exe\";\r\n  return (\r\n    isExeVal ||\r\n    (ins0.typ === \"npa\" && !has(exclusions, ins0.text)) ||\r\n    (ins0.typ === \"ref\" && !has(exclusions, ins0.value))\r\n  );\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport { makeClosure } from \"./closure\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, Func, Funcs, Ins, ops, Val, syntaxes } from \"./types\";\r\nimport { assertUnreachable, InvokeError, ErrCtx } from \"./types\";\r\n\r\nexport type Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst token2str = ({ typ, text }: Token): string =>\r\n  typ === \"str\" ? `\"${text}\"` : text;\r\nfunction node2str(nodes: Node[]): string {\r\n  const sym0 = symAt(nodes, 0);\r\n  const isClosure = has([\"#\", \"@\"], sym0);\r\n  if (isClosure) {\r\n    nodes = slice(nodes, 1);\r\n  }\r\n  return `${isClosure ? sym0 : \"\"}(${nodes\r\n    .map(n => (isToken(n) ? token2str(n) : node2str(n)))\r\n    .join(\" \")})`;\r\n}\r\n\r\n/** Inserts pop instruction after penultimate body expression */\r\nconst poppedBody = (expressions: ParserIns[][]): ParserIns[] => {\r\n  if (len(expressions) === 1) {\r\n    return flat(expressions);\r\n  }\r\n  const lastExp = expressions[len(expressions) - 1];\r\n  const truncatedExps = slice(expressions, 0, len(expressions) - 1);\r\n  const popIns = <ParserIns>{\r\n    typ: \"pop\",\r\n    value: len(truncatedExps),\r\n    errCtx: lastExp[0].errCtx,\r\n  };\r\n  return flat([...truncatedExps, [popIns], lastExp]);\r\n};\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invokeId: string,\r\n  doTransforms = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text += doTransforms\r\n        ? { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n          (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`)\r\n        : `\\\\${nextCh}`;\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invokeId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inSymbol = false;\r\n      inNumber &&= c === \",\";\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: doTransforms ? text : c, errCtx });\r\n        if (doTransforms && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\r\n      }\r\n      funcs.push({ name, nodes: slice(node, 2) });\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    //1-off arity deficiency rewritten as closure\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\r\n      nodes.unshift(firstNode);\r\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\r\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    if (has([\"if\", \"if!\", \"when\", \"unless\", \"match\"], op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(`provide one or two branches, not ${len(nodes)}`);\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, branch1] = parsed;\r\n      let branch2 = parsed[2];\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\" || op === \"unless\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\r\n      const bodyIns = poppedBody(body);\r\n      return [\r\n        ...cond,\r\n        ...(op === \"unless\"\r\n          ? [\r\n              <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" } },\r\n              <Ins>{ typ: \"exe\", value: 1 },\r\n            ]\r\n          : []),\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\") {\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const when = nodeParser(nodes.pop()!);\r\n      const body = flat(nodes.map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        const [head, body] = [args[0], slice(args, 1)];\r\n        const flatBody = poppedBody(body);\r\n        const ifJmp = len(flatBody) + 2;\r\n        const looJmp = -(len(head) + len(flatBody) + 3);\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: ifJmp, errCtx });\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        push(ins, flatBody);\r\n        ins.push({ typ: \"loo\", value: looJmp, errCtx });\r\n        return ins;\r\n      }\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"loop\") {\r\n      if (len(nodes) < 3) {\r\n        return err(\"provide at least 3 arguments\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const symNode = nodes[1];\r\n      const body = poppedBody(slice(parsed, 2));\r\n      if (!isToken(symNode)) {\r\n        return err(\"argument 2 must be symbol\");\r\n      }\r\n      //(let sym 0 sym-limit n) ... body ... (if (< (let sym (inc sym)) sym-limit) <exit> <loo>)\r\n      const ins: ParserIns[] = [\r\n        { typ: \"val\", value: { t: \"num\", v: 0 }, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        ...parsed[0],\r\n        { typ: \"let\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        ...body,\r\n        { typ: \"ref\", value: symNode.text, errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"inc\" }, errCtx },\r\n        { typ: \"exe\", value: 1, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        { typ: \"ref\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"<\" }, errCtx },\r\n        { typ: \"exe\", value: 2, errCtx },\r\n        { typ: \"if\", value: 2, errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        { typ: \"loo\", value: -(len(body) + 10), errCtx },\r\n      ];\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => !!(i % 2));\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      const symErrMsg = `${op} name must be a new symbol or destructuring`;\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(symErrMsg, defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          if (!len(shape)) {\r\n            return err(symErrMsg);\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const pins: ParserIns[] = [];\r\n      const name = node2str([firstNode, ...nodes]);\r\n      const cloParams: string[] = [];\r\n      let monoFnBody = false;\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        push(\r\n          cloParams,\r\n          parsedParams.shape.map(p => p.name),\r\n        );\r\n        params = parsedParams.shape;\r\n        push(pins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        monoFnBody = len(nodes) === 1;\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        const firstSym = symAt(nodes, 0);\r\n        if (has(syntaxes, firstSym)) {\r\n          const { errCtx } = nodes[0] as Token;\r\n          return err(\r\n            `\"${firstSym}\" syntax unavailable in partial closure`,\r\n            errCtx,\r\n          );\r\n        }\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(pins, parseForm(nodes, params, op !== \"@\"));\r\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\r\n      const errors = pins.filter(i => i.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      //Remove do exe when fn body is only one expression\r\n      if (monoFnBody) {\r\n        cins.pop();\r\n        cins.pop();\r\n      }\r\n      return [\r\n        { typ: \"clo\", value: makeClosure(name, cloParams, cins), errCtx },\r\n        ...cins,\r\n      ];\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (head[0].typ === \"ref\") {\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 || has([\"npa\", \"upa\"], head[0].typ) ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (\r\n        text === \"%\" ||\r\n        (starts(text, \"%\") && isNum(substr(text, 1)))\r\n      ) {\r\n        const value = text === \"%\" ? 0 : toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, text, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], text, errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, text: \"args\", errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\": {\r\n        const errors = insErrorDetect(slice(fins, i + 1, i + ins.value.length));\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        stack.push({});\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invokeId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invokeId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(slice(tokens));\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, round, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `;This is a test comment\r\n           (print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"when and unless\",\r\n    code: `[(when 123 (print \"hi\") 234) (unless true (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false true false false true]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"For XY list\",\r\n    code: `(for vec [0 1] [0 1])`,\r\n    out: `[[0 0] [1 0] [0 1] [1 1]]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Loop\",\r\n    code: `(loop 3 i (print-str i))`,\r\n    out: `012null`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (let a :a) (+ 1 a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Closure with ext func\",\r\n    code: `(#(test.function %) 1)`,\r\n    out: `1\\nnull`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 3\",\r\n    code: `(reduce\r\n             (fn primes num\r\n               (if (find zero? (map (rem num) primes))\r\n                 primes\r\n                 (append num primes)))\r\n             [2]\r\n             (range 3 10))`,\r\n    out: `[2 3 5 7]`,\r\n  },\r\n  {\r\n    name: \"Closure with inter-lets\",\r\n    code: `(let a + c 5 d 10)\r\n           (let closure (fn b (let d 1) (a b c d)))\r\n           (let a - c 4 d 11)\r\n           (closure 1)`,\r\n    out: `7`,\r\n  },\r\n  {\r\n    name: \"Closure with inner-let\",\r\n    code: `(((fn x (let y 1) #[x y]) 2))`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Closure with captured f\",\r\n    code: `[((fn x (@(val x))) 0) (var f val) ((fn x (@(f x))) 0)]`,\r\n    out: `[0 val 0]`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Implicit currying\", code: \"(-> 1 inc (+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(% %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invokeId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print: (str, withNewLine) => {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: [],\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${round(elapsedMs)}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${round(totalMs)}ms.`],\r\n  );\r\n}\r\n","export const insituxVersion = 220227;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { makeEnclosure } from \"./closure\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, sign, sqrt, floor, ceil, round, max, min, logn, log2, log10 } = pf;\r\nconst { cos, sin, tan, acos, asin, atan, sinh, cosh, tanh } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum, isArray } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunction, ExternalHandler, syntaxes } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict, pathSet } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet letsStack: { [key: string]: Val }[] = [];\r\nlet lets: typeof letsStack[0] = {};\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({ t: \"str\", v: stringify(args) });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\":\r\n      stack.push(toDict(args));\r\n      return;\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      _boo(isEqual(args[0], args[1]) === (op === \"fast=\"));\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\": {\r\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"asin\":\r\n    case \"acos\":\r\n    case \"atan\":\r\n    case \"sinh\":\r\n    case \"cosh\":\r\n    case \"tanh\": {\r\n      const f = { asin, acos, atan, sinh, cosh, tanh }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n    case \"ext?\": {\r\n      const { t } = args[0];\r\n      _boo(\r\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\r\n          substr(op, 0, slen(op) - 1) === t,\r\n      );\r\n      return;\r\n    }\r\n    case \"substr?\":\r\n      _boo(sub(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        i = subIdx(args[1].v, args[0].v);\r\n      } else if (args[0].t === \"vec\") {\r\n        i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"set-at\": {\r\n      const [pathVal, replacement, coll] = args;\r\n      stack.push(pathSet(vec(pathVal), replacement, coll));\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op !== \"reduce\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          _str(filtered.map(v => val2str(v)).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\r\n        } else {\r\n          _vec(filtered);\r\n        }\r\n        return;\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        return tErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, lim = len(args); i < lim; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          errors.forEach(err => (err.m = `-> arg ${i + 2}: ${err.m}`));\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"omit\":\r\n      stack.push(dictDrop(dic(args[1]), args[0]));\r\n      return;\r\n    case \"assoc\":\r\n      _dic(dictSet(dic(args[2]), args[0], args[1]));\r\n      return;\r\n    case \"append\":\r\n      _vec(concat(vec(args[1]), [args[0]]));\r\n      return;\r\n    case \"prepend\":\r\n      _vec(concat([args[0]], vec(args[1])));\r\n      return;\r\n    case \"insert\": {\r\n      const v = vec(args[2]);\r\n      let n = num(args[1]);\r\n      if (n === 0) {\r\n        _vec(concat([args[0]], v));\r\n      } else if (n === -1) {\r\n        _vec(concat(v, [args[0]]));\r\n      } else {\r\n        n = n > 0 ? min(n, len(v)) : max(len(v) + 1 + n, 0);\r\n        _vec(concat(concat(slice(v, 0, n), [args[0]]), slice(v, n)));\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\":\r\n    case \"sort-by\": {\r\n      const src = asArray(args[op === \"sort\" ? 0 : 1]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (op === \"sort\") {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args[0], errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (okT === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"distinct\": {\r\n      const arr = len(args) === 1 && args[0].t === \"vec\" ? vec(args[0]) : args;\r\n      const distinct: Val[] = [];\r\n      arr.forEach(a => {\r\n        if (!distinct.some(v => isEqual(a, v))) {\r\n          distinct.push(a);\r\n        }\r\n      });\r\n      _vec(distinct);\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[1])\r\n          .split(str(args[0]))\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n      return;\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const invokeId = `${errCtx.invokeId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"info\": {\r\n      const func = str(args[0]);\r\n      const entry = ops[func];\r\n      if (!entry) {\r\n        _nul();\r\n        return;\r\n      }\r\n      const infos: Val[] = [];\r\n      const info = (what: string, val: Val) =>\r\n        infos.push({ t: \"key\", v: `:${what}` }, val);\r\n      const toStrVec = (v: (string | string[])[]): Val => ({\r\n        t: \"vec\",\r\n        v: v.map(typ =>\r\n          isArray(typ)\r\n            ? { t: \"vec\", v: typ.map(v => <Val>{ t: \"str\", v }) }\r\n            : { t: \"str\", v: typ },\r\n        ),\r\n      });\r\n      info(\"external?\", { t: \"bool\", v: !!entry.external });\r\n      if (entry.exactArity) {\r\n        info(\"exact-arity\", { t: \"num\", v: entry.exactArity });\r\n      } else {\r\n        if (entry.minArity) {\r\n          info(\"minimum-arity\", { t: \"num\", v: entry.minArity });\r\n        }\r\n        if (entry.maxArity) {\r\n          info(\"maximum-arity\", { t: \"num\", v: entry.maxArity });\r\n        }\r\n      }\r\n      if (entry.params || entry.numeric) {\r\n        info(\"in-types\", toStrVec(entry.params ? entry.params : [\"num\"]));\r\n      }\r\n      if (entry.returns || entry.numeric === true) {\r\n        info(\"out-types\", toStrVec(entry.returns ? entry.returns : [\"num\"]));\r\n      }\r\n      stack.push(toDict(infos));\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      letsStack = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as op requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\n\r\nfunction checks(op: string, args: Val[], errCtx: ErrCtx, checkArity: boolean) {\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  const types = args.map(a => [a.t]);\r\n  const violations = typeCheck(op, types, errCtx);\r\n  return violations ? violations : false;\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const violations = checks(name, params, errCtx, checkArity);\r\n          if (violations) {\r\n            return violations;\r\n          }\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) =>\r\n        checks(name, params, errCtx, checkArity) ||\r\n        exeOp(name, params, ctx, errCtx);\r\n    }\r\n    if (name in ctx.env.funcs && name !== \"entry\") {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets) {\r\n      return getExe(ctx, lets[name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError(op.t, errCtx);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[alen + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\r\n    } else {\r\n      return { t: \"null\", v: undefined };\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    letsStack.push({});\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          _vec(args);\r\n        } else if (len(args) <= paramIdx) {\r\n          _nul();\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          _fun(name);\r\n        } else if (starts(name, \"$\")) {\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets) {\r\n          stack.push(lets[name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          _fun(name);\r\n        } else {\r\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        const errors = closure(params);\r\n        if (errors) {\r\n          //Find next catch statement\r\n          const nextCat = slice(func.ins, i).findIndex(\r\n            ins => ins.typ === \"cat\",\r\n          );\r\n          if (nextCat !== -1) {\r\n            i += nextCat;\r\n            lets[\"errors\"] = {\r\n              t: \"vec\",\r\n              v: errorsToDict(errors),\r\n            };\r\n            break;\r\n          }\r\n          return errors;\r\n        }\r\n        if (recurArgs) {\r\n          letsStack[len(letsStack) - 1] = {};\r\n          i = -1;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        if (ins.value === 1) {\r\n          stack.pop();\r\n        } else {\r\n          splice(stack, len(stack) - ins.value, ins.value);\r\n        }\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\": {\r\n        //Ensure any in-scope declarations are captured here\r\n        const derefIns = slice(ins.value.derefs).map(ins => {\r\n          const decl =\r\n            ins.typ === \"val\" &&\r\n            ins.value.t === \"str\" &&\r\n            (lets[ins.value.v] ?? ctx.env.vars[ins.value.v]);\r\n          return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\r\n        });\r\n        //Dereference closure captures\r\n        const errors = exeFunc(ctx, { ins: derefIns }, args, true);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        //Enclose the closure with dereferenced values\r\n        const numIns = len(derefIns);\r\n        const captures = splice(stack, len(stack) - numIns, numIns);\r\n        const cins = slice(func.ins, i + 1, i + 1 + ins.value.length);\r\n        stack.push({ t: \"clo\", v: makeEnclosure(ins.value, cins, captures) });\r\n        i += ins.value.length;\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    letsStack.pop();\r\n    lets = letsStack[len(letsStack) - 1];\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, invokeId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name, definition, handler }) => {\r\n    if (ops[name] && !externalOps[name]) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...definition, external: true };\r\n    externalOps[name] = handler;\r\n  });\r\n}\r\n\r\nfunction removeExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name }) => {\r\n    delete ops[name];\r\n    delete externalOps[name];\r\n  });\r\n}\r\n\r\nfunction innerInvoke(\r\n  ctx: Ctx,\r\n  closure: () => InvokeError[] | undefined,\r\n  printResult: boolean,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = closure();\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, letsStack] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param invokeId A unique ID referenced in invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  return innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId), printResult);\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n  printResult = false,\r\n): InvokeResult | undefined {\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return innerInvoke(\r\n    ctx,\r\n    () => exeFunc(ctx, ctx.env.funcs[funcName], params),\r\n    printResult,\r\n  );\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms: string[] = [];\r\n  if (alsoSyntax) {\r\n    push(syms, syntaxes);\r\n  }\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke, invokeFunction } from \".\";\r\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\r\nimport { getTimeMs } from \"./poly-fills\";\r\nimport { Ctx, InvokeResult, Val } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(\r\n  ctx: Ctx,\r\n  code: string,\r\n  id?: string,\r\n  printResult = true,\r\n): InvokeOutput {\r\n  id = id ? `-${id}` : `${getTimeMs()}`;\r\n  invocations.set(id, code);\r\n  const valOrErrs = invoke(ctx, code, id, printResult);\r\n  return valOrErrsOutput(valOrErrs);\r\n}\r\n\r\nexport function functionInvoker(\r\n  ctx: Ctx,\r\n  name: string,\r\n  params: Val[],\r\n  printResult = true,\r\n): InvokeOutput {\r\n  const valOrErrs = invokeFunction(ctx, name, params, printResult);\r\n  if (!valOrErrs) {\r\n    return [\r\n      { type: \"message\", text: `Invoke Error: function '${name}' not found.` },\r\n    ];\r\n  }\r\n  return valOrErrsOutput(valOrErrs);\r\n}\r\n\r\nfunction valOrErrsOutput(valOrErrs: InvokeResult) {\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  const msg = (text: string) => out.push({ type: \"message\", text });\r\n  const err = (text: string) => out.push({ type: \"error\", text });\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\r\n    const invocation = invocations.get(invokeId);\r\n    if (!invocation) {\r\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\r\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      err(lineText[col - 1]);\r\n      msg(`${half2}\\n`);\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      err(sym);\r\n      msg(`${half2}\\n`);\r\n    }\r\n    msg(`${e} Error: ${m}.\\n`);\r\n  });\r\n  return out;\r\n}\r\n","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number =>\r\n  x !== \"\" && !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, prefix: string): boolean =>\r\n  str.startsWith(prefix);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sinh = Math.sinh;\r\nexport const cosh = Math.cosh;\r\nexport const tanh = Math.tanh;\r\nexport const asin = Math.asin;\r\nexport const acos = Math.acos;\r\nexport const atan = Math.atan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict }\r\n  | { t: \"ext\"; v: unknown };\r\n\r\nexport type ErrCtx = { invokeId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name?: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunction[];\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport const defaultCtx = {\r\n  env: { funcs: {}, vars: {} },\r\n  loopBudget: 1e7,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\nexport type Closure = {\r\n  readonly name: string;\r\n  readonly length: number;\r\n  readonly captures: boolean[];\r\n  readonly derefs: Ins[];\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"npa\" | \"upa\"; value: number; text: string } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\"; value: Closure } //Closure/partial\r\n  | { typ: \"val\"; value: Val }\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (\"any\" | Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  name: string;\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"!=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  asin: { exactArity: 1, numeric: true },\r\n  acos: { exactArity: 1, numeric: true },\r\n  atan: { exactArity: 1, numeric: true },\r\n  sinh: { exactArity: 1, numeric: true },\r\n  cosh: { exactArity: 1, numeric: true },\r\n  tanh: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"substr?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"str\", \"vec\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  \"set-at\": {\r\n    exactArity: 3,\r\n    params: [\"vec\", \"any\", [\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [\"any\", [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [\"any\", \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  assoc: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  omit: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  insert: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  append: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  prepend: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  \"sort-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  distinct: {\r\n    returns: [\"vec\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { exactArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  info: { exactArity: 1, params: [[\"str\", \"func\"]], returns: [\"dict\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const syntaxes = [\r\n  \"function\",\r\n  \"fn\",\r\n  \"var\",\r\n  \"let\",\r\n  \"var!\",\r\n  \"let!\",\r\n  \"return\",\r\n  \"if\",\r\n  \"if!\",\r\n  \"when\",\r\n  \"unless\",\r\n  \"while\",\r\n  \"loop\",\r\n  \"match\",\r\n  \"catch\",\r\n];\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n  ext: \"external\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n    case \"ext\":\r\n      return a.v === b.v;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst quoteStr = (str: string) =>\r\n  str\r\n    .split(\"\")\r\n    .map(ch => (ch === '\"' ? '\\\\\"' : ch))\r\n    .join(\"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) =>\r\n    v.t === \"str\" ? `\"${quoteStr(v.v)}\"` : val2str(v);\r\n  if (val.t === \"clo\") {\r\n    return val.v.name ?? \"\";\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\n/** Replaces or sets index or key/value with another value in a string or\r\n * dictionary */\r\nexport function pathSet(path: Val[], replacement: Val, coll: Val): Val {\r\n  //If we're at the end of the path or it's a non-number index for non-dict\r\n  if (\r\n    !len(path) ||\r\n    (coll.t !== \"vec\" && coll.t !== \"dict\") ||\r\n    (coll.t === \"vec\" &&\r\n      (path[0].t !== \"num\" || path[0].v < 0 || path[0].v > len(coll.v)))\r\n  ) {\r\n    return coll;\r\n  }\r\n  if (coll.t === \"vec\") {\r\n    const vecCopy = slice(coll.v);\r\n    const idx = num(path[0]);\r\n    if (len(path) === 1) {\r\n      vecCopy[idx] = replacement;\r\n      return { t: \"vec\", v: vecCopy };\r\n    }\r\n    vecCopy[idx] = pathSet(slice(path, 1), replacement, vecCopy[idx]);\r\n    return { t: \"vec\", v: vecCopy };\r\n  }\r\n  if (len(path) === 1) {\r\n    return { t: \"dict\", v: dictSet(coll.v, path[0], replacement) };\r\n  }\r\n  return {\r\n    t: \"dict\",\r\n    v: dictSet(\r\n      coll.v,\r\n      path[0],\r\n      pathSet(slice(path, 1), replacement, dictGet(coll.v, path[0])),\r\n    ),\r\n  };\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { functionInvoker, InvokeOutput, invoker } from \"./invoker\";\r\nimport { Ctx, defaultCtx, ExternalFunction, Val, ValOrErr } from \"./types\";\r\nimport { num, str, val2str } from \"./val\";\r\n\r\nconst e = (el: string) => document.querySelector(el);\r\nlet state = new Map<string, Val>();\r\n\r\nconst get = (key: string): ValOrErr =>\r\n  state.has(key) ? { kind: \"val\", value: state.get(key)! } : nullValOrErr;\r\nconst set = (key: string, val: Val) => {\r\n  state.set(key, val);\r\n  localStorage.setItem(\"insitux-state\", JSON.stringify([...state.entries()]));\r\n  return undefined;\r\n};\r\n\r\nfunction exe(name: string, args: Val[]): ValOrErr {\r\n  if (args.length && args[0].t == \"str\" && args[0].v.startsWith(\"$\")) {\r\n    if (args.length === 1) {\r\n      return get(`${args[0].v.substring(1)}.${name}`);\r\n    } else {\r\n      set(`${args[0].v.substring(1)}.${name}`, args[1]);\r\n      return { kind: \"val\", value: args[1] };\r\n    }\r\n  }\r\n  return { kind: \"err\", err: `operation ${name} does not exist` };\r\n}\r\n\r\nfunction fetchOp(url: string, method: string, callback: string, body?: string) {\r\n  setTimeout(async () => {\r\n    let v: Val;\r\n    try {\r\n      v = { t: \"str\", v: await (await fetch(url, { method, body })).text() };\r\n    } catch (e) {\r\n      v = { t: \"null\", v: undefined };\r\n    }\r\n    alertErrors(functionInvoker(ctx, callback, [v]));\r\n  });\r\n}\r\n\r\nfunction htmlToElement(html: string) {\r\n  let temp = document.createElement(\"template\");\r\n  html = html.trim();\r\n  temp.innerHTML = html;\r\n  return temp.content.firstChild;\r\n}\r\n\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst nullValOrErr: ValOrErr = { kind: \"val\", value: nullVal };\r\nconst v2e = (val: Val) => (val.t === \"str\" ? e(val.v) : <HTMLElement>val.v);\r\nconst functions: ExternalFunction[] = [\r\n  {\r\n    name: \"js\",\r\n    definition: { minArity: 1, params: [\"str\"] },\r\n    handler: params => {\r\n      try {\r\n        const evaluated = eval(str(params[0]));\r\n        const v =\r\n          typeof evaluated === \"function\"\r\n            ? evaluated(params.slice(1).map(a => a.v))\r\n            : evaluated;\r\n        let value: Val = { t: \"ext\", v };\r\n        if (typeof v === \"string\") value = { t: \"str\", v };\r\n        return { kind: \"val\", value };\r\n      } catch (e) {\r\n        return { kind: \"err\", err: `${e}` };\r\n      }\r\n    },\r\n  },\r\n  {\r\n    name: \"inner-html\",\r\n    definition: { exactArity: 2, params: [[\"str\", \"ext\"]], returns: [\"str\"] },\r\n    handler: ([el, html]) => {\r\n      const element = v2e(el);\r\n      if (element) {\r\n        element.innerHTML = val2str(html);\r\n      }\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"html-el\",\r\n    definition: {\r\n      exactArity: 1,\r\n      returns: [\"ext\"],\r\n    },\r\n    handler: ([html]) => {\r\n      return {\r\n        kind: \"val\",\r\n        value: { t: \"ext\", v: htmlToElement(val2str(html)) },\r\n      };\r\n    },\r\n  },\r\n  {\r\n    name: \"child-at\",\r\n    definition: {\r\n      exactArity: 2,\r\n      params: [[\"str\", \"ext\"], \"num\"],\r\n      returns: [\"ext\", \"null\"],\r\n    },\r\n    handler: ([parent, index]) => {\r\n      const el = v2e(parent)?.childNodes[num(index)];\r\n      return { kind: \"val\", value: el ? { t: \"ext\", v: el } : nullVal };\r\n    },\r\n  },\r\n  {\r\n    name: \"append-child\",\r\n    definition: {\r\n      exactArity: 2,\r\n      params: [[\"str\", \"ext\"], \"ext\"],\r\n      returns: [\"null\"],\r\n    },\r\n    handler: ([parent, child]) => {\r\n      const parentEl = v2e(parent);\r\n      parentEl?.appendChild(<HTMLElement>child.v);\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"remove-child\",\r\n    definition: {\r\n      exactArity: 2,\r\n      params: [[\"str\", \"ext\"], \"num\"],\r\n      returns: [\"null\"],\r\n    },\r\n    handler: ([parent, index]) => {\r\n      if (parent.t === \"str\") {\r\n        const parentEl = v2e(parent);\r\n        parentEl?.removeChild(parentEl.childNodes[num(index)]);\r\n      }\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"replace-child\",\r\n    definition: {\r\n      exactArity: 3,\r\n      params: [[\"str\", \"ext\"], \"ext\", \"num\"],\r\n      returns: [\"null\"],\r\n    },\r\n    handler: ([parent, child, index]) => {\r\n      const [parentEl, childEl] = [v2e(parent), v2e(child)];\r\n      const replacedEl = parentEl?.childNodes[num(index)];\r\n      if (parentEl && childEl && replacedEl) {\r\n        parentEl.replaceChild(childEl, replacedEl);\r\n      }\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"prompt\",\r\n    definition: { exactArity: 1, returns: [\"str\", \"null\"] },\r\n    handler: params => {\r\n      const reply = prompt(val2str(params[0]));\r\n      return { kind: \"val\", value: reply ? { t: \"str\", v: reply } : nullVal };\r\n    },\r\n  },\r\n  {\r\n    name: \"alert\",\r\n    definition: { exactArity: 1, returns: [\"null\"] },\r\n    handler: params => {\r\n      alert(val2str(params[0]));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"interval\",\r\n    definition: { exactArity: 2, params: [\"func\", \"num\"], returns: [\"null\"] },\r\n    handler: ([func, interval]) => {\r\n      setInterval(() => invoker(ctx, `(${func.v})`), num(interval));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"timeout\",\r\n    definition: { exactArity: 2, params: [\"func\", \"num\"], returns: [\"null\"] },\r\n    handler: ([func, interval]) => {\r\n      setTimeout(() => invoker(ctx, `(${func.v})`), num(interval));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"GET-str\",\r\n    definition: {\r\n      exactArity: 2,\r\n      params: [\"func\", \"str\"],\r\n      returns: [\"str\"],\r\n    },\r\n    handler: ([callback, url]) => {\r\n      fetchOp(str(url), \"GET\", str(callback));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n  {\r\n    name: \"POST-str\",\r\n    definition: {\r\n      exactArity: 3,\r\n      params: [\"func\", \"str\", \"str\"],\r\n      returns: [\"str\"],\r\n    },\r\n    handler: ([callback, url, body]) => {\r\n      fetchOp(str(url), \"POST\", str(callback), str(body));\r\n      return nullValOrErr;\r\n    },\r\n  },\r\n];\r\n\r\nconst ctx: Ctx = {\r\n  ...defaultCtx,\r\n  exe,\r\n  get,\r\n  set,\r\n  print: str => console.log(str),\r\n  functions,\r\n};\r\n\r\nconst loadScript = async (scriptEl: HTMLScriptElement) => {\r\n  const code = scriptEl.src\r\n    ? await (await fetch(scriptEl.src)).text()\r\n    : scriptEl.innerHTML;\r\n  window.ix(code);\r\n};\r\n\r\nwindow.onload = async () => {\r\n  const savedState = localStorage.getItem(\"insitux-state\");\r\n  state = new Map<string, Val>(savedState ? JSON.parse(savedState) : []);\r\n  console.log(state);\r\n  const scripts = Array.from(document.querySelectorAll(\"script\")).filter(\r\n    el => el.type === \"text/insitux\",\r\n  );\r\n  for (let s = 0; s < scripts.length; ++s) {\r\n    await loadScript(scripts[s]);\r\n  }\r\n};\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ix: (code: string) => void;\r\n  }\r\n}\r\n\r\nwindow.ix = code => alertErrors(invoker(ctx, code));\r\n\r\nfunction alertErrors(errors: InvokeOutput) {\r\n  if (errors.length > 0) {\r\n    const errorTexts = errors.map(({ type, text }) =>\r\n      type === \"error\" ? [...text, \"\"].join(\"\\u0332\") : text,\r\n    );\r\n    alert(`---- Insitux\\n${errorTexts.join(\"\")}`);\r\n  }\r\n}\r\n"],"names":["asBoo","val","t","v","arityCheck","op","nArg","errCtx","exactArity","maxArity","minArity","aErr","msg","amount","e","m","typeCheck","args","optimistic","params","types","numeric","onlyNum","len","nonNumArgIdx","findIndex","a","find","names","map","join","typeErr","typeViolations","need","i","argTypes","isArray","some","has","filter","r","numOpErr","keyOpErr","makeClosure","name","cins","captures","derefs","exclusions","lim","cin","capture","typ","push","value","canCapture","length","makeEnclosure","derefed","ins","errCtxs","ci","slice","shift","ins0","ins1","text","flat","splice","slen","starts","sub","substr","strIdx","subIdx","isNum","toNum","nullVal","falseVal","isToken","node","symAt","pos","arg","node2str","nodes","sym0","isClosure","n","token2str","poppedBody","expressions","lastExp","truncatedExps","popIns","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","head","unshift","err","eCtx","parsed","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","reduce","acc","when","flatBody","ifJmp","looJmp","symNode","defs","vals","symErrMsg","d","def","defIns","shape","errors","parseParams","func","pins","cloParams","monoFnBody","parsedParams","p","firstSym","paramNames","param","position","consumeLast","errs","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","returns","badArg","parse","code","invokeId","tokens","stringError","doTransforms","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","collected","entries","forEach","collectFuncs","_treeise","prefix","token","treeise","namedNodes","nodeOrErr","fae","f","get","state","key","dict","kind","set","exe","output","tests","out","abs","sign","sqrt","floor","ceil","round","max","min","logn","log2","log10","cos","sin","tan","acos","asin","atan","sinh","cosh","tanh","concat","reverse","sortBy","ends","upperCase","lowerCase","trim","trimStart","trimEnd","charCode","codeChar","getTimeMs","randInt","randNum","objKeys","range","externalOps","recurArgs","letsStack","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","monoArityError","checks","checkArity","getExe","ctx","external","violations","valOrErr","tErr","print","keys","sum","x","every","b","pathVal","replacement","coll","closure","arrays","lims","divisors","_","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","count","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","d1","vlen","del","skip","take","src","mapped","okT","y","arr","distinct","s","edgeCase","step","nums","split","invoke","terse","results","Map","env","vars","startTime","valOrErrs","str","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","padEnd","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","o","symbols","sLen","parseAndExe","entry","infos","info","what","toStrVec","exeOp","exeFunc","valAndErr","found","alen","errorsToDict","newKey","k","destruct","inClosure","stackLen","tooManyLoops","last","paramIdx","nextCat","derefIns","decl","numIns","innerInvoke","printResult","definition","handler","invocations","parensRx","invoker","id","valOrErrsOutput","functionInvoker","funcName","invokeFunction","type","invocation","lineText","sym","half1","half2","Number","start","end","numDel","isNaN","Array","substring","idx","includes","indexOf","startsWith","endsWith","add","by","sort","toLowerCase","toUpperCase","charCodeAt","num","String","fromCharCode","Math","random","Object","Date","getTime","log","defaultCtx","ops","inc","dec","and","or","xor","rem","vec","for","remove","repeat","rand","into","assoc","omit","insert","append","prepend","sect","do","time","version","eval","reset","recur","syntaxes","typeNames","null","bool","ref","clo","wild","ext","assertUnreachable","_x","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","asArray","toDict","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","dictDrop","pathSet","path","vecCopy","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","el","document","querySelector","nullValOrErr","localStorage","setItem","JSON","fetchOp","url","method","callback","setTimeout","async","fetch","alertErrors","htmlToElement","html","temp","createElement","innerHTML","content","firstChild","v2e","evaluated","element","parent","index","childNodes","child","appendChild","parentEl","removeChild","childEl","replacedEl","replaceChild","reply","prompt","alert","interval","setInterval","console","loadScript","scriptEl","window","ix","errorTexts","onload","savedState","getItem","scripts","from","querySelectorAll"],"sourceRoot":""}