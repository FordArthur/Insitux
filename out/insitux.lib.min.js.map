{"version":3,"file":"insitux.lib.min.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/closure.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number =>\r\n  x !== \"\" && !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, prefix: string): boolean =>\r\n  str.startsWith(prefix);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sinh = Math.sinh;\r\nexport const cosh = Math.cosh;\r\nexport const tanh = Math.tanh;\r\nexport const asin = Math.asin;\r\nexport const acos = Math.acos;\r\nexport const atan = Math.atan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict }\r\n  | { t: \"ext\"; v: unknown };\r\n\r\nexport type ErrCtx = { invokeId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name?: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunction[];\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport const defaultCtx = {\r\n  env: { funcs: {}, vars: {} },\r\n  loopBudget: 1e7,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\nexport type Closure = {\r\n  readonly name: string;\r\n  readonly length: number;\r\n  readonly captures: boolean[];\r\n  readonly derefs: Ins[];\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"npa\" | \"upa\"; value: number; text: string } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\"; value: Closure } //Closure/partial\r\n  | { typ: \"val\"; value: Val }\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  name: string;\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"!=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  asin: { exactArity: 1, numeric: true },\r\n  acos: { exactArity: 1, numeric: true },\r\n  atan: { exactArity: 1, numeric: true },\r\n  sinh: { exactArity: 1, numeric: true },\r\n  cosh: { exactArity: 1, numeric: true },\r\n  tanh: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"substr?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: {\r\n    exactArity: 2,\r\n    params: [[], [\"str\", \"vec\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  \"set-at\": {\r\n    exactArity: 3,\r\n    params: [\"vec\", [], [\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [[], \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  assoc: {\r\n    exactArity: 3,\r\n    params: [[], [], \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  omit: {\r\n    exactArity: 2,\r\n    params: [[], \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  insert: {\r\n    exactArity: 3,\r\n    params: [[], \"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  append: {\r\n    exactArity: 2,\r\n    params: [[], \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  prepend: {\r\n    exactArity: 2,\r\n    params: [[], \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  \"sort-by\": {\r\n    exactArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  distinct: {\r\n    returns: [\"vec\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { exactArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const syntaxes = [\r\n  \"function\",\r\n  \"fn\",\r\n  \"var\",\r\n  \"let\",\r\n  \"var!\",\r\n  \"let!\",\r\n  \"return\",\r\n  \"if\",\r\n  \"if!\",\r\n  \"when\",\r\n  \"unless\",\r\n  \"while\",\r\n  \"loop\",\r\n  \"match\",\r\n  \"catch\",\r\n];\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n  ext: \"external\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { has, len, push, slice } from \"./poly-fills\";\r\nimport { Closure, Func, Ins, Val } from \"./types\";\r\n\r\n/** Declare a closure from instructions and other info, calculating its\r\n * captures ahead-of-time. Skips sub-closures as the parser builds them\r\n * bottom-up. */\r\nexport function makeClosure(\r\n  name: string,\r\n  params: string[],\r\n  cins: Ins[],\r\n): Closure {\r\n  const captures: boolean[] = [];\r\n  const derefs: Ins[] = [];\r\n  const exclusions: string[] = params;\r\n  for (let i = 0, lim = len(cins); i < lim; ++i) {\r\n    const cin = cins[i];\r\n    let capture = false;\r\n    if (cin.typ === \"clo\") {\r\n      //Skip sub-closures as they have already calculated their captures\r\n      i += cin.value.length;\r\n      continue;\r\n    } else if (cin.typ === \"let\" || cin.typ === \"var\") {\r\n      exclusions.push(cin.value);\r\n    } else if (canCapture(exclusions, cin, i + 1 !== lim && cins[i + 1])) {\r\n      derefs.push(cin);\r\n      capture = true;\r\n    }\r\n    captures.push(capture);\r\n  }\r\n  return { name, length: len(cins), captures, derefs };\r\n}\r\n\r\n/** Create a function representing a parent closure, and its sub-closures with\r\n * all values needing captured at this point having been replaced. */\r\nexport function makeEnclosure(\r\n  { name, length, captures, derefs }: Closure,\r\n  cins: Ins[],\r\n  derefed: Val[],\r\n): Func {\r\n  const ins: Ins[] = [];\r\n  const errCtxs = derefs.map(i => i.errCtx);\r\n  for (let i = 0, ci = 0; i < length; ++i) {\r\n    const cin = cins[i];\r\n    if (cin.typ === \"clo\") {\r\n      push(ins, slice(cins, i, i + 1 + cin.value.length));\r\n      i += cin.value.length;\r\n    } else if (captures[ci++]) {\r\n      ins.push({\r\n        typ: \"val\",\r\n        value: derefed.shift()!,\r\n        errCtx: errCtxs.shift()!,\r\n      });\r\n    } else {\r\n      ins.push(cin);\r\n    }\r\n  }\r\n  return { name, ins };\r\n}\r\n\r\n/** Tests whether an Instruction in a particular context can be captured.\r\n * Doesn't attempt to rewrite str Vals because they are mapped and captured\r\n * (or not) within the let/var Ctx in the machine. */\r\nfunction canCapture(exclusions: string[], ins0: Ins, ins1: false | Ins) {\r\n  const isExeVal =\r\n    ins1 && ins0.typ === \"val\" && ins0.value.t === \"str\" && ins1.typ === \"exe\";\r\n  return (\r\n    isExeVal ||\r\n    (ins0.typ === \"npa\" && !has(exclusions, ins0.text)) ||\r\n    (ins0.typ === \"ref\" && !has(exclusions, ins0.value))\r\n  );\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport { makeClosure } from \"./closure\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, Func, Funcs, Ins, ops, Val, syntaxes } from \"./types\";\r\nimport { assertUnreachable, InvokeError, ErrCtx } from \"./types\";\r\n\r\nexport type Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst token2str = ({ typ, text }: Token): string =>\r\n  typ === \"str\" ? `\"${text}\"` : text;\r\nfunction node2str(nodes: Node[]): string {\r\n  const sym0 = symAt(nodes, 0);\r\n  const isClosure = has([\"#\", \"@\"], sym0);\r\n  if (isClosure) {\r\n    nodes = slice(nodes, 1);\r\n  }\r\n  return `${isClosure ? sym0 : \"\"}(${nodes\r\n    .map(n => (isToken(n) ? token2str(n) : node2str(n)))\r\n    .join(\" \")})`;\r\n}\r\n\r\n/** Inserts pop instruction after penultimate body expression */\r\nconst poppedBody = (expressions: ParserIns[][]): ParserIns[] => {\r\n  if (len(expressions) === 1) {\r\n    return flat(expressions);\r\n  }\r\n  const lastExp = expressions[len(expressions) - 1];\r\n  const truncatedExps = slice(expressions, 0, len(expressions) - 1);\r\n  const popIns = <ParserIns>{\r\n    typ: \"pop\",\r\n    value: len(truncatedExps),\r\n    errCtx: lastExp[0].errCtx,\r\n  };\r\n  return flat([...truncatedExps, [popIns], lastExp]);\r\n};\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invokeId: string,\r\n  doTransforms = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text += doTransforms\r\n        ? { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n          (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`)\r\n        : `\\\\${nextCh}`;\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invokeId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inSymbol = false;\r\n      inNumber &&= c === \",\";\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: doTransforms ? text : c, errCtx });\r\n        if (doTransforms && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\r\n      }\r\n      funcs.push({ name, nodes: slice(node, 2) });\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    //1-off arity deficiency rewritten as closure\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\r\n      nodes.unshift(firstNode);\r\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\r\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    if (has([\"if\", \"if!\", \"when\", \"unless\", \"match\"], op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(`provide one or two branches, not ${len(nodes)}`);\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, branch1] = parsed;\r\n      let branch2 = parsed[2];\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\" || op === \"unless\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\r\n      const bodyIns = poppedBody(body);\r\n      return [\r\n        ...cond,\r\n        ...(op === \"unless\"\r\n          ? [\r\n              <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" } },\r\n              <Ins>{ typ: \"exe\", value: 1 },\r\n            ]\r\n          : []),\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\") {\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const when = nodeParser(nodes.pop()!);\r\n      const body = flat(nodes.map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        const [head, body] = [args[0], slice(args, 1)];\r\n        const flatBody = poppedBody(body);\r\n        const ifJmp = len(flatBody) + 2;\r\n        const looJmp = -(len(head) + len(flatBody) + 3);\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: ifJmp, errCtx });\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        push(ins, flatBody);\r\n        ins.push({ typ: \"loo\", value: looJmp, errCtx });\r\n        return ins;\r\n      }\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"loop\") {\r\n      if (len(nodes) < 3) {\r\n        return err(\"provide at least 3 arguments\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const symNode = nodes[1];\r\n      const body = poppedBody(slice(parsed, 2));\r\n      if (!isToken(symNode)) {\r\n        return err(\"argument 2 must be symbol\");\r\n      }\r\n      //(let sym 0 sym-limit n) ... body ... (if (< (let sym (inc sym)) sym-limit) <exit> <loo>)\r\n      const ins: ParserIns[] = [\r\n        { typ: \"val\", value: { t: \"num\", v: 0 }, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        ...parsed[0],\r\n        { typ: \"let\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        ...body,\r\n        { typ: \"ref\", value: symNode.text, errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"inc\" }, errCtx },\r\n        { typ: \"exe\", value: 1, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        { typ: \"ref\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"<\" }, errCtx },\r\n        { typ: \"exe\", value: 2, errCtx },\r\n        { typ: \"if\", value: 2, errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        { typ: \"loo\", value: -(len(body) + 10), errCtx },\r\n      ];\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => !!(i % 2));\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      const symErrMsg = `${op} name must be a new symbol or destructuring`;\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(symErrMsg, defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          if (!len(shape)) {\r\n            return err(symErrMsg);\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const pins: ParserIns[] = [];\r\n      const name = node2str([firstNode, ...nodes]);\r\n      const cloParams: string[] = [];\r\n      let monoFnBody = false;\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        push(\r\n          cloParams,\r\n          parsedParams.shape.map(p => p.name),\r\n        );\r\n        params = parsedParams.shape;\r\n        push(pins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        monoFnBody = len(nodes) === 1;\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        const firstSym = symAt(nodes, 0);\r\n        if (has(syntaxes, firstSym)) {\r\n          const { errCtx } = nodes[0] as Token;\r\n          return err(\r\n            `\"${firstSym}\" syntax unavailable in partial closure`,\r\n            errCtx,\r\n          );\r\n        }\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(pins, parseForm(nodes, params, op !== \"@\"));\r\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\r\n      const errors = pins.filter(i => i.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      //Remove do exe when fn body is only one expression\r\n      if (monoFnBody) {\r\n        cins.pop();\r\n        cins.pop();\r\n      }\r\n      return [\r\n        { typ: \"clo\", value: makeClosure(name, cloParams, cins), errCtx },\r\n        ...cins,\r\n      ];\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (head[0].typ === \"ref\") {\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 || has([\"npa\", \"upa\"], head[0].typ) ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (\r\n        text === \"%\" ||\r\n        (starts(text, \"%\") && isNum(substr(text, 1)))\r\n      ) {\r\n        const value = text === \"%\" ? 0 : toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, text, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], text, errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, text: \"args\", errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\": {\r\n        const errors = insErrorDetect(slice(fins, i + 1, i + ins.value.length));\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        stack.push({});\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invokeId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invokeId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(slice(tokens));\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, round, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `;This is a test comment\r\n           (print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"when and unless\",\r\n    code: `[(when 123 (print \"hi\") 234) (unless true (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false true false false true]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"For XY list\",\r\n    code: `(for vec [0 1] [0 1])`,\r\n    out: `[[0 0] [1 0] [0 1] [1 1]]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Loop\",\r\n    code: `(loop 3 i (print-str i))`,\r\n    out: `012null`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (let a :a) (+ 1 a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Closure with ext func\",\r\n    code: `(#(test.function %) 1)`,\r\n    out: `1\\nnull`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 3\",\r\n    code: `(reduce\r\n             (fn primes num\r\n               (if (find zero? (map (rem num) primes))\r\n                 primes\r\n                 (append num primes)))\r\n             [2]\r\n             (range 3 10))`,\r\n    out: `[2 3 5 7]`,\r\n  },\r\n  {\r\n    name: \"Closure with inter-lets\",\r\n    code: `(let a + c 5 d 10)\r\n           (let closure (fn b (let d 1) (a b c d)))\r\n           (let a - c 4 d 11)\r\n           (closure 1)`,\r\n    out: `7`,\r\n  },\r\n  {\r\n    name: \"Closure with inner-let\",\r\n    code: `(((fn x (let y 1) #[x y]) 2))`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Closure with captured f\",\r\n    code: `[((fn x (@(val x))) 0) (var f val) ((fn x (@(f x))) 0)]`,\r\n    out: `[0 val 0]`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Implicit currying\", code: \"(-> 1 inc (+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(% %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invokeId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print: (str, withNewLine) => {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: [],\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${round(elapsedMs)}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${round(totalMs)}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n    case \"ext\":\r\n      return a.v === b.v;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst quoteStr = (str: string) =>\r\n  str\r\n    .split(\"\")\r\n    .map(ch => (ch === '\"' ? '\\\\\"' : ch))\r\n    .join(\"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) =>\r\n    v.t === \"str\" ? `\"${quoteStr(v.v)}\"` : val2str(v);\r\n  if (val.t === \"clo\") {\r\n    return val.v.name ?? \"\";\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\n/** Replaces or sets index or key/value with another value in a string or\r\n * dictionary */\r\nexport function pathSet(path: Val[], replacement: Val, coll: Val): Val {\r\n  //If we're at the end of the path or it's a non-number index for non-dict\r\n  if (\r\n    !len(path) ||\r\n    (coll.t !== \"vec\" && coll.t !== \"dict\") ||\r\n    (coll.t === \"vec\" &&\r\n      (path[0].t !== \"num\" || path[0].v < 0 || path[0].v > len(coll.v)))\r\n  ) {\r\n    return coll;\r\n  }\r\n  if (coll.t === \"vec\") {\r\n    const vecCopy = slice(coll.v);\r\n    const idx = num(path[0]);\r\n    if (len(path) === 1) {\r\n      vecCopy[idx] = replacement;\r\n      return { t: \"vec\", v: vecCopy };\r\n    }\r\n    vecCopy[idx] = pathSet(slice(path, 1), replacement, vecCopy[idx]);\r\n    return { t: \"vec\", v: vecCopy };\r\n  }\r\n  if (len(path) === 1) {\r\n    return { t: \"dict\", v: dictSet(coll.v, path[0], replacement) };\r\n  }\r\n  return {\r\n    t: \"dict\",\r\n    v: dictSet(\r\n      coll.v,\r\n      path[0],\r\n      pathSet(slice(path, 1), replacement, dictGet(coll.v, path[0])),\r\n    ),\r\n  };\r\n}\r\n","export const insituxVersion = 220227;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { makeEnclosure } from \"./closure\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, sign, sqrt, floor, ceil, round, max, min, logn, log2, log10 } = pf;\r\nconst { cos, sin, tan, acos, asin, atan, sinh, cosh, tanh } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport {\r\n  assertUnreachable,\r\n  InvokeError,\r\n  InvokeResult,\r\n  syntaxes,\r\n} from \"./types\";\r\nimport { ExternalFunction, ExternalHandler } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict, pathSet } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet letsStack: { [key: string]: Val }[] = [];\r\nlet lets: typeof letsStack[0] = {};\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({ t: \"str\", v: stringify(args) });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\":\r\n      stack.push(toDict(args));\r\n      return;\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      _boo(isEqual(args[0], args[1]) === (op === \"fast=\"));\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\": {\r\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"asin\":\r\n    case \"acos\":\r\n    case \"atan\":\r\n    case \"sinh\":\r\n    case \"cosh\":\r\n    case \"tanh\": {\r\n      const f = { asin, acos, atan, sinh, cosh, tanh }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n    case \"ext?\": {\r\n      const { t } = args[0];\r\n      _boo(\r\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\r\n          substr(op, 0, slen(op) - 1) === t,\r\n      );\r\n      return;\r\n    }\r\n    case \"substr?\":\r\n      _boo(sub(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        i = subIdx(args[1].v, args[0].v);\r\n      } else if (args[0].t === \"vec\") {\r\n        i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"set-at\": {\r\n      const [pathVal, replacement, coll] = args;\r\n      stack.push(pathSet(vec(pathVal), replacement, coll));\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op !== \"reduce\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          _str(filtered.map(v => val2str(v)).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\r\n        } else {\r\n          _vec(filtered);\r\n        }\r\n        return;\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        return tErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, lim = len(args); i < lim; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          errors.forEach(err => (err.m = `-> arg ${i + 2}: ${err.m}`));\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"omit\":\r\n      stack.push(dictDrop(dic(args[1]), args[0]));\r\n      return;\r\n    case \"assoc\":\r\n      _dic(dictSet(dic(args[2]), args[0], args[1]));\r\n      return;\r\n    case \"append\":\r\n      _vec(concat(vec(args[1]), [args[0]]));\r\n      return;\r\n    case \"prepend\":\r\n      _vec(concat([args[0]], vec(args[1])));\r\n      return;\r\n    case \"insert\": {\r\n      const v = vec(args[2]);\r\n      let n = num(args[1]);\r\n      if (n === 0) {\r\n        _vec(concat([args[0]], v));\r\n      } else if (n === -1) {\r\n        _vec(concat(v, [args[0]]));\r\n      } else {\r\n        n = n > 0 ? min(n, len(v)) : max(len(v) + 1 + n, 0);\r\n        _vec(concat(concat(slice(v, 0, n), [args[0]]), slice(v, n)));\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\":\r\n    case \"sort-by\": {\r\n      const src = asArray(args[op === \"sort\" ? 0 : 1]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (op === \"sort\") {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args[0], errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (okT === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"distinct\": {\r\n      const arr = len(args) === 1 && args[0].t === \"vec\" ? vec(args[0]) : args;\r\n      const distinct: Val[] = [];\r\n      arr.forEach(a => {\r\n        if (!distinct.some(v => isEqual(a, v))) {\r\n          distinct.push(a);\r\n        }\r\n      });\r\n      _vec(distinct);\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[1])\r\n          .split(str(args[0]))\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n      return;\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const invokeId = `${errCtx.invokeId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      letsStack = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as op requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\n\r\nfunction checks(op: string, args: Val[], errCtx: ErrCtx, checkArity: boolean) {\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  const types = args.map(a => [a.t]);\r\n  const violations = typeCheck(op, types, errCtx);\r\n  return violations ? violations : false;\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const violations = checks(name, params, errCtx, checkArity);\r\n          if (violations) {\r\n            return violations;\r\n          }\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) =>\r\n        checks(name, params, errCtx, checkArity) ||\r\n        exeOp(name, params, ctx, errCtx);\r\n    }\r\n    if (name in ctx.env.funcs && name !== \"entry\") {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets) {\r\n      return getExe(ctx, lets[name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError(op.t, errCtx);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[alen + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\r\n    } else {\r\n      return { t: \"null\", v: undefined };\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    letsStack.push({});\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          _vec(args);\r\n        } else if (len(args) <= paramIdx) {\r\n          _nul();\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          _fun(name);\r\n        } else if (starts(name, \"$\")) {\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets) {\r\n          stack.push(lets[name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          _fun(name);\r\n        } else {\r\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        const errors = closure(params);\r\n        if (errors) {\r\n          //Find next catch statement\r\n          const nextCat = slice(func.ins, i).findIndex(\r\n            ins => ins.typ === \"cat\",\r\n          );\r\n          if (nextCat !== -1) {\r\n            i += nextCat;\r\n            lets[\"errors\"] = {\r\n              t: \"vec\",\r\n              v: errorsToDict(errors),\r\n            };\r\n            break;\r\n          }\r\n          return errors;\r\n        }\r\n        if (recurArgs) {\r\n          letsStack[len(letsStack) - 1] = {};\r\n          i = -1;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        if (ins.value === 1) {\r\n          stack.pop();\r\n        } else {\r\n          splice(stack, len(stack) - ins.value, ins.value);\r\n        }\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\": {\r\n        //Ensure any in-scope declarations are captured here\r\n        const derefIns = slice(ins.value.derefs).map(ins => {\r\n          const decl =\r\n            ins.typ === \"val\" &&\r\n            ins.value.t === \"str\" &&\r\n            (lets[ins.value.v] ?? ctx.env.vars[ins.value.v]);\r\n          return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\r\n        });\r\n        //Dereference closure captures\r\n        const errors = exeFunc(ctx, { ins: derefIns }, args, true);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        //Enclose the closure with dereferenced values\r\n        const numIns = len(derefIns);\r\n        const captures = splice(stack, len(stack) - numIns, numIns);\r\n        const cins = slice(func.ins, i + 1, i + 1 + ins.value.length);\r\n        stack.push({ t: \"clo\", v: makeEnclosure(ins.value, cins, captures) });\r\n        i += ins.value.length;\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    letsStack.pop();\r\n    lets = letsStack[len(letsStack) - 1];\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, invokeId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name, definition, handler }) => {\r\n    if (ops[name] && !externalOps[name]) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...definition, external: true };\r\n    externalOps[name] = handler;\r\n  });\r\n}\r\n\r\nfunction removeExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name }) => {\r\n    delete ops[name];\r\n    delete externalOps[name];\r\n  });\r\n}\r\n\r\nfunction innerInvoke(\r\n  ctx: Ctx,\r\n  closure: () => InvokeError[] | undefined,\r\n  printResult: boolean,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = closure();\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, letsStack] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param invokeId A unique ID referenced in invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  return innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId), printResult);\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n  printResult = false,\r\n): InvokeResult | undefined {\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return innerInvoke(\r\n    ctx,\r\n    () => exeFunc(ctx, ctx.env.funcs[funcName], params),\r\n    printResult,\r\n  );\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms: string[] = [];\r\n  if (alsoSyntax) {\r\n    push(syms, syntaxes);\r\n  }\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke, invokeFunction } from \".\";\r\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\r\nimport { getTimeMs } from \"./poly-fills\";\r\nimport { Ctx, InvokeResult, Val } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(\r\n  ctx: Ctx,\r\n  code: string,\r\n  id?: string,\r\n  printResult = true,\r\n): InvokeOutput {\r\n  id = id ? `-${id}` : `${getTimeMs()}`;\r\n  invocations.set(id, code);\r\n  const valOrErrs = invoke(ctx, code, id, printResult);\r\n  return valOrErrsOutput(valOrErrs);\r\n}\r\n\r\nexport function functionInvoker(\r\n  ctx: Ctx,\r\n  name: string,\r\n  params: Val[],\r\n  printResult = true,\r\n): InvokeOutput {\r\n  const valOrErrs = invokeFunction(ctx, name, params, printResult);\r\n  if (!valOrErrs) {\r\n    return [\r\n      { type: \"message\", text: `Invoke Error: function '${name}' not found.` },\r\n    ];\r\n  }\r\n  return valOrErrsOutput(valOrErrs);\r\n}\r\n\r\nfunction valOrErrsOutput(valOrErrs: InvokeResult) {\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  const msg = (text: string) => out.push({ type: \"message\", text });\r\n  const err = (text: string) => out.push({ type: \"error\", text });\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\r\n    const invocation = invocations.get(invokeId);\r\n    if (!invocation) {\r\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\r\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      err(lineText[col - 1]);\r\n      msg(`${half2}\\n`);\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      err(sym);\r\n      msg(`${half2}\\n`);\r\n    }\r\n    msg(`${e} Error: ${m}.\\n`);\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","prefix","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sinh","cosh","tanh","asin","acos","atan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","xor","rem","vec","dict","params","map","for","reduce","filter","remove","find","count","repeat","rand","into","assoc","omit","insert","append","prepend","sect","distinct","vals","do","val","split","join","time","version","tests","symbols","eval","reset","recur","syntaxes","typeNames","null","bool","ref","func","clo","wild","ext","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","makeClosure","name","cins","captures","derefs","exclusions","lim","cin","capture","typ","canCapture","makeEnclosure","derefed","ins","errCtxs","ci","shift","ins0","ins1","text","nullVal","falseVal","isToken","node","symAt","pos","arg","node2str","nodes","sym0","isClosure","n","token2str","poppedBody","expressions","lastExp","truncatedExps","popIns","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","head","unshift","err","eCtx","parsed","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","acc","when","flatBody","ifJmp","looJmp","symNode","defs","symErrMsg","d","def","defIns","shape","errors","parseParams","pins","cloParams","monoFnBody","parsedParams","p","firstSym","paramNames","param","position","consumeLast","errs","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","badArg","parse","code","invokeId","tokens","stringError","doTransforms","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","collected","entries","forEach","collectFuncs","_treeise","token","treeise","namedNodes","nodeOrErr","fae","f","state","kind","set","exe","output","out","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","pathSet","path","replacement","coll","vecCopy","externalOps","recurArgs","letsStack","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","exeOp","ctx","tErr","sum","every","pathVal","closure","getExe","arrays","lims","divisors","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","monoArityError","checks","checkArity","external","violations","valOrErr","exeFunc","valAndErr","found","alen","newKey","destruct","inClosure","stackLen","tooManyLoops","last","paramIdx","nextCat","derefIns","decl","numIns","printResult","handler","innerInvoke","invocations","parensRx","invoker","id","type","invocation","lineText","sym","half1","half2","valOrErrsOutput"],"sourceRoot":""}