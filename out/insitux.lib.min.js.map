{"version":3,"file":"insitux.lib.min.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, prefix: string): boolean =>\r\n  str.startsWith(prefix);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict }\r\n  | { t: \"ext\"; v: unknown };\r\n\r\nexport type ErrCtx = { invokeId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name?: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunction[];\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport const defaultCtx = {\r\n  env: { funcs: {}, vars: {} },\r\n  loopBudget: 1e7,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\nexport type Closure = {\r\n  name: string;\r\n  closureIns: Ins[];\r\n  captured: boolean[];\r\n  captureIns: Ins[];\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\" | \"par\"; value: Closure } //Closure and partial, text representation and instructions\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  name: string;\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: { minArity: 2, maxArity: 3, params: [[\"str\", \"vec\"]], returns: [\"num\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [[], \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n  ext: \"external\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\r\nimport { assertUnreachable, InvokeError } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst node2str = (nodes: Node[]): string =>\r\n  nodes.map(n => (isToken(n) ? n.text : `(${node2str(n)})`)).join(\" \");\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invokeId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text +=\r\n        { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n        (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`);\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invokeId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\r\n      }\r\n      funcs.push({ name, nodes: node.slice(2) });\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    //1-off arity deficiency rewritten as closure\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\r\n      nodes.unshift(firstNode);\r\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\r\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    if (has([\"if\", \"if!\", \"when\", \"match\"], op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(\"provide fewer than two branches\");\r\n      }\r\n      let [cond, branch1, branch2] = nodes.map(nodeParser);\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const [cond, ...body] = nodes.map(nodeParser);\r\n      const bodyIns = flat(body);\r\n      return [\r\n        ...cond,\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\") {\r\n      const [cond, ...args] = nodes.map(nodeParser);\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      } else if (isToken(nodes[0])) {\r\n        return err(\"argument 1 must be expression\");\r\n      }\r\n      const body = nodeParser(nodes[0]);\r\n      const when = flat(nodes.slice(1).map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\r\n        insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n        const [head, ...body] = args;\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n        ins.push({ typ: \"pop\", value: len(body), errCtx });\r\n        push(ins, flat(body));\r\n        ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n        return ins;\r\n      }\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => i % 2);\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(\"declaration name must be symbol\", defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const [[def], func, ...args] = nodes.map(nodeParser);\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const pins: ParserIns[] = [];\r\n      let asStr = node2str(nodes);\r\n      asStr = op === \"fn\" ? `(fn ${asStr})` : `${op}(${asStr})`;\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        params = parsedParams.shape;\r\n        push(pins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(pins, parseForm(nodes, params, op !== \"@\"));\r\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\r\n      const errors = pins.filter(i => i.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      if (op === \"fn\") {\r\n        cins.forEach(i => {\r\n          if (i.typ === \"npa\") {\r\n            i.typ = \"upa\";\r\n          }\r\n        });\r\n      }\r\n      //Calculate captures\r\n      const captureIns: Ins[] = [];\r\n      const captured: boolean[] = [];\r\n      for (let i = 0; i < len(cins); ++i) {\r\n        const ci = cins[i];\r\n        const isExe =\r\n          ci.typ === \"val\" &&\r\n          i + 1 < len(cins) &&\r\n          cins[i + 1].typ === \"exe\" &&\r\n          ((ci.value.t === \"func\" && !ops[ci.value.v]) || ci.value.t === \"str\");\r\n        captured[i] =\r\n          (ci.typ === \"ref\" &&\r\n            !cins.find(i => i.typ === \"let\" && i.value === ci.value)) ||\r\n          ci.typ === \"npa\" ||\r\n          isExe;\r\n        if (captured[i]) {\r\n          captureIns.push(ci);\r\n        }\r\n      }\r\n      const value = { name: asStr, closureIns: cins, captureIns, captured };\r\n      return [{ typ: op === \"@\" ? \"par\" : \"clo\", value, errCtx }];\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (head[0].typ === \"ref\") {\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const errors = insErrorDetect(ins.value.closureIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invokeId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invokeId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(tokens.slice());\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Closure with mixed lets\",\r\n    code: `(let a + c 5 d 10)\r\n           (let closure (fn b (let d 1) (a b c d)))\r\n           (let a - c 4 d 11)\r\n           (closure 1)`,\r\n    out: `7`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(push % %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invokeId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print(str, withNewLine) {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: [],\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n    case \"ext\":\r\n      return a.v === b.v;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return val.v.name;\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n","export const insituxVersion = 20220103;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunction, ExternalHandler } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet lets: { [key: string]: Val }[] = [];\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const types = args.map(a => [a.t]);\r\n    const violations = typeCheck(op, types, errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({ t: \"str\", v: stringify(args) });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\":\r\n      stack.push(toDict(args));\r\n      return;\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.reduce((sum, n) => sum - <number>n.v, 0),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.reduce((sum, n) => sum + <number>n.v, 0));\r\n      return;\r\n    case \"*\":\r\n      _num(args.reduce((sum, n) => sum * <number>n.v, 0));\r\n      return;\r\n    case \"/\":\r\n      _num(args.reduce((sum, n) => sum / <number>n.v, 0));\r\n      return;\r\n    case \"//\":\r\n      _num(args.reduce((sum, n) => floor(sum / <number>n.v), 0));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n    case \"ext?\": {\r\n      const { t } = args[0];\r\n      _boo(\r\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\r\n          substr(op, 0, slen(op) - 1) === t,\r\n      );\r\n      return;\r\n    }\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        } else {\r\n          const arr = args[0].v.split(\"\");\r\n          arr[num(args[2])] = args[1].v;\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = slice(args[0].v);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op !== \"reduce\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          _str(filtered.map(v => v.v).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\r\n        } else {\r\n          _vec(filtered);\r\n        }\r\n        return;\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        return tErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, end = len(args); i < end; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      const src = asArray(args[0]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (mapped[0][1].t === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[len(args) - 1])\r\n          .split(len(args) - 1 ? str(args[0]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n      return;\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const invokeId = `${errCtx.invokeId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as op requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets[len(lets) - 1]) {\r\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError(op.t, errCtx);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[alen + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\r\n    } else {\r\n      return { t: \"null\", v: undefined };\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[len(lets) - 1][name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          _vec(args);\r\n        } else if (len(args) <= paramIdx) {\r\n          _nul();\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          _fun(name);\r\n        } else if (starts(name, \"$\")) {\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets[len(lets) - 1]) {\r\n          stack.push(lets[len(lets) - 1][name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          _fun(name);\r\n        } else {\r\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        const errors = closure(params);\r\n        if (errors) {\r\n          //Find next catch statement\r\n          const nextCat = slice(func.ins, i).findIndex(\r\n            ins => ins.typ === \"cat\",\r\n          );\r\n          if (nextCat !== -1) {\r\n            i += nextCat;\r\n            lets[len(lets) - 1][\"errors\"] = {\r\n              t: \"vec\",\r\n              v: errorsToDict(errors),\r\n            };\r\n            break;\r\n          }\r\n          return errors;\r\n        }\r\n        if (recurArgs) {\r\n          lets[len(lets) - 1] = {};\r\n          i = -1;\r\n          const nArgs = ins.value;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        let { name, closureIns: cins, captured, captureIns } = ins.value;\r\n        const newCins: Ins[] = [];\r\n        if (!len(captureIns)) {\r\n          push(newCins, cins);\r\n        } else {\r\n          cins = cins.map((ins, i) => {\r\n            const decl =\r\n              ins.typ === \"val\" &&\r\n              ins.value.t === \"str\" &&\r\n              (lets[len(lets) - 1][ins.value.v] ?? ctx.env.vars[ins.value.v]);\r\n            captured[i] = decl ? false : captured[i];\r\n            return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\r\n          });\r\n          const errors = exeFunc(ctx, { ins: captureIns }, args, true);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const numIns = len(captureIns);\r\n          const captures = splice(stack, len(stack) - numIns, numIns);\r\n          const cap = (value: Val) => <Ins>{ typ: \"val\", value, errCtx };\r\n          for (let i = 0, c = 0; i < len(captured); ++i) {\r\n            newCins.push(captured[i] ? cap(captures[c++]) : cins[i]);\r\n          }\r\n        }\r\n        stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: newCins } });\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, invokeId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name, definition, handler }) => {\r\n    if (ops[name] && !externalOps[name]) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...definition, external: true };\r\n    externalOps[name] = handler;\r\n  });\r\n}\r\n\r\nfunction removeExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name }) => {\r\n    delete ops[name];\r\n    delete externalOps[name];\r\n  });\r\n}\r\n\r\nfunction innerInvoke(\r\n  ctx: Ctx,\r\n  closure: () => InvokeError[] | undefined,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = closure();\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, lets] = [[], []];\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param invokeId A unique ID referenced in invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  const result = innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId));\r\n  if (printResult && result.kind === \"val\") {\r\n    ctx.print(val2str(result.value), true);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n): InvokeResult | undefined {\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return innerInvoke(ctx, () => exeFunc(ctx, ctx.env.funcs[funcName], params));\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax\r\n    ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"when\", \"while\", \"match\", \"catch\"]\r\n    : [];\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke } from \".\";\r\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\r\nimport { getTimeMs } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(ctx: Ctx, code: string, id?: string): InvokeOutput {\r\n  id = id ? `-${id}` : `${getTimeMs()}`;\r\n  invocations.set(id, code);\r\n  const valOrErrs = invoke(ctx, code, id, true);\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  const msg = (text: string) => out.push({ type: \"message\", text });\r\n  const err = (text: string) => out.push({ type: \"error\", text });\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\r\n    const invocation = invocations.get(invokeId);\r\n    if (!invocation) {\r\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\r\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      err(lineText[col - 1]);\r\n      msg(`${half2}\\n`);\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      err(sym);\r\n      msg(`${half2}\\n`);\r\n    }\r\n    msg(`${e} Error: ${m}.\\n`);\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","prefix","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","xor","rem","vec","dict","params","map","for","reduce","filter","remove","find","count","repeat","rand","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","recur","typeNames","null","bool","ref","func","clo","wild","ext","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","nullVal","falseVal","isToken","node","symAt","pos","arg","typ","text","node2str","nodes","n","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","shift","head","unshift","err","eCtx","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","acc","when","defs","d","lim","def","defIns","shape","errors","parseParams","pins","asStr","parsedParams","cins","forEach","captureIns","captured","ci","isExe","name","closureIns","ins","paramNames","param","position","consumeLast","errs","parsed","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","badArg","parse","code","invokeId","tokens","stringError","makeCollsOps","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","collected","entries","collectFuncs","_treeise","token","treeise","namedNodes","nodeOrErr","fae","f","state","kind","set","exe","output","out","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","externalOps","recurArgs","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","monoArityError","getExe","ctx","checkArity","external","valOrErr","tErr","violations","sum","every","closure","arrays","lims","divisors","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","alen","newKey","destruct","inClosure","stackLen","tooManyLoops","last","paramIdx","nextCat","newCins","decl","numIns","captures","cap","printResult","handler","innerInvoke","invocations","parensRx","invoker","id","type","invocation","lineText","sym","half1","half2"],"sourceRoot":""}