{"version":3,"file":"insitux.lib.min.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/closure.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number =>\r\n  x !== \"\" && !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, prefix: string): boolean =>\r\n  str.startsWith(prefix);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const replace = (str: string, what: string, to: string): string =>\r\n  str.split(what).join(to);\r\nexport const rreplace = (str: string, what: string, to: string) =>\r\n  str.replace(new RegExp(what, \"g\"), to);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sinh = Math.sinh;\r\nexport const cosh = Math.cosh;\r\nexport const tanh = Math.tanh;\r\nexport const asin = Math.asin;\r\nexport const acos = Math.acos;\r\nexport const atan = Math.atan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict }\r\n  | { t: \"ext\"; v: unknown };\r\n\r\nexport type ErrCtx = { invokeId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name?: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set?: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get?: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunctions;\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe?: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow,\r\n   * rather this effectively limits the time an Insitux program may hang for. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport const defaultCtx = {\r\n  env: { funcs: {}, vars: {} },\r\n  loopBudget: 1e7,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\nexport type Closure = {\r\n  readonly name: string;\r\n  readonly length: number;\r\n  captures: boolean[];\r\n  derefs: Ins[];\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  //Named and Unnamed parameters\r\n  | { typ: \"npa\" | \"upa\"; value: number; text: string }\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  //Execute last stack value, number of args, with arity check\r\n  | { typ: \"exa\"; value: number }\r\n  //Number of instructions\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\" | \"sat\"; value: number }\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\"; value: Closure } //Closure/partial\r\n  | { typ: \"val\"; value: Val }\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  /** Does the function cause side-effects when used? */\r\n  hasEffects?: boolean;\r\n  numeric?: true | \"in only\";\r\n  params?: (\"any\" | Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\nexport type ExternalFunctions = { [name: string]: ExternalFunction };\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"], hasEffects: true },\r\n  \"print-str\": { returns: [\"null\"], hasEffects: true },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"==\": { minArity: 2 },\r\n  \"!=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 2, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  \">\": { minArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"<=\": { minArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  \">=\": { minArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"str<\": { minArity: 2, returns: [\"bool\"] },\r\n  \"str>\": { minArity: 2, returns: [\"bool\"] },\r\n  \"str<=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"str>=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"fast=\": { exactArity: 2, returns: [\"bool\"] },\r\n  \"fast!=\": { exactArity: 2, returns: [\"bool\"] },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"fast>\": { exactArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"fast<=\": { exactArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"fast>=\": { exactArity: 2, numeric: \"in only\", returns: [\"bool\"] },\r\n  neg: { exactArity: 1, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"type-of\": { exactArity: 1, returns: [\"str\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  asin: { exactArity: 1, numeric: true },\r\n  acos: { exactArity: 1, numeric: true },\r\n  atan: { exactArity: 1, numeric: true },\r\n  sinh: { exactArity: 1, numeric: true },\r\n  cosh: { exactArity: 1, numeric: true },\r\n  tanh: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"to-vec\": { exactArity: 1, params: [[\"str\", \"dict\"]], returns: [\"vec\"] },\r\n  \"substr?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"str\", \"vec\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  \"set-at\": {\r\n    exactArity: 3,\r\n    params: [\"vec\", \"any\", [\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  \"update-at\": {\r\n    exactArity: 3,\r\n    params: [\"vec\", \"any\", [\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  juxt: { returns: [\"clo\"] },\r\n  \"pos-juxt\": { returns: [\"clo\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  xmap: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"str\", \"dict\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  reductions: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [\"any\", [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [\"any\", \"num\"] },\r\n  times: { minArity: 2, params: [\"num\", \"any\"] },\r\n  str: { returns: [\"str\"] },\r\n  strn: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  assoc: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  omit: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  drop: {\r\n    exactArity: 2,\r\n    params: [\"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  insert: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  append: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  prepend: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  skip: {\r\n    exactArity: 2,\r\n    params: [\"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  first: {\r\n    exactArity: 2,\r\n    params: [\"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  last: {\r\n    exactArity: 2,\r\n    params: [\"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  crop: {\r\n    exactArity: 3,\r\n    params: [\"num\", \"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  flatten: {\r\n    exactArity: 1,\r\n    params: [\"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  shuffle: {\r\n    exactArity: 1,\r\n    params: [\"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sample: {\r\n    exactArity: 2,\r\n    params: [\"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sort: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  \"sort-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  distinct: {\r\n    returns: [\"vec\"],\r\n  },\r\n  \"group-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"dict\"],\r\n  },\r\n  \"part-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  partition: {\r\n    exactArity: 2,\r\n    params: [\"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  freqs: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"dict\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { exactArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  replace: {\r\n    exactArity: 3,\r\n    params: [\"str\", \"str\", \"str\"],\r\n    returns: [\"str\"],\r\n  },\r\n  rreplace: {\r\n    exactArity: 3,\r\n    params: [\"str\", \"str\", \"str\"],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  about: { exactArity: 1, params: [[\"str\", \"func\"]], returns: [\"dict\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const syntaxes = [\r\n  \"function\",\r\n  \"fn\",\r\n  \"var\",\r\n  \"let\",\r\n  \"var!\",\r\n  \"let!\",\r\n  \"return\",\r\n  \"if\",\r\n  \"if!\",\r\n  \"when\",\r\n  \"unless\",\r\n  \"while\",\r\n  \"loop\",\r\n  \"match\",\r\n  \"satisfy\",\r\n  \"catch\",\r\n];\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n  ext: \"external\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i] || need === \"any\") {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0])\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { has, len, push, slice } from \"./poly-fills\";\r\nimport { Closure, Func, Ins, Val } from \"./types\";\r\n\r\n/** Declare a closure from instructions and other info, calculating its\r\n * captures ahead-of-time. */\r\nexport function makeClosure(\r\n  name: string,\r\n  outerParams: string[],\r\n  cloParams: string[],\r\n  cins: Ins[],\r\n): Closure {\r\n  const captures: boolean[] = [];\r\n  const derefs: Ins[] = [];\r\n  const exclusions: string[] = cloParams;\r\n  for (let i = 0, lim = len(cins); i < lim; ++i) {\r\n    const cin = cins[i];\r\n    let capture = false;\r\n    if (cin.typ === \"clo\") {\r\n      //Inherit direct sub-closures' outer-parameter captures\r\n      captures.push(false);\r\n      const newSubDerefs: Ins[] = [];\r\n      const newSubCaptures: boolean[] = [];\r\n      for (let j = 0, d = 0; j < cin.value.length; ++j) {\r\n        const ccin = cins[i + 1 + j];\r\n        const capture = ccin.typ === \"npa\" && has(outerParams, ccin.text);\r\n        captures.push(capture);\r\n        newSubCaptures.push(!capture && cin.value.captures[j]);\r\n        if (capture) {\r\n          derefs.push(cin.value.derefs[d++]);\r\n        } else {\r\n          if (cin.value.captures[j]) {\r\n            newSubDerefs.push(cin.value.derefs[d++]);\r\n          }\r\n        }\r\n      }\r\n      cin.value.derefs = newSubDerefs;\r\n      cin.value.captures = newSubCaptures;\r\n      i += cin.value.length;\r\n      continue;\r\n    } else if (cin.typ === \"let\" || cin.typ === \"var\") {\r\n      exclusions.push(cin.value);\r\n    } else if (canCapture(exclusions, cin, i + 1 !== lim && cins[i + 1])) {\r\n      derefs.push(cin);\r\n      capture = true;\r\n    }\r\n    captures.push(capture);\r\n  }\r\n  return { name, length: len(cins), captures, derefs };\r\n}\r\n\r\n/** Create a function representing a parent closure, and its sub-closures with\r\n * all values needing captured at this point having been replaced. */\r\nexport function makeEnclosure(\r\n  { name, length, captures, derefs }: Closure,\r\n  cins: Ins[],\r\n  derefed: Val[],\r\n): Func {\r\n  if (!len(derefed)) {\r\n    return { name, ins: cins };\r\n  }\r\n  const ins: Ins[] = [];\r\n  const errCtxs = derefs.map(i => i.errCtx);\r\n  for (let i = 0; i < length; ++i) {\r\n    if (captures[i]) {\r\n      ins.push({\r\n        typ: \"val\",\r\n        value: derefed.shift()!,\r\n        errCtx: errCtxs.shift()!,\r\n      });\r\n    } else {\r\n      ins.push(cins[i]);\r\n    }\r\n  }\r\n  return { name, ins };\r\n}\r\n\r\n/** Tests whether an Instruction in a particular context can be captured.\r\n * Doesn't attempt to rewrite str Vals because they are mapped and captured\r\n * (or not) within the let/var Ctx in the machine. */\r\nfunction canCapture(exclusions: string[], ins0: Ins, ins1: false | Ins) {\r\n  const isExeVal =\r\n    ins1 && ins0.typ === \"val\" && ins0.value.t === \"str\" && ins1.typ === \"exe\";\r\n  return (\r\n    isExeVal ||\r\n    (ins0.typ === \"npa\" && !has(exclusions, ins0.text)) ||\r\n    (ins0.typ === \"ref\" && !has(exclusions, ins0.value))\r\n  );\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport { makeClosure } from \"./closure\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, Func, Funcs, Ins, ops, Val, syntaxes } from \"./types\";\r\nimport { assertUnreachable, InvokeError, ErrCtx } from \"./types\";\r\n\r\nexport type Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst token2str = ({ typ, text }: Token): string =>\r\n  typ === \"str\" ? `\"${text}\"` : text;\r\nfunction node2str(nodes: Node[]): string {\r\n  const sym0 = symAt(nodes, 0);\r\n  const isClosure = has([\"#\", \"@\"], sym0);\r\n  if (isClosure) {\r\n    nodes = slice(nodes, 1);\r\n  }\r\n  return `${isClosure ? sym0 : \"\"}(${nodes\r\n    .map(n => (isToken(n) ? token2str(n) : node2str(n)))\r\n    .join(\" \")})`;\r\n}\r\n\r\n/** Inserts pop instruction after penultimate body expression */\r\nconst poppedBody = (expressions: ParserIns[][]): ParserIns[] => {\r\n  if (len(expressions) === 1) {\r\n    return flat(expressions);\r\n  }\r\n  const lastExp = expressions[len(expressions) - 1];\r\n  const truncatedExps = slice(expressions, 0, len(expressions) - 1);\r\n  const popIns = <ParserIns>{\r\n    typ: \"pop\",\r\n    value: len(truncatedExps),\r\n    errCtx: lastExp[0].errCtx,\r\n  };\r\n  return flat([...truncatedExps, [popIns], lastExp]);\r\n};\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invokeId: string,\r\n  doTransforms = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text += doTransforms\r\n        ? { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n          (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`)\r\n        : `\\\\${nextCh}`;\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invokeId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inSymbol = false;\r\n      inNumber &&= c === \",\";\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: doTransforms ? text : c, errCtx });\r\n        if (doTransforms && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      const errCtx = node[0].errCtx;\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx });\r\n      } else if (ops[name]) {\r\n        funcs.push({ err: \"redeclaration of built-in operation\", errCtx });\r\n      } else {\r\n        funcs.push({ name, nodes: slice(node, 2) });\r\n      }\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    //1-off arity deficiency rewritten as closure\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\r\n      nodes.unshift(firstNode);\r\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\r\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    const needsCond = [\"if\", \"if!\", \"when\", \"unless\", \"match\", \"satisfy\"];\r\n    if (has(needsCond, op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(`provide one or two branches, not ${len(nodes)}`);\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, branch1] = parsed;\r\n      let branch2 = parsed[2];\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\" || op === \"unless\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\r\n      const bodyIns = poppedBody(body);\r\n      return [\r\n        ...cond,\r\n        ...(op === \"unless\"\r\n          ? [\r\n              <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" } },\r\n              <Ins>{ typ: \"exe\", value: 1 },\r\n            ]\r\n          : []),\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\" || op == \"satisfy\") {\r\n      const opIns: Ins[\"typ\"] = op === \"match\" ? \"mat\" : \"sat\";\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: opIns, value: len(when) + 1, errCtx: a[0].errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const when = nodeParser(nodes.pop()!);\r\n      const body = flat(nodes.map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        const [head, body] = [args[0], slice(args, 1)];\r\n        const flatBody = poppedBody(body);\r\n        const ifJmp = len(flatBody) + 2;\r\n        const looJmp = -(len(head) + len(flatBody) + 3);\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: ifJmp, errCtx });\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        push(ins, flatBody);\r\n        ins.push({ typ: \"loo\", value: looJmp, errCtx });\r\n        return ins;\r\n      }\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"loop\") {\r\n      if (len(nodes) < 3) {\r\n        return err(\"provide at least 3 arguments\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const symNode = nodes[1];\r\n      const body = poppedBody(slice(parsed, 2));\r\n      if (!isToken(symNode)) {\r\n        return err(\"argument 2 must be symbol\");\r\n      }\r\n      //(let sym 0 sym-limit n) ... body ... (if (< (let sym (inc sym)) sym-limit) <exit> <loo>)\r\n      const ins: ParserIns[] = [\r\n        { typ: \"val\", value: { t: \"num\", v: 0 }, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        ...parsed[0],\r\n        { typ: \"let\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        ...body,\r\n        { typ: \"ref\", value: symNode.text, errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"inc\" }, errCtx },\r\n        { typ: \"exe\", value: 1, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        { typ: \"ref\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"<\" }, errCtx },\r\n        { typ: \"exe\", value: 2, errCtx },\r\n        { typ: \"if\", value: 2, errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        { typ: \"loo\", value: -(len(body) + 10), errCtx },\r\n      ];\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => !!(i % 2));\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      const symErrMsg = `${op} name must be a new symbol or destructuring`;\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(symErrMsg, defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          if (!len(shape)) {\r\n            return err(symErrMsg);\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const pins: ParserIns[] = [];\r\n      const name = node2str([firstNode, ...nodes]);\r\n      const cloParams: string[] = [];\r\n      const outerParams = slice(params).map(p => p.name);\r\n      let monoFnBody = false;\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        push(\r\n          cloParams,\r\n          parsedParams.shape.map(p => p.name),\r\n        );\r\n        push(params, parsedParams.shape);\r\n        push(pins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        monoFnBody = len(nodes) === 1;\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        const firstSym = symAt(nodes, 0);\r\n        if (has(syntaxes, firstSym)) {\r\n          const { errCtx } = nodes[0] as Token;\r\n          return err(\r\n            `\"${firstSym}\" syntax unavailable in partial closure`,\r\n            errCtx,\r\n          );\r\n        }\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(pins, parseForm(nodes, params, op !== \"@\"));\r\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\r\n      const errors = pins.filter(i => i.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      //Remove do exe when fn body is only one expression\r\n      if (monoFnBody) {\r\n        cins.pop();\r\n        cins.pop();\r\n      }\r\n      const value = makeClosure(name, outerParams, cloParams, cins);\r\n      return [{ typ: \"clo\", value, errCtx }, ...cins];\r\n    } else if (op === \"->\") {\r\n      const newNodes = nodes.reduce((acc, node) => [node, acc]) as Node[];\r\n      const parsed = parseForm(newNodes, params);\r\n      return parsed;\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (len(head) === 1 && head[0].typ === \"ref\") {\r\n    //Transform potential external function into string\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 || has([\"npa\", \"upa\"], head[0].typ) ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (\r\n        text === \"%\" ||\r\n        (starts(text, \"%\") && isNum(substr(text, 1)))\r\n      ) {\r\n        const value = text === \"%\" ? 0 : toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, text, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], text, errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, text: \"args\", errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    const token = tokens[t];\r\n    //To catch (#) and (@)\r\n    if (token.typ === \"sym\" && (token.text === \"#\" || token.text === \"@\")) {\r\n      continue;\r\n    }\r\n    if (lastWasL && token.typ === \")\") {\r\n      emptyHead = token;\r\n      break;\r\n    }\r\n    lastWasL = token.typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\": {\r\n        const errors = insErrorDetect(slice(fins, i + 1, i + ins.value.length));\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        stack.push({});\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\":\r\n      case \"sat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invokeId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invokeId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(slice(tokens));\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, round, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `;This is a test comment\r\n           (print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(neg 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"when and unless\",\r\n    code: `[(when 123 (print \"hi\") 234) (unless true (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false true false false true]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"For XY list\",\r\n    code: `(for vec [0 1] [0 1])`,\r\n    out: `[[0 0] [1 0] [0 1] [1 1]]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Loop\",\r\n    code: `(loop 3 i (print-str i))`,\r\n    out: `012null`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (let a :a) (+ 1 a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Closure with ext func\",\r\n    code: `(#(test.function %) 1)`,\r\n    out: `1\\nnull`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 3\",\r\n    code: `(reduce\r\n             (fn primes num\r\n               (if (find zero? (map (rem num) primes))\r\n                 primes\r\n                 (append num primes)))\r\n             [2]\r\n             (range 3 10))`,\r\n    out: `[2 3 5 7]`,\r\n  },\r\n  {\r\n    name: \"Closure with inter-lets\",\r\n    code: `(let a + c 5 d 10)\r\n           (let closure (fn b (let d 1) (a b c d)))\r\n           (let a - c 4 d 11)\r\n           (closure 1)`,\r\n    out: `7`,\r\n  },\r\n  {\r\n    name: \"Closure with inner-let\",\r\n    code: `(((fn x (let y 1) #[x y]) 2))`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Closure with captured f\",\r\n    code: `[((fn x (@(val x))) 0) (var f val) ((fn y (@(f y))) 0)]`,\r\n    out: `[0 val 0]`,\r\n  },\r\n  {\r\n    name: \"Closure w/ inter-params\",\r\n    code: `(function f x (fn y (fn z [x y z]))) (((f :a) :b) :c)`,\r\n    out: `[:a :b :c]`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Implicit currying\", code: \"(-> 1 inc (+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(% %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invokeId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print: (str, withNewLine) => {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: {},\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${round(elapsedMs)}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${round(totalMs)}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const _boo = (v: boolean) => <Val>{ t: \"bool\", v };\r\nexport const _num = (v: number) => <Val>{ t: \"num\", v };\r\nexport const _str = (v = \"\") => <Val>{ t: \"str\", v };\r\nexport const _key = (v: string) => <Val>{ t: \"key\", v };\r\nexport const _vec = (v: Val[] = []) => <Val>{ t: \"vec\", v };\r\nexport const _dic = (v: Dict) => <Val>{ t: \"dict\", v };\r\nexport const _nul = () => <Val>{ t: \"null\", v: undefined };\r\nexport const _fun = (v: string) => <Val>{ t: \"func\", v };\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n    case \"ext\":\r\n      return a.v === b.v;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst quoteStr = (str: string) =>\r\n  str\r\n    .split(\"\")\r\n    .map(ch => (ch === '\"' ? '\\\\\"' : ch))\r\n    .join(\"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) =>\r\n    v.t === \"str\" ? `\"${quoteStr(v.v)}\"` : val2str(v);\r\n  if (val.t === \"clo\") {\r\n    return val.v.name ?? \"\";\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\n/** Replaces or sets index or key/value with another value in a string or\r\n * dictionary */\r\nexport function pathSet(\r\n  path: Val[],\r\n  replacer: (v: Val) => Val,\r\n  coll: Val,\r\n): Val {\r\n  //If we're at the end of the path or it's a non-number index for non-dict\r\n  if (\r\n    !len(path) ||\r\n    (coll.t !== \"vec\" && coll.t !== \"dict\") ||\r\n    (coll.t === \"vec\" &&\r\n      (path[0].t !== \"num\" || path[0].v < 0 || path[0].v > len(coll.v)))\r\n  ) {\r\n    return coll;\r\n  }\r\n  if (coll.t === \"vec\") {\r\n    const vecCopy = slice(coll.v);\r\n    const idx = num(path[0]);\r\n    if (len(path) === 1) {\r\n      vecCopy[idx] = replacer(vecCopy[idx]);\r\n      return { t: \"vec\", v: vecCopy };\r\n    }\r\n    vecCopy[idx] = pathSet(slice(path, 1), replacer, vecCopy[idx]);\r\n    return { t: \"vec\", v: vecCopy };\r\n  }\r\n  if (len(path) === 1) {\r\n    const existing = dictGet(coll.v, path[0]);\r\n    return { t: \"dict\", v: dictSet(coll.v, path[0], replacer(existing)) };\r\n  }\r\n  return {\r\n    t: \"dict\",\r\n    v: dictSet(\r\n      coll.v,\r\n      path[0],\r\n      pathSet(slice(path, 1), replacer, dictGet(coll.v, path[0])),\r\n    ),\r\n  };\r\n}\r\n","export const insituxVersion = 220422;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { makeEnclosure } from \"./closure\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, sign, sqrt, floor, ceil, round, max, min, logn, log2, log10 } = pf;\r\nconst { cos, sin, tan, acos, asin, atan, sinh, cosh, tanh } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, strIdx, replace, rreplace } = pf;\r\nconst { charCode, codeChar, getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum, isArray } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, Env, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunctions, syntaxes } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict, pathSet } from \"./val\";\r\nimport { _boo, _num, _str, _key, _vec, _dic, _nul, _fun } from \"./val\";\r\n\r\nlet letsStack: { [key: string]: Val }[] = [];\r\nlet lets: typeof letsStack[0] = {};\r\nlet recurArgs: undefined | Val[];\r\n\r\ntype _Exception = { errors: InvokeError[] };\r\nfunction _throw(errors: InvokeError[]): Val {\r\n  throw <_Exception>{ errors };\r\n}\r\nfunction isThrown(e: unknown): e is _Exception {\r\n  return !!e && typeof e === \"object\" && \"errors\" in e!;\r\n}\r\nconst throwTypeErr = (msg: string, errCtx: ErrCtx) =>\r\n  _throw([typeErr(msg, errCtx)]);\r\n\r\nfunction exeOp(op: string, args: Val[], ctx: Ctx, errCtx: ErrCtx): Val {\r\n  switch (op) {\r\n    case \"str\":\r\n      return _str(stringify(args));\r\n    case \"strn\":\r\n      return _str(stringify(args.filter(a => a.t !== \"null\")));\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      return _nul();\r\n    case \"vec\":\r\n      return _vec(args);\r\n    case \"dict\":\r\n      return toDict(args);\r\n    case \"len\":\r\n      return _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        return _num(toNum(args[0].v));\r\n      } else {\r\n        return _nul();\r\n      }\r\n    case \"to-key\":\r\n      return _key(`:${val2str(args[0])}`);\r\n    case \"to-vec\":\r\n      return _vec(asArray(args[0]));\r\n    case \"!\":\r\n      return _boo(!asBoo(args[0]));\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          return _boo(false);\r\n        }\r\n      }\r\n      return _boo(true);\r\n    case \"==\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i])) {\r\n          return args[0];\r\n        }\r\n      }\r\n      return _nul();\r\n    case \"-\":\r\n      return _num(args.map(num).reduce((sum, n) => sum - n));\r\n    case \"**\":\r\n      return _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n    case \"+\":\r\n      return _num(args.map(num).reduce((sum, n) => sum + n));\r\n    case \"*\":\r\n      return _num(args.map(num).reduce((sum, n) => sum * n));\r\n    case \"/\":\r\n      return _num(args.map(num).reduce((sum, n) => sum / n));\r\n    case \"//\":\r\n      return _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      return _boo(isEqual(args[0], args[1]) === (op === \"fast=\"));\r\n    case \"fast-\":\r\n      return _num(<number>args[0].v - <number>args[1].v);\r\n    case \"fast+\":\r\n      return _num(<number>args[0].v + <number>args[1].v);\r\n    case \"fast*\":\r\n      return _num(<number>args[0].v * <number>args[1].v);\r\n    case \"fast/\":\r\n      return _num(<number>args[0].v / <number>args[1].v);\r\n    case \"fast//\":\r\n      return _num(floor(<number>args[0].v / <number>args[1].v));\r\n    case \"fast<\":\r\n      return _boo(<number>args[0].v < <number>args[1].v);\r\n    case \"fast>\":\r\n      return _boo(<number>args[0].v > <number>args[1].v);\r\n    case \"fast<=\":\r\n      return _boo(<number>args[0].v <= <number>args[1].v);\r\n    case \"fast>=\":\r\n      return _boo(<number>args[0].v >= <number>args[1].v);\r\n    case \"neg\":\r\n      return _num(-num(args[0]));\r\n    case \"rem\":\r\n      return _num(args.map(num).reduce((sum, n) => sum % n));\r\n    case \"min\":\r\n      return _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n    case \"max\":\r\n      return _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          return _boo(false);\r\n        }\r\n      }\r\n      return _boo(true);\r\n    case \"str<\":\r\n    case \"str>\":\r\n    case \"str<=\":\r\n    case \"str>=\":\r\n      if (args.some(({ t }) => t !== \"str\")) {\r\n        throwTypeErr(\"can only compare all string\", errCtx);\r\n      }\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<string>args[i - 1].v, <string>args[i].v];\r\n        if (\r\n          (op === \"str<\" && a >= b) ||\r\n          (op === \"str>\" && a <= b) ||\r\n          (op === \"str<=\" && a > b) ||\r\n          (op === \"str>=\" && a < b)\r\n        ) {\r\n          return _boo(false);\r\n        }\r\n      }\r\n      return _boo(true);\r\n    case \"inc\":\r\n      return _num(<number>args[0].v + 1);\r\n    case \"dec\":\r\n      return _num(<number>args[0].v - 1);\r\n    case \"abs\":\r\n      return _num(abs(<number>args[0].v));\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        return _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        return _num(round(<number>args[0].v));\r\n      }\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\": {\r\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\r\n      return _num(f(num(args[0])));\r\n    }\r\n    case \"asin\":\r\n    case \"acos\":\r\n    case \"atan\":\r\n    case \"sinh\":\r\n    case \"cosh\":\r\n    case \"tanh\": {\r\n      const f = { asin, acos, atan, sinh, cosh, tanh }[op];\r\n      return _num(f(num(args[0])));\r\n    }\r\n    case \"and\":\r\n      return _boo(args.every(asBoo));\r\n    case \"or\": {\r\n      const i = args.findIndex(asBoo);\r\n      return i === -1 ? _nul() : args[i];\r\n    }\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        return asBoo(args[0]) ? args[0] : args[1];\r\n      } else {\r\n        return _boo(false);\r\n      }\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      return _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n    case \"~\":\r\n      return _num(~num(args[0]));\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      return _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      return _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n    case \"ext?\": {\r\n      const { t } = args[0];\r\n      return _boo(\r\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\r\n          substr(op, 0, slen(op) - 1) === t,\r\n      );\r\n    }\r\n    case \"type-of\":\r\n      return _str(args[0].t);\r\n    case \"substr?\":\r\n      return _boo(!!slen(str(args[0])) && sub(str(args[1]), str(args[0])));\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[1].t === \"str\") {\r\n        if (args[0].t !== \"str\") {\r\n          throwTypeErr(\"strings can only contain strings\", errCtx);\r\n        } else {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        }\r\n      } else if (args[1].t === \"vec\") {\r\n        i = args[1].v.findIndex(a => isEqual(a, args[0]));\r\n      }\r\n      if (i === -1) {\r\n        return _nul();\r\n      } else {\r\n        return _num(i);\r\n      }\r\n    }\r\n    case \"set-at\": {\r\n      const [pathVal, replacement, coll] = args;\r\n      return pathSet(vec(pathVal), _ => replacement, coll);\r\n    }\r\n    case \"update-at\": {\r\n      const [pathVal, replacer, coll] = args;\r\n      const closure = getExe(ctx, replacer, errCtx);\r\n      return pathSet(vec(pathVal), v => closure([v]), coll);\r\n    }\r\n    case \"juxt\": {\r\n      const makeArg = (value: Val): Ins[] => [\r\n        { typ: \"val\", value, errCtx },\r\n        { typ: \"upa\", value: -1, text: \"args\", errCtx },\r\n        { typ: \"val\", value: _fun(\"...\"), errCtx },\r\n        { typ: \"exe\", value: 2, errCtx },\r\n      ];\r\n      const ins: Ins[] = [\r\n        ...flat(args.map(makeArg)),\r\n        { typ: \"val\", value: _fun(\"vec\"), errCtx },\r\n        { typ: \"exe\", value: len(args), errCtx },\r\n      ];\r\n      return {\r\n        t: \"clo\",\r\n        v: <Func>{\r\n          name: `(juxt ${args.map(val2str).join(\" \")})`,\r\n          ins,\r\n        },\r\n      };\r\n    }\r\n    case \"pos-juxt\": {\r\n      const makeArg = (value: Val, n: number): Ins[] => [\r\n        { typ: \"dpa\", value: [0, n], errCtx },\r\n        { typ: \"val\", value, errCtx },\r\n        { typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      const ins: Ins[] = [\r\n        ...flat(args.map(makeArg)),\r\n        { typ: \"val\", value: _fun(\"vec\"), errCtx },\r\n        { typ: \"exe\", value: len(args), errCtx },\r\n      ];\r\n      return {\r\n        t: \"clo\",\r\n        v: <Func>{\r\n          name: `(pos-juxt ${args.map(val2str).join(\" \")})`,\r\n          ins,\r\n        },\r\n      };\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"reductions\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          throwTypeErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n            errCtx,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          _throw([{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }]);\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          array.push(closure(arrays.map((a, i) => a[argIdxs[i]])));\r\n        }\r\n        return _vec(array);\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          array.push(closure(arrays.map(a => a[i])));\r\n        }\r\n        return _vec(array);\r\n      }\r\n\r\n      if (op !== \"reduce\" && op != \"reductions\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const b = asBoo(closure([array[i], ...args]));\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              return array[i];\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            return _num(count);\r\n          case \"find\":\r\n            return _nul();\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          return _str(filtered.map(v => val2str(v)).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          return toDict(flat(filtered.map(v => <Val[]>v.v)));\r\n        } else {\r\n          return _vec(filtered);\r\n        }\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        throwTypeErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n          errCtx,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          return args[0];\r\n        } else {\r\n          return _vec();\r\n        }\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        return array[0];\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      if (op === \"reductions\") {\r\n        const reductions: Val[] = [];\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          reductions.push(reduction);\r\n          reduction = closure([reduction, array[i]]);\r\n        }\r\n        reductions.push(reduction);\r\n        return _vec(reductions);\r\n      }\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        reduction = closure([reduction, array[i]]);\r\n      }\r\n      return reduction;\r\n    }\r\n    case \"xmap\": {\r\n      const closure = getExe(ctx, args[0], errCtx);\r\n      const src = asArray(args[1]);\r\n      const mapped: Val[] = [];\r\n      for (let i = 0, lim = len(src); i < lim; ++i) {\r\n        mapped.push(closure([_num(i), src[i]]));\r\n      }\r\n      return _vec(mapped);\r\n    }\r\n    case \"repeat\":\r\n    case \"times\": {\r\n      const toRepeat = args[op === \"repeat\" ? 0 : 1];\r\n      const result: Val[] = [];\r\n      const count = num(args[op === \"repeat\" ? 1 : 0]);\r\n      if (count > ctx.rangeBudget) {\r\n        _throw([{ e: \"Budget\", m: \"would exceed range budget\", errCtx }]);\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(closure([_num(i)]));\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      return _vec(result);\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\": {\r\n      const nArgs = len(args);\r\n      const [a, b] = [\r\n        nArgs < 2 ? 0 : num(args[0]),\r\n        nArgs === 0\r\n          ? 1 + toNum(op === \"rand-int\")\r\n          : nArgs === 1\r\n          ? num(args[0])\r\n          : num(args[1]),\r\n      ];\r\n      return _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n    }\r\n    case \"do\":\r\n    case \"val\":\r\n      return op === \"do\" ? args.pop()! : args.shift()!;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        return _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          return toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v));\r\n        } else {\r\n          const { keys: ks1, vals: vs1 } = dic(args[0]);\r\n          const { keys: ks2, vals: vs2 } = dic(args[1]);\r\n          return _dic({ keys: concat(ks1, ks2), vals: concat(vs1, vs2) });\r\n        }\r\n      }\r\n    }\r\n    case \"omit\":\r\n      return dictDrop(dic(args[1]), args[0]);\r\n    case \"drop\": {\r\n      const [n, v] = [num(args[0]), vec(args[1])];\r\n      return _vec(concat(slice(v, 0, n), slice(v, n + 1)));\r\n    }\r\n    case \"assoc\":\r\n      return _dic(dictSet(dic(args[2]), args[0], args[1]));\r\n    case \"append\":\r\n      return _vec(concat(vec(args[1]), [args[0]]));\r\n    case \"prepend\":\r\n      return _vec(concat([args[0]], vec(args[1])));\r\n    case \"insert\": {\r\n      const v = vec(args[2]);\r\n      let n = num(args[1]);\r\n      if (n === 0) {\r\n        return _vec(concat([args[0]], v));\r\n      } else if (n === -1) {\r\n        return _vec(concat(v, [args[0]]));\r\n      } else {\r\n        n = n > 0 ? min(n, len(v)) : max(len(v) + 1 + n, 0);\r\n        return _vec(concat(concat(slice(v, 0, n), [args[0]]), slice(v, n)));\r\n      }\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        return (v.t === \"vec\" ? _vec : _str)();\r\n      }\r\n      if (v.t === \"vec\") {\r\n        return _vec(slice(v.v, a, b));\r\n      } else {\r\n        return _str(substr(str(args[0]), a, b - a));\r\n      }\r\n    }\r\n    case \"skip\":\r\n    case \"first\":\r\n    case \"last\":\r\n    case \"crop\": {\r\n      const a = max(0, num(args[0]));\r\n      const { t, v } = args[op === \"crop\" ? 2 : 1];\r\n      const l = t === \"str\" ? slen(<string>v) : len(<Val[]>v);\r\n      let x = op === \"first\" ? 0 : op === \"last\" ? l - a : a;\r\n      const y =\r\n        op === \"first\" ? a : op === \"crop\" ? l - max(0, num(args[1])) : l;\r\n      x = x > y ? y : x;\r\n      return t === \"str\"\r\n        ? _str(substr(<string>v, x, y - x))\r\n        : _vec(slice(<Val[]>v, x, y));\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        return _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        return _vec(reverse(asArray(args[0])));\r\n      }\r\n    case \"flatten\": {\r\n      const src = vec(args[0]);\r\n      const flattened: Val[] = [];\r\n      const recur = (vec: Val[]): void =>\r\n        vec.forEach(v => (v.t === \"vec\" ? recur(v.v) : flattened.push(v)));\r\n      recur(src);\r\n      return _vec(flattened);\r\n    }\r\n    case \"shuffle\": {\r\n      const arr = slice(vec(args[0]));\r\n      for (let i = len(arr) - 1; i; --i) {\r\n        const j = floor(randInt(0, i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n      }\r\n      return _vec(arr);\r\n    }\r\n    case \"sample\": {\r\n      const shuffled = slice(vec(args[1]));\r\n      const size = max(0, min(len(shuffled), num(args[0])));\r\n      const minimum = len(shuffled) - size;\r\n      for (let i = len(shuffled) - 1; i > minimum; --i) {\r\n        const index = floor(randInt(0, i + 1));\r\n        [shuffled[i], shuffled[index]] = [shuffled[index], shuffled[i]];\r\n      }\r\n      return _vec(slice(shuffled, minimum));\r\n    }\r\n    case \"sort\":\r\n    case \"sort-by\": {\r\n      const src = asArray(args[op === \"sort\" ? 0 : 1]);\r\n      if (!len(src)) {\r\n        return _vec();\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (op === \"sort\") {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args[0], errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          mapped.push([src[i], closure([src[i]])]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        throwTypeErr(\"can only sort by all number or all string\", errCtx);\r\n      }\r\n      if (okT === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      return _vec(mapped.map(([v]) => v));\r\n    }\r\n    case \"group-by\": {\r\n      const closure = getExe(ctx, args[0], errCtx);\r\n      const groups: Dict = { keys: [], vals: [] };\r\n      const isDic = args[1].t === \"dict\";\r\n      if (isDic) {\r\n        const { keys, vals } = dic(args[1]);\r\n        for (let i = 0, lim = len(keys); i < lim; ++i) {\r\n          const v = closure([keys[i], vals[i]]);\r\n          const existingKey = groups.keys.findIndex(k => isEqual(k, v));\r\n          if (existingKey === -1) {\r\n            groups.keys.push(v);\r\n            groups.vals.push(_dic({ keys: [keys[i]], vals: [vals[i]] }));\r\n          } else {\r\n            const subDict = dic(groups.vals[existingKey]);\r\n            subDict.keys.push(keys[i]);\r\n            subDict.vals.push(vals[i]);\r\n          }\r\n        }\r\n      } else {\r\n        const src = asArray(args[1]);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const v = closure([src[i]]);\r\n          const existingKey = groups.keys.findIndex(k => isEqual(k, v));\r\n          if (existingKey === -1) {\r\n            groups.keys.push(v);\r\n            groups.vals.push(_vec([src[i]]));\r\n          } else {\r\n            const subVec = vec(groups.vals[existingKey]);\r\n            subVec.push(src[i]);\r\n          }\r\n        }\r\n      }\r\n      return _dic(groups);\r\n    }\r\n    case \"part-by\": {\r\n      const closure = getExe(ctx, args[0], errCtx);\r\n      const isDic = args[1].t === \"dict\";\r\n      if (isDic) {\r\n        const { keys, vals } = dic(args[1]);\r\n        const parted: Dict[] = [\r\n          { keys: [], vals: [] },\r\n          { keys: [], vals: [] },\r\n        ];\r\n        for (let i = 0, lim = len(keys); i < lim; ++i) {\r\n          const p = asBoo(closure([keys[i], vals[i]])) ? 0 : 1;\r\n          parted[p].keys.push(keys[i]);\r\n          parted[p].vals.push(vals[i]);\r\n        }\r\n        return _vec(parted.map(_dic));\r\n      } else {\r\n        const src = asArray(args[1]);\r\n        const parted: Val[][] = [[], []];\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          parted[asBoo(closure([src[i]])) ? 0 : 1].push(src[i]);\r\n        }\r\n        return _vec(parted.map(_vec));\r\n      }\r\n    }\r\n    case \"partition\": {\r\n      const n = num(args[0]);\r\n      const src = args[1];\r\n      const parted: Val[] = [];\r\n      if (src.t === \"str\") {\r\n        for (let i = 0, lim = slen(src.v); i < lim; i += n) {\r\n          parted.push(_str(substr(src.v, i, n)));\r\n        }\r\n      } else if (src.t === \"vec\") {\r\n        for (let i = 0, lim = len(src.v); i < lim; i += n) {\r\n          parted.push(_vec(slice(src.v, i, i + n)));\r\n        }\r\n      }\r\n      return _vec(parted);\r\n    }\r\n    case \"freqs\": {\r\n      const src = asArray(args[0]);\r\n      const distinct: Val[] = [];\r\n      const counts: number[] = [];\r\n      src.forEach(x => {\r\n        const i = distinct.findIndex(y => isEqual(x, y));\r\n        if (i !== -1) {\r\n          ++counts[i];\r\n        } else {\r\n          distinct.push(x);\r\n          counts.push(1);\r\n        }\r\n      });\r\n      return _dic({ keys: distinct, vals: counts.map(_num) });\r\n    }\r\n    case \"distinct\": {\r\n      const arr = len(args) === 1 && args[0].t === \"vec\" ? vec(args[0]) : args;\r\n      const distinct: Val[] = [];\r\n      arr.forEach(a => {\r\n        if (!distinct.some(v => isEqual(a, v))) {\r\n          distinct.push(a);\r\n        }\r\n      });\r\n      return _vec(distinct);\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        return _vec();\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        _throw([{ e: \"Budget\", m: \"would exceed range budget\", errCtx }]);\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      return _vec(nums.map(_num));\r\n    }\r\n    case \"empty?\":\r\n      return _boo(!len(asArray(args[0])));\r\n    case \"keys\":\r\n    case \"vals\":\r\n      return _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n    case \"split\":\r\n      return _vec(str(args[1]).split(str(args[0])).map(_str));\r\n    case \"join\":\r\n      return _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n    case \"replace\":\r\n    case \"rreplace\": {\r\n      const rop = op === \"replace\" ? replace : rreplace;\r\n      return _str(rop(str(args[2]), str(args[0]), str(args[1])));\r\n    }\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      return _boo(\r\n        (op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])),\r\n      );\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      return _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      return _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          return _nul();\r\n        } else {\r\n          return _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        return _str(codeChar(num(args[0])));\r\n      }\r\n    }\r\n    case \"time\":\r\n      return _num(getTimeMs());\r\n    case \"version\":\r\n      return _num(insituxVersion);\r\n    case \"tests\":\r\n      return _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n    case \"symbols\": {\r\n      let syms = symbols(ctx.env, false);\r\n      if (len(args) && asBoo(args[0])) {\r\n        syms = syms.filter(s => !ops[s]?.hasEffects ?? false);\r\n      }\r\n      return _vec(syms.map(_str));\r\n    }\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const invokeId = `${errCtx.invokeId} eval`;\r\n      try {\r\n        const valOrNone = parseAndExe(ctx, str(args[0]), invokeId, []);\r\n        return valOrNone ? valOrNone : _nul();\r\n      } catch (e) {\r\n        if (isThrown(e)) {\r\n          _throw([\r\n            { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n            ...e.errors,\r\n          ]);\r\n        }\r\n      }\r\n    }\r\n    case \"about\": {\r\n      const func = str(args[0]);\r\n      const entry = ops[func];\r\n      if (!entry) {\r\n        return _nul();\r\n      }\r\n      const infos: Val[] = [];\r\n      const info = (what: string, val: Val) =>\r\n        infos.push(_key(`:${what}`), val);\r\n      const toStrVec = (v: (string | string[])[]): Val =>\r\n        _vec(v.map(typ => (isArray(typ) ? _vec(typ.map(_str)) : _str(typ))));\r\n      info(\"external?\", _boo(!!entry.external));\r\n      if (entry.exactArity) {\r\n        info(\"exact-arity\", _num(entry.exactArity));\r\n      } else {\r\n        if (entry.minArity) {\r\n          info(\"minimum-arity\", _num(entry.minArity));\r\n        }\r\n        if (entry.maxArity) {\r\n          info(\"maximum-arity\", _num(entry.maxArity));\r\n        }\r\n      }\r\n      if (entry.params || entry.numeric) {\r\n        info(\"in-types\", toStrVec(entry.params ? entry.params : [\"num\"]));\r\n      }\r\n      if (entry.returns || entry.numeric === true) {\r\n        info(\"out-types\", toStrVec(entry.returns ? entry.returns : [\"num\"]));\r\n      }\r\n      return toDict(infos);\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return _nul();\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      letsStack = [];\r\n      return _nul();\r\n  }\r\n\r\n  return _throw([{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }]);\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as operation requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\n\r\nfunction checks(op: string, args: Val[], errCtx: ErrCtx, checkArity: boolean) {\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  const types = args.map(a => [a.t]);\r\n  const violations = typeCheck(op, types, errCtx);\r\n  return violations ? violations : false;\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => Val {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const violations = checks(name, params, errCtx, checkArity);\r\n          if (violations) {\r\n            _throw(violations);\r\n          }\r\n          const valOrErr = ctx.functions[name].handler(params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return _throw([{ e: \"External\", m: valOrErr.err, errCtx }]);\r\n          }\r\n          return valOrErr.value;\r\n        };\r\n      }\r\n      return (params: Val[]) => {\r\n        const violations = checks(name, params, errCtx, true);\r\n        if (violations) {\r\n          _throw(violations);\r\n        }\r\n        return exeOp(name, params, ctx, errCtx);\r\n      };\r\n    }\r\n    if (name in ctx.env.funcs && name !== \"entry\") {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets) {\r\n      return getExe(ctx, lets[name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          _throw(monoArityError(op.t, errCtx));\r\n        }\r\n        if (!ctx.set) {\r\n          const m = `\"set\" feature not implemented on this platform`;\r\n          return _throw([{ e: \"External\", m, errCtx }]);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        if (err) {\r\n          _throw([{ e: \"External\", m: err, errCtx }]);\r\n        }\r\n        return params[0];\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      if (!ctx.exe) {\r\n        const m = `operation \"${name}\" does not exist\"`;\r\n        return _throw([{ e: \"External\", m, errCtx }]);\r\n      }\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        return valAndErr.value;\r\n      }\r\n      return _throw([{ e: \"External\", m: valAndErr.err, errCtx }]);\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        _throw(monoArityError(op.t, errCtx));\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        return dictGet(dic(params[0]), op);\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        return found ?? _nul();\r\n      } else {\r\n        return _throw(keyOpErr(errCtx, [params[0].t]));\r\n      }\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        _throw(monoArityError(op.t, errCtx));\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return _throw(numOpErr(errCtx, [a.t]));\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        return _nul();\r\n      } else if (n < 0) {\r\n        return arr[alen + n];\r\n      }\r\n      return arr[n];\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        _throw(monoArityError(op.t, errCtx));\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      return found ?? _nul();\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        return dictGet(dict, params[0]);\r\n      } else if (len(params) === 2) {\r\n        return _dic(dictSet(dict, params[0], params[1]));\r\n      }\r\n      return _throw([\r\n        { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n      ]);\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return _throw([\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ]);\r\n      }\r\n      return cond ? params[0] : len(params) > 1 ? params[1] : _nul();\r\n    };\r\n  }\r\n  return _ =>\r\n    _throw([\r\n      { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n    ]);\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) => dictSet(d, _key(k), v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", _str(e));\r\n    dict = newKey(dict, \":m\", _str(m));\r\n    dict = newKey(dict, \":line\", _num(errCtx.line));\r\n    dict = newKey(dict, \":col\", _num(errCtx.col));\r\n    return _dic(dict);\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return _str(strIdx(val.v, shape[a + 1]));\r\n    } else {\r\n      return _nul();\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? _nul() : arr[pos];\r\n}\r\n\r\nfunction exeFunc(ctx: Ctx, func: Func, args: Val[], closureDeref = false): Val {\r\n  --ctx.callBudget;\r\n  if (!closureDeref) {\r\n    letsStack.push({});\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  const stack: Val[] = [];\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      _throw([\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ]);\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          stack.push(_vec(args));\r\n        } else if (len(args) <= paramIdx) {\r\n          stack.push(_nul());\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          stack.push(_fun(name));\r\n        } else if (starts(name, \"$\")) {\r\n          if (!ctx.get) {\r\n            const m = `\"get\" feature not implemented on this platform`;\r\n            return _throw([{ e: \"External\", m, errCtx }]);\r\n          }\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return _throw([{ e: \"External\", m: valAndErr.err, errCtx }]);\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets) {\r\n          stack.push(lets[name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          stack.push(_fun(name));\r\n        } else {\r\n          _throw([{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }]);\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const op = stack.pop()!;\r\n        const closure = getExe(ctx, op, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        try {\r\n          stack.push(closure(params));\r\n        } catch (e) {\r\n          if (isThrown(e)) {\r\n            //Find next catch statement\r\n            const nextCat = slice(func.ins, i).findIndex(\r\n              ins => ins.typ === \"cat\",\r\n            );\r\n            if (nextCat !== -1) {\r\n              i += nextCat;\r\n              lets[\"errors\"] = _vec(errorsToDict(e.errors));\r\n              break;\r\n            }\r\n          }\r\n          throw e;\r\n        }\r\n        if (recurArgs) {\r\n          letsStack[len(letsStack) - 1] = {};\r\n          i = -1;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            _throw([{ e: \"Budget\", m: `recurred too many times`, errCtx }]);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const cond = stack[len(stack) - 2];\r\n        if (!isEqual(cond, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"sat\": {\r\n        const cond = stack[len(stack) - 2];\r\n        const closure = getExe(ctx, stack.pop()!, errCtx);\r\n        if (!asBoo(closure([cond]))) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        if (ins.value === 1) {\r\n          stack.pop();\r\n        } else {\r\n          splice(stack, len(stack) - ins.value, ins.value);\r\n        }\r\n        break;\r\n      case \"ret\":\r\n        if (!ins.value) {\r\n          stack.push(_nul());\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\": {\r\n        //Ensure any in-scope declarations are captured here\r\n        const derefIns = slice(ins.value.derefs).map(ins => {\r\n          const decl =\r\n            ins.typ === \"val\" &&\r\n            ins.value.t === \"str\" &&\r\n            (lets[ins.value.v] ?? ctx.env.vars[ins.value.v]);\r\n          return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\r\n        });\r\n        //Dereference closure captures\r\n        const captures = <Val[]>exeFunc(ctx, { ins: derefIns }, args, true).v;\r\n        //Enclose the closure with dereferenced values\r\n        const cins = slice(func.ins, i + 1, i + 1 + ins.value.length);\r\n        stack.push({ t: \"clo\", v: makeEnclosure(ins.value, cins, captures) });\r\n        i += ins.value.length;\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (closureDeref) {\r\n    return _vec(stack);\r\n  } else {\r\n    letsStack.pop();\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  return stack[len(stack) - 1];\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  params: Val[],\r\n): Val | undefined {\r\n  const parsed = parse(code, invokeId);\r\n  if (len(parsed.errors)) {\r\n    _throw(parsed.errors);\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], params);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunctions) {\r\n  Object.keys(functions).forEach(name => {\r\n    if (ops[name] && !ops[name].external) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...functions[name].definition, external: true };\r\n  });\r\n}\r\n\r\nexport function removeExternalOperations(functionNames: string[]) {\r\n  functionNames.forEach(name => {\r\n    if (ops[name] && !ops[name].external) {\r\n      throw \"Removing internal operations is disallowed.\";\r\n    }\r\n    delete ops[name];\r\n  });\r\n}\r\n\r\nfunction innerInvoke(\r\n  ctx: Ctx,\r\n  closure: () => Val | undefined,\r\n  printResult: boolean,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  let errors: InvokeError[] = [];\r\n  let value: Val | undefined;\r\n  try {\r\n    value = closure();\r\n  } catch (e) {\r\n    if (!isThrown(e)) {\r\n      throw e;\r\n    }\r\n    errors = e.errors;\r\n  }\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  letsStack = [];\r\n  if (len(errors)) {\r\n    return { kind: \"errors\", errors };\r\n  }\r\n  if (printResult && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return value ? { kind: \"val\", value } : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param invokeId A unique ID referenced in invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  printResult = false,\r\n  params: Val[] = [],\r\n): InvokeResult {\r\n  return innerInvoke(\r\n    ctx,\r\n    () => parseAndExe(ctx, code, invokeId, params),\r\n    printResult,\r\n  );\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n  printResult = false,\r\n): InvokeResult | undefined {\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return innerInvoke(\r\n    ctx,\r\n    () => exeFunc(ctx, ctx.env.funcs[funcName], params),\r\n    printResult,\r\n  );\r\n}\r\n\r\n/**\r\n * @param env An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(env: Env, alsoSyntax = true): string[] {\r\n  let syms: string[] = [];\r\n  if (alsoSyntax) {\r\n    push(syms, syntaxes);\r\n  }\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(env.funcs));\r\n  syms = concat(syms, objKeys(env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke, invokeFunction } from \".\";\r\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\r\nimport { getTimeMs } from \"./poly-fills\";\r\nimport { Ctx, InvokeResult, Val } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(\r\n  ctx: Ctx,\r\n  code: string,\r\n  id?: string,\r\n  printResult = true,\r\n): { output: InvokeOutput; result: InvokeResult } {\r\n  id = id ? `-${id}` : `${getTimeMs()}`;\r\n  invocations.set(id, code);\r\n  const result = invoke(ctx, code, id, printResult);\r\n  return { output: invokeResultToOutput(result), result };\r\n}\r\n\r\nexport function functionInvoker(\r\n  ctx: Ctx,\r\n  name: string,\r\n  params: Val[],\r\n  printResult = true,\r\n): { output: InvokeOutput; result?: InvokeResult } {\r\n  const result = invokeFunction(ctx, name, params, printResult);\r\n  if (!result) {\r\n    const message = <InvokeOutput[0]>{\r\n      type: \"message\",\r\n      text: `Invoke Error: function '${name}' not found.`,\r\n    };\r\n    return { output: [message] };\r\n  }\r\n  return { output: invokeResultToOutput(result), result };\r\n}\r\n\r\nfunction invokeResultToOutput(result: InvokeResult) {\r\n  if (result.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  const msg = (text: string) => out.push({ type: \"message\", text });\r\n  const err = (text: string) => out.push({ type: \"error\", text });\r\n  result.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\r\n    const invocation = invocations.get(invokeId);\r\n    if (!invocation) {\r\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    const path = starts(invokeId, \"-\") ? `In ${substr(invokeId, 1)}\\n` : \"\";\r\n    msg(`\\n${padEnd(`${line}`, 4)} ${half1}`);\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      err(lineText[col - 1]);\r\n      msg(`${half2}\\n`);\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      err(sym);\r\n      msg(`${half2}\\n`);\r\n    }\r\n    msg(`${e} Error: ${m}.\\n${path}`);\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","prefix","startsWith","ends","endsWith","replace","what","to","split","join","rreplace","RegExp","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sinh","cosh","tanh","asin","acos","atan","sqrt","round","ceil","sign","logn","log","log2","log10","print","returns","hasEffects","exactArity","minArity","numeric","maxArity","neg","inc","dec","and","or","xor","rem","vec","dict","params","juxt","map","xmap","for","reduce","reductions","filter","remove","find","count","repeat","times","strn","rand","into","assoc","omit","drop","insert","append","prepend","sect","skip","first","last","crop","flatten","shuffle","sample","distinct","partition","freqs","vals","do","val","time","version","tests","symbols","eval","about","reset","recur","syntaxes","typeNames","null","bool","ref","func","clo","wild","ext","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","makeEnclosure","name","captures","derefs","cins","derefed","ins","errCtxs","typ","shift","canCapture","exclusions","ins0","ins1","text","nullVal","falseVal","isToken","node","symAt","pos","arg","node2str","nodes","sym0","isClosure","n","token2str","poppedBody","expressions","lastExp","truncatedExps","popIns","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","head","unshift","err","eCtx","parsed","cond","branch1","branch2","body","bodyIns","opIns","otherwise","pop","elseLen","insCount","acc","when","flatBody","ifJmp","looJmp","symNode","defs","symErrMsg","d","lim","def","defIns","shape","errors","parseParams","pins","cloParams","outerParams","p","monoFnBody","parsedParams","firstSym","cin","capture","newSubDerefs","newSubCaptures","j","ccin","makeClosure","paramNames","param","position","consumeLast","errs","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","badArg","parse","code","invokeId","tokens","stringError","doTransforms","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","token","tokenErrorDetect","funcs","okFuncs","collected","entries","forEach","collectFuncs","_treeise","treeise","namedNodes","nodeOrErr","fae","f","state","kind","set","exe","output","out","dic","_boo","_num","_str","_key","_vec","_dic","_fun","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","pathSet","path","replacer","coll","vecCopy","existing","recurArgs","letsStack","lets","_throw","isThrown","throwTypeErr","monoArityError","checks","checkArity","getExe","ctx","external","violations","valOrErr","functions","handler","sum","every","pathVal","replacement","closure","makeArg","badType","arrays","lims","divisors","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","arrayVal","array","reduction","src","mapped","toRepeat","result","rangeBudget","nArgs","flatArgs","ks1","vs1","ks2","vs2","dictDrop","vlen","del","take","flattened","shuffled","size","minimum","index","okT","groups","existingKey","subDict","parted","counts","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","syms","alsoSyntax","hidden","parseAndExe","entry","infos","info","toStrVec","exeOp","exeFunc","valAndErr","alen","newKey","destruct","closureDeref","tooManyLoops","paramIdx","nextCat","derefIns","decl","printResult","innerInvoke","invocations","parensRx","invoker","id","invokeResultToOutput","type","invocation","lineText","sym","half1","half2"],"sourceRoot":""}