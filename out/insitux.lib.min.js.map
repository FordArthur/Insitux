{"version":3,"file":"insitux.lib.min.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/closure.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number =>\r\n  x !== \"\" && !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, prefix: string): boolean =>\r\n  str.startsWith(prefix);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const replace = (str: string, what: string, to: string): string =>\r\n  str.split(what).join(to);\r\nexport const rreplace = (str: string, what: string, to: string) =>\r\n  str.replace(new RegExp(what, \"g\"), to);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sinh = Math.sinh;\r\nexport const cosh = Math.cosh;\r\nexport const tanh = Math.tanh;\r\nexport const asin = Math.asin;\r\nexport const acos = Math.acos;\r\nexport const atan = Math.atan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict }\r\n  | { t: \"ext\"; v: unknown };\r\n\r\nexport type ErrCtx = { invokeId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name?: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set?: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get?: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunctions;\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe?: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow,\r\n   * rather this effectively limits the time an Insitux program may hang for. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport const defaultCtx = {\r\n  env: { funcs: {}, vars: {} },\r\n  loopBudget: 1e7,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\nexport type Closure = {\r\n  readonly name: string;\r\n  readonly length: number;\r\n  captures: boolean[];\r\n  derefs: Ins[];\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"npa\" | \"upa\"; value: number; text: string } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\"; value: Closure } //Closure/partial\r\n  | { typ: \"val\"; value: Val }\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (\"any\" | Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\nexport type ExternalFunctions = { [name: string]: ExternalFunction };\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"!=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 2, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  neg: { exactArity: 1, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"type-of\": { exactArity: 1, returns: [\"str\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  asin: { exactArity: 1, numeric: true },\r\n  acos: { exactArity: 1, numeric: true },\r\n  atan: { exactArity: 1, numeric: true },\r\n  sinh: { exactArity: 1, numeric: true },\r\n  cosh: { exactArity: 1, numeric: true },\r\n  tanh: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"to-vec\": { exactArity: 1, params: [[\"str\", \"dict\"]], returns: [\"vec\"] },\r\n  \"substr?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"str\", \"vec\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  \"set-at\": {\r\n    exactArity: 3,\r\n    params: [\"vec\", \"any\", [\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  reductions: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [\"any\", [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [\"any\", \"num\"] },\r\n  times: { minArity: 2, params: [\"num\", \"any\"] },\r\n  str: { returns: [\"str\"] },\r\n  strn: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  assoc: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  omit: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  insert: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  append: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  prepend: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  skip: {\r\n    exactArity: 2,\r\n    params: [\"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  first: {\r\n    exactArity: 2,\r\n    params: [\"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  last: {\r\n    exactArity: 2,\r\n    params: [\"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  crop: {\r\n    exactArity: 3,\r\n    params: [\"num\", \"num\", [\"vec\", \"str\"]],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  flatten: {\r\n    exactArity: 1,\r\n    params: [\"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  shuffle: {\r\n    exactArity: 1,\r\n    params: [\"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sample: {\r\n    exactArity: 2,\r\n    params: [\"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sort: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  \"sort-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  distinct: {\r\n    returns: [\"vec\"],\r\n  },\r\n  \"group-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"dict\"],\r\n  },\r\n  \"part-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  freqs: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"dict\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { exactArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  replace: {\r\n    exactArity: 3,\r\n    params: [\"str\", \"str\", \"str\"],\r\n    returns: [\"str\"],\r\n  },\r\n  rreplace: {\r\n    exactArity: 3,\r\n    params: [\"str\", \"str\", \"str\"],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  about: { exactArity: 1, params: [[\"str\", \"func\"]], returns: [\"dict\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const syntaxes = [\r\n  \"function\",\r\n  \"fn\",\r\n  \"var\",\r\n  \"let\",\r\n  \"var!\",\r\n  \"let!\",\r\n  \"return\",\r\n  \"if\",\r\n  \"if!\",\r\n  \"when\",\r\n  \"unless\",\r\n  \"while\",\r\n  \"loop\",\r\n  \"match\",\r\n  \"catch\",\r\n];\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n  ext: \"external\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i] || need === \"any\") {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0])\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { has, len, push, slice } from \"./poly-fills\";\r\nimport { Closure, Func, Ins, Val } from \"./types\";\r\n\r\n/** Declare a closure from instructions and other info, calculating its\r\n * captures ahead-of-time. */\r\nexport function makeClosure(\r\n  name: string,\r\n  outerParams: string[],\r\n  cloParams: string[],\r\n  cins: Ins[],\r\n): Closure {\r\n  const captures: boolean[] = [];\r\n  const derefs: Ins[] = [];\r\n  const exclusions: string[] = cloParams;\r\n  for (let i = 0, lim = len(cins); i < lim; ++i) {\r\n    const cin = cins[i];\r\n    let capture = false;\r\n    if (cin.typ === \"clo\") {\r\n      //Inherit direct sub-closures' outer-parameter captures\r\n      captures.push(false);\r\n      const newSubDerefs: Ins[] = [];\r\n      const newSubCaptures: boolean[] = [];\r\n      for (let j = 0, d = 0; j < cin.value.length; ++j) {\r\n        const ccin = cins[i + 1 + j];\r\n        const capture = ccin.typ === \"npa\" && has(outerParams, ccin.text);\r\n        captures.push(capture);\r\n        newSubCaptures.push(!capture && cin.value.captures[j]);\r\n        if (capture) {\r\n          derefs.push(cin.value.derefs[d++]);\r\n        } else {\r\n          if (cin.value.captures[j]) {\r\n            newSubDerefs.push(cin.value.derefs[d++]);\r\n          }\r\n        }\r\n      }\r\n      cin.value.derefs = newSubDerefs;\r\n      cin.value.captures = newSubCaptures;\r\n      i += cin.value.length;\r\n      continue;\r\n    } else if (cin.typ === \"let\" || cin.typ === \"var\") {\r\n      exclusions.push(cin.value);\r\n    } else if (canCapture(exclusions, cin, i + 1 !== lim && cins[i + 1])) {\r\n      derefs.push(cin);\r\n      capture = true;\r\n    }\r\n    captures.push(capture);\r\n  }\r\n  return { name, length: len(cins), captures, derefs };\r\n}\r\n\r\n/** Create a function representing a parent closure, and its sub-closures with\r\n * all values needing captured at this point having been replaced. */\r\nexport function makeEnclosure(\r\n  { name, length, captures, derefs }: Closure,\r\n  cins: Ins[],\r\n  derefed: Val[],\r\n): Func {\r\n  if (!len(derefed)) {\r\n    return { name, ins: cins };\r\n  }\r\n  const ins: Ins[] = [];\r\n  const errCtxs = derefs.map(i => i.errCtx);\r\n  for (let i = 0; i < length; ++i) {\r\n    if (captures[i]) {\r\n      ins.push({\r\n        typ: \"val\",\r\n        value: derefed.shift()!,\r\n        errCtx: errCtxs.shift()!,\r\n      });\r\n    } else {\r\n      ins.push(cins[i]);\r\n    }\r\n  }\r\n  return { name, ins };\r\n}\r\n\r\n/** Tests whether an Instruction in a particular context can be captured.\r\n * Doesn't attempt to rewrite str Vals because they are mapped and captured\r\n * (or not) within the let/var Ctx in the machine. */\r\nfunction canCapture(exclusions: string[], ins0: Ins, ins1: false | Ins) {\r\n  const isExeVal =\r\n    ins1 && ins0.typ === \"val\" && ins0.value.t === \"str\" && ins1.typ === \"exe\";\r\n  return (\r\n    isExeVal ||\r\n    (ins0.typ === \"npa\" && !has(exclusions, ins0.text)) ||\r\n    (ins0.typ === \"ref\" && !has(exclusions, ins0.value))\r\n  );\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport { makeClosure } from \"./closure\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, Func, Funcs, Ins, ops, Val, syntaxes } from \"./types\";\r\nimport { assertUnreachable, InvokeError, ErrCtx } from \"./types\";\r\n\r\nexport type Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst token2str = ({ typ, text }: Token): string =>\r\n  typ === \"str\" ? `\"${text}\"` : text;\r\nfunction node2str(nodes: Node[]): string {\r\n  const sym0 = symAt(nodes, 0);\r\n  const isClosure = has([\"#\", \"@\"], sym0);\r\n  if (isClosure) {\r\n    nodes = slice(nodes, 1);\r\n  }\r\n  return `${isClosure ? sym0 : \"\"}(${nodes\r\n    .map(n => (isToken(n) ? token2str(n) : node2str(n)))\r\n    .join(\" \")})`;\r\n}\r\n\r\n/** Inserts pop instruction after penultimate body expression */\r\nconst poppedBody = (expressions: ParserIns[][]): ParserIns[] => {\r\n  if (len(expressions) === 1) {\r\n    return flat(expressions);\r\n  }\r\n  const lastExp = expressions[len(expressions) - 1];\r\n  const truncatedExps = slice(expressions, 0, len(expressions) - 1);\r\n  const popIns = <ParserIns>{\r\n    typ: \"pop\",\r\n    value: len(truncatedExps),\r\n    errCtx: lastExp[0].errCtx,\r\n  };\r\n  return flat([...truncatedExps, [popIns], lastExp]);\r\n};\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invokeId: string,\r\n  doTransforms = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text += doTransforms\r\n        ? { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n          (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`)\r\n        : `\\\\${nextCh}`;\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invokeId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inSymbol = false;\r\n      inNumber &&= c === \",\";\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: doTransforms ? text : c, errCtx });\r\n        if (doTransforms && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\r\n      }\r\n      funcs.push({ name, nodes: slice(node, 2) });\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    //1-off arity deficiency rewritten as closure\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\r\n      nodes.unshift(firstNode);\r\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\r\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    if (has([\"if\", \"if!\", \"when\", \"unless\", \"match\"], op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(`provide one or two branches, not ${len(nodes)}`);\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, branch1] = parsed;\r\n      let branch2 = parsed[2];\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\" || op === \"unless\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\r\n      const bodyIns = poppedBody(body);\r\n      return [\r\n        ...cond,\r\n        ...(op === \"unless\"\r\n          ? [\r\n              <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" } },\r\n              <Ins>{ typ: \"exe\", value: 1 },\r\n            ]\r\n          : []),\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\") {\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const when = nodeParser(nodes.pop()!);\r\n      const body = flat(nodes.map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        const [head, body] = [args[0], slice(args, 1)];\r\n        const flatBody = poppedBody(body);\r\n        const ifJmp = len(flatBody) + 2;\r\n        const looJmp = -(len(head) + len(flatBody) + 3);\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: ifJmp, errCtx });\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        push(ins, flatBody);\r\n        ins.push({ typ: \"loo\", value: looJmp, errCtx });\r\n        return ins;\r\n      }\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"loop\") {\r\n      if (len(nodes) < 3) {\r\n        return err(\"provide at least 3 arguments\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const symNode = nodes[1];\r\n      const body = poppedBody(slice(parsed, 2));\r\n      if (!isToken(symNode)) {\r\n        return err(\"argument 2 must be symbol\");\r\n      }\r\n      //(let sym 0 sym-limit n) ... body ... (if (< (let sym (inc sym)) sym-limit) <exit> <loo>)\r\n      const ins: ParserIns[] = [\r\n        { typ: \"val\", value: { t: \"num\", v: 0 }, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        ...parsed[0],\r\n        { typ: \"let\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        ...body,\r\n        { typ: \"ref\", value: symNode.text, errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"inc\" }, errCtx },\r\n        { typ: \"exe\", value: 1, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        { typ: \"ref\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"<\" }, errCtx },\r\n        { typ: \"exe\", value: 2, errCtx },\r\n        { typ: \"if\", value: 2, errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        { typ: \"loo\", value: -(len(body) + 10), errCtx },\r\n      ];\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => !!(i % 2));\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      const symErrMsg = `${op} name must be a new symbol or destructuring`;\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(symErrMsg, defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          if (!len(shape)) {\r\n            return err(symErrMsg);\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const pins: ParserIns[] = [];\r\n      const name = node2str([firstNode, ...nodes]);\r\n      const cloParams: string[] = [];\r\n      const outerParams = slice(params).map(p => p.name);\r\n      let monoFnBody = false;\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        push(\r\n          cloParams,\r\n          parsedParams.shape.map(p => p.name),\r\n        );\r\n        push(params, parsedParams.shape);\r\n        push(pins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        monoFnBody = len(nodes) === 1;\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        const firstSym = symAt(nodes, 0);\r\n        if (has(syntaxes, firstSym)) {\r\n          const { errCtx } = nodes[0] as Token;\r\n          return err(\r\n            `\"${firstSym}\" syntax unavailable in partial closure`,\r\n            errCtx,\r\n          );\r\n        }\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(pins, parseForm(nodes, params, op !== \"@\"));\r\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\r\n      const errors = pins.filter(i => i.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      //Remove do exe when fn body is only one expression\r\n      if (monoFnBody) {\r\n        cins.pop();\r\n        cins.pop();\r\n      }\r\n      const value = makeClosure(name, outerParams, cloParams, cins);\r\n      return [{ typ: \"clo\", value, errCtx }, ...cins];\r\n    } else if (op === \"->\") {\r\n      const newNodes = nodes.reduce((acc, node) => [node, acc]) as Node[];\r\n      const parsed = parseForm(newNodes, params);\r\n      return parsed;\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (len(head) === 1 && head[0].typ === \"ref\") {\r\n    //Transform potential external function into string\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 || has([\"npa\", \"upa\"], head[0].typ) ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (\r\n        text === \"%\" ||\r\n        (starts(text, \"%\") && isNum(substr(text, 1)))\r\n      ) {\r\n        const value = text === \"%\" ? 0 : toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, text, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], text, errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, text: \"args\", errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\": {\r\n        const errors = insErrorDetect(slice(fins, i + 1, i + ins.value.length));\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        stack.push({});\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invokeId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invokeId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(slice(tokens));\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, round, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `;This is a test comment\r\n           (print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(neg 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"when and unless\",\r\n    code: `[(when 123 (print \"hi\") 234) (unless true (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false true false false true]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"For XY list\",\r\n    code: `(for vec [0 1] [0 1])`,\r\n    out: `[[0 0] [1 0] [0 1] [1 1]]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Loop\",\r\n    code: `(loop 3 i (print-str i))`,\r\n    out: `012null`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (let a :a) (+ 1 a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Closure with ext func\",\r\n    code: `(#(test.function %) 1)`,\r\n    out: `1\\nnull`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 3\",\r\n    code: `(reduce\r\n             (fn primes num\r\n               (if (find zero? (map (rem num) primes))\r\n                 primes\r\n                 (append num primes)))\r\n             [2]\r\n             (range 3 10))`,\r\n    out: `[2 3 5 7]`,\r\n  },\r\n  {\r\n    name: \"Closure with inter-lets\",\r\n    code: `(let a + c 5 d 10)\r\n           (let closure (fn b (let d 1) (a b c d)))\r\n           (let a - c 4 d 11)\r\n           (closure 1)`,\r\n    out: `7`,\r\n  },\r\n  {\r\n    name: \"Closure with inner-let\",\r\n    code: `(((fn x (let y 1) #[x y]) 2))`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Closure with captured f\",\r\n    code: `[((fn x (@(val x))) 0) (var f val) ((fn y (@(f y))) 0)]`,\r\n    out: `[0 val 0]`,\r\n  },\r\n  {\r\n    name: \"Closure w/ inter-params\",\r\n    code: `(function f x (fn y (fn z [x y z]))) (((f :a) :b) :c)`,\r\n    out: `[:a :b :c]`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Implicit currying\", code: \"(-> 1 inc (+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(% %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invokeId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print: (str, withNewLine) => {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: {},\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${round(elapsedMs)}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${round(totalMs)}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const _boo = (v: boolean) => <Val>{ t: \"bool\", v };\r\nexport const _num = (v: number) => <Val>{ t: \"num\", v };\r\nexport const _str = (v = \"\") => <Val>{ t: \"str\", v };\r\nexport const _key = (v: string) => <Val>{ t: \"key\", v };\r\nexport const _vec = (v: Val[] = []) => <Val>{ t: \"vec\", v };\r\nexport const _dic = (v: Dict) => <Val>{ t: \"dict\", v };\r\nexport const _nul = () => <Val>{ t: \"null\", v: undefined };\r\nexport const _fun = (v: string) => <Val>{ t: \"func\", v };\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n    case \"ext\":\r\n      return a.v === b.v;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst quoteStr = (str: string) =>\r\n  str\r\n    .split(\"\")\r\n    .map(ch => (ch === '\"' ? '\\\\\"' : ch))\r\n    .join(\"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) =>\r\n    v.t === \"str\" ? `\"${quoteStr(v.v)}\"` : val2str(v);\r\n  if (val.t === \"clo\") {\r\n    return val.v.name ?? \"\";\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\n/** Replaces or sets index or key/value with another value in a string or\r\n * dictionary */\r\nexport function pathSet(path: Val[], replacement: Val, coll: Val): Val {\r\n  //If we're at the end of the path or it's a non-number index for non-dict\r\n  if (\r\n    !len(path) ||\r\n    (coll.t !== \"vec\" && coll.t !== \"dict\") ||\r\n    (coll.t === \"vec\" &&\r\n      (path[0].t !== \"num\" || path[0].v < 0 || path[0].v > len(coll.v)))\r\n  ) {\r\n    return coll;\r\n  }\r\n  if (coll.t === \"vec\") {\r\n    const vecCopy = slice(coll.v);\r\n    const idx = num(path[0]);\r\n    if (len(path) === 1) {\r\n      vecCopy[idx] = replacement;\r\n      return { t: \"vec\", v: vecCopy };\r\n    }\r\n    vecCopy[idx] = pathSet(slice(path, 1), replacement, vecCopy[idx]);\r\n    return { t: \"vec\", v: vecCopy };\r\n  }\r\n  if (len(path) === 1) {\r\n    return { t: \"dict\", v: dictSet(coll.v, path[0], replacement) };\r\n  }\r\n  return {\r\n    t: \"dict\",\r\n    v: dictSet(\r\n      coll.v,\r\n      path[0],\r\n      pathSet(slice(path, 1), replacement, dictGet(coll.v, path[0])),\r\n    ),\r\n  };\r\n}\r\n","export const insituxVersion = 220407;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { makeEnclosure } from \"./closure\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, sign, sqrt, floor, ceil, round, max, min, logn, log2, log10 } = pf;\r\nconst { cos, sin, tan, acos, asin, atan, sinh, cosh, tanh } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, strIdx, replace, rreplace } = pf;\r\nconst { charCode, codeChar, getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum, isArray } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, Env, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunctions, syntaxes } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict, pathSet } from \"./val\";\r\nimport { _boo, _num, _str, _key, _vec, _dic, _nul, _fun } from \"./val\";\r\n\r\nlet letsStack: { [key: string]: Val }[] = [];\r\nlet lets: typeof letsStack[0] = {};\r\nlet recurArgs: undefined | Val[];\r\n\r\ntype _Exception = { errors: InvokeError[] };\r\nfunction _throw(errors: InvokeError[]): Val {\r\n  throw <_Exception>{ errors };\r\n}\r\nfunction isThrown(e: unknown): e is _Exception {\r\n  return !!e && typeof e === \"object\" && \"errors\" in e!;\r\n}\r\nconst throwTypeErr = (msg: string, errCtx: ErrCtx) =>\r\n  _throw([typeErr(msg, errCtx)]);\r\n\r\nfunction exeOp(op: string, args: Val[], ctx: Ctx, errCtx: ErrCtx): Val {\r\n  switch (op) {\r\n    case \"str\":\r\n      return _str(stringify(args));\r\n    case \"strn\":\r\n      return _str(stringify(args.filter(a => a.t !== \"null\")));\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      return _nul();\r\n    case \"vec\":\r\n      return _vec(args);\r\n    case \"dict\":\r\n      return toDict(args);\r\n    case \"len\":\r\n      return _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        return _num(toNum(args[0].v));\r\n      } else {\r\n        return _nul();\r\n      }\r\n    case \"to-key\":\r\n      return _key(`:${val2str(args[0])}`);\r\n    case \"to-vec\":\r\n      return _vec(asArray(args[0]));\r\n    case \"!\":\r\n      return _boo(!asBoo(args[0]));\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          return _boo(false);\r\n        }\r\n      }\r\n      return _boo(true);\r\n    case \"-\":\r\n      return _num(args.map(num).reduce((sum, n) => sum - n));\r\n    case \"**\":\r\n      return _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n    case \"+\":\r\n      return _num(args.map(num).reduce((sum, n) => sum + n));\r\n    case \"*\":\r\n      return _num(args.map(num).reduce((sum, n) => sum * n));\r\n    case \"/\":\r\n      return _num(args.map(num).reduce((sum, n) => sum / n));\r\n    case \"//\":\r\n      return _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      return _boo(isEqual(args[0], args[1]) === (op === \"fast=\"));\r\n    case \"fast-\":\r\n      return _num(<number>args[0].v - <number>args[1].v);\r\n    case \"fast+\":\r\n      return _num(<number>args[0].v + <number>args[1].v);\r\n    case \"fast*\":\r\n      return _num(<number>args[0].v * <number>args[1].v);\r\n    case \"fast/\":\r\n      return _num(<number>args[0].v / <number>args[1].v);\r\n    case \"fast//\":\r\n      return _num(floor(<number>args[0].v / <number>args[1].v));\r\n    case \"fast<\":\r\n      return _boo(<number>args[0].v < <number>args[1].v);\r\n    case \"fast>\":\r\n      return _boo(<number>args[0].v > <number>args[1].v);\r\n    case \"fast<=\":\r\n      return _boo(<number>args[0].v <= <number>args[1].v);\r\n    case \"fast>=\":\r\n      return _boo(<number>args[0].v >= <number>args[1].v);\r\n    case \"neg\":\r\n      return _num(-num(args[0]));\r\n    case \"rem\":\r\n      return _num(args.map(num).reduce((sum, n) => sum % n));\r\n    case \"min\":\r\n      return _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n    case \"max\":\r\n      return _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          return _boo(false);\r\n        }\r\n      }\r\n      return _boo(true);\r\n    case \"inc\":\r\n      return _num(<number>args[0].v + 1);\r\n    case \"dec\":\r\n      return _num(<number>args[0].v - 1);\r\n    case \"abs\":\r\n      return _num(abs(<number>args[0].v));\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        return _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        return _num(round(<number>args[0].v));\r\n      }\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\": {\r\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\r\n      return _num(f(num(args[0])));\r\n    }\r\n    case \"asin\":\r\n    case \"acos\":\r\n    case \"atan\":\r\n    case \"sinh\":\r\n    case \"cosh\":\r\n    case \"tanh\": {\r\n      const f = { asin, acos, atan, sinh, cosh, tanh }[op];\r\n      return _num(f(num(args[0])));\r\n    }\r\n    case \"and\":\r\n      return _boo(args.every(asBoo));\r\n    case \"or\":\r\n      return _boo(args.some(asBoo));\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        return asBoo(args[0]) ? args[0] : args[1];\r\n      } else {\r\n        return _boo(false);\r\n      }\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      return _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n    case \"~\":\r\n      return _num(~num(args[0]));\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      return _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      return _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n    case \"ext?\": {\r\n      const { t } = args[0];\r\n      return _boo(\r\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\r\n          substr(op, 0, slen(op) - 1) === t,\r\n      );\r\n    }\r\n    case \"type-of\":\r\n      return _str(args[0].t);\r\n    case \"substr?\":\r\n      return _boo(sub(str(args[1]), str(args[0])));\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          throwTypeErr(\"strings can only contain strings\", errCtx);\r\n        } else {\r\n          i = subIdx(args[1].v, args[0].v);\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n      }\r\n      if (i === -1) {\r\n        return _nul();\r\n      } else {\r\n        return _num(i);\r\n      }\r\n    }\r\n    case \"set-at\": {\r\n      const [pathVal, replacement, coll] = args;\r\n      return pathSet(vec(pathVal), replacement, coll);\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"reductions\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          throwTypeErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n            errCtx,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          _throw([{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }]);\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          array.push(closure(arrays.map((a, i) => a[argIdxs[i]])));\r\n        }\r\n        return _vec(array);\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          array.push(closure(arrays.map(a => a[i])));\r\n        }\r\n        return _vec(array);\r\n      }\r\n\r\n      if (op !== \"reduce\" && op != \"reductions\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const b = asBoo(closure([array[i], ...args]));\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              return array[i];\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            return _num(count);\r\n          case \"find\":\r\n            return _nul();\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          return _str(filtered.map(v => val2str(v)).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          return toDict(flat(filtered.map(v => <Val[]>v.v)));\r\n        } else {\r\n          return _vec(filtered);\r\n        }\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        throwTypeErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n          errCtx,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          return args[0];\r\n        } else {\r\n          return _vec();\r\n        }\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        return array[0];\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      if (op === \"reductions\") {\r\n        const reductions: Val[] = [];\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          reductions.push(reduction);\r\n          reduction = closure([reduction, array[i]]);\r\n        }\r\n        reductions.push(reduction);\r\n        return _vec(reductions);\r\n      }\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        reduction = closure([reduction, array[i]]);\r\n      }\r\n      return reduction;\r\n    }\r\n    case \"repeat\":\r\n    case \"times\": {\r\n      const toRepeat = args[op === \"repeat\" ? 0 : 1];\r\n      const result: Val[] = [];\r\n      const count = num(args[op === \"repeat\" ? 1 : 0]);\r\n      if (count > ctx.rangeBudget) {\r\n        _throw([{ e: \"Budget\", m: \"would exceed range budget\", errCtx }]);\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(closure([_num(i)]));\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      return _vec(result);\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\": {\r\n      const nArgs = len(args);\r\n      const [a, b] = [\r\n        nArgs < 2 ? 0 : num(args[0]),\r\n        nArgs === 0\r\n          ? 1 + toNum(op === \"rand-int\")\r\n          : nArgs === 1\r\n          ? num(args[0])\r\n          : num(args[1]),\r\n      ];\r\n      return _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n    }\r\n    case \"do\":\r\n    case \"val\":\r\n      return op === \"do\" ? args.pop()! : args.shift()!;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        return _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          return toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v));\r\n        } else {\r\n          const { keys: ks1, vals: vs1 } = dic(args[0]);\r\n          const { keys: ks2, vals: vs2 } = dic(args[1]);\r\n          return _dic({ keys: concat(ks1, ks2), vals: concat(vs1, vs2) });\r\n        }\r\n      }\r\n    }\r\n    case \"omit\":\r\n      return dictDrop(dic(args[1]), args[0]);\r\n    case \"assoc\":\r\n      return _dic(dictSet(dic(args[2]), args[0], args[1]));\r\n    case \"append\":\r\n      return _vec(concat(vec(args[1]), [args[0]]));\r\n    case \"prepend\":\r\n      return _vec(concat([args[0]], vec(args[1])));\r\n    case \"insert\": {\r\n      const v = vec(args[2]);\r\n      let n = num(args[1]);\r\n      if (n === 0) {\r\n        return _vec(concat([args[0]], v));\r\n      } else if (n === -1) {\r\n        return _vec(concat(v, [args[0]]));\r\n      } else {\r\n        n = n > 0 ? min(n, len(v)) : max(len(v) + 1 + n, 0);\r\n        return _vec(concat(concat(slice(v, 0, n), [args[0]]), slice(v, n)));\r\n      }\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        return (v.t === \"vec\" ? _vec : _str)();\r\n      }\r\n      if (v.t === \"vec\") {\r\n        return _vec(slice(v.v, a, b));\r\n      } else {\r\n        return _str(substr(str(args[0]), a, b - a));\r\n      }\r\n    }\r\n    case \"skip\":\r\n    case \"first\":\r\n    case \"last\":\r\n    case \"crop\": {\r\n      const a = max(0, num(args[0]));\r\n      const { t, v } = args[op === \"crop\" ? 2 : 1];\r\n      const l = t === \"str\" ? slen(<string>v) : len(<Val[]>v);\r\n      let x = op === \"first\" ? 0 : op === \"last\" ? l - a : a;\r\n      const y =\r\n        op === \"first\" ? a : op === \"crop\" ? l - max(0, num(args[1])) : l;\r\n      x = x > y ? y : x;\r\n      return t === \"str\"\r\n        ? _str(substr(<string>v, x, y - x))\r\n        : _vec(slice(<Val[]>v, x, y));\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        return _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        return _vec(reverse(asArray(args[0])));\r\n      }\r\n    case \"flatten\": {\r\n      const src = vec(args[0]);\r\n      const flattened: Val[] = [];\r\n      const recur = (vec: Val[]): void =>\r\n        vec.forEach(v => (v.t === \"vec\" ? recur(v.v) : flattened.push(v)));\r\n      recur(src);\r\n      return _vec(flattened);\r\n    }\r\n    case \"shuffle\": {\r\n      const arr = slice(vec(args[0]));\r\n      for (let i = len(arr) - 1; i; --i) {\r\n        const j = floor(randInt(0, i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n      }\r\n      return _vec(arr);\r\n    }\r\n    case \"sample\": {\r\n      const shuffled = slice(vec(args[1]));\r\n      const size = max(0, min(len(shuffled), num(args[0])));\r\n      const minimum = len(shuffled) - size;\r\n      for (let i = len(shuffled) - 1; i > minimum; --i) {\r\n        const index = floor(randInt(0, i + 1));\r\n        [shuffled[i], shuffled[index]] = [shuffled[index], shuffled[i]];\r\n      }\r\n      return _vec(slice(shuffled, minimum));\r\n    }\r\n    case \"sort\":\r\n    case \"sort-by\": {\r\n      const src = asArray(args[op === \"sort\" ? 0 : 1]);\r\n      if (!len(src)) {\r\n        return _vec();\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (op === \"sort\") {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args[0], errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          mapped.push([src[i], closure([src[i]])]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        throwTypeErr(\"can only sort by all number or all string\", errCtx);\r\n      }\r\n      if (okT === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      return _vec(mapped.map(([v]) => v));\r\n    }\r\n    case \"group-by\": {\r\n      const closure = getExe(ctx, args[0], errCtx);\r\n      const groups: Dict = { keys: [], vals: [] };\r\n      const isDic = args[1].t === \"dict\";\r\n      if (isDic) {\r\n        const { keys, vals } = dic(args[1]);\r\n        for (let i = 0, lim = len(keys); i < lim; ++i) {\r\n          const v = closure([keys[i], vals[i]]);\r\n          const existingKey = groups.keys.findIndex(k => isEqual(k, v));\r\n          if (existingKey === -1) {\r\n            groups.keys.push(v);\r\n            groups.vals.push(_dic({ keys: [keys[i]], vals: [vals[i]] }));\r\n          } else {\r\n            const subDict = dic(groups.vals[existingKey]);\r\n            subDict.keys.push(keys[i]);\r\n            subDict.vals.push(vals[i]);\r\n          }\r\n        }\r\n      } else {\r\n        const src = asArray(args[1]);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const v = closure([src[i]]);\r\n          const existingKey = groups.keys.findIndex(k => isEqual(k, v));\r\n          if (existingKey === -1) {\r\n            groups.keys.push(v);\r\n            groups.vals.push(_vec([src[i]]));\r\n          } else {\r\n            const subVec = vec(groups.vals[existingKey]);\r\n            subVec.push(src[i]);\r\n          }\r\n        }\r\n      }\r\n      return _dic(groups);\r\n    }\r\n    case \"part-by\": {\r\n      const closure = getExe(ctx, args[0], errCtx);\r\n      const isDic = args[1].t === \"dict\";\r\n      if (isDic) {\r\n        const { keys, vals } = dic(args[1]);\r\n        const parted: Dict[] = [\r\n          { keys: [], vals: [] },\r\n          { keys: [], vals: [] },\r\n        ];\r\n        for (let i = 0, lim = len(keys); i < lim; ++i) {\r\n          const p = asBoo(closure([keys[i], vals[i]])) ? 0 : 1;\r\n          parted[p].keys.push(keys[i]);\r\n          parted[p].vals.push(vals[i]);\r\n        }\r\n        return _vec(parted.map(_dic));\r\n      } else {\r\n        const src = asArray(args[1]);\r\n        const parted: Val[][] = [[], []];\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          parted[asBoo(closure([src[i]])) ? 0 : 1].push(src[i]);\r\n        }\r\n        return _vec(parted.map(_vec));\r\n      }\r\n    }\r\n    case \"freqs\": {\r\n      const src = asArray(args[0]);\r\n      const distinct: Val[] = [];\r\n      const counts: number[] = [];\r\n      src.forEach(x => {\r\n        const i = distinct.findIndex(y => isEqual(x, y));\r\n        if (i !== -1) {\r\n          ++counts[i];\r\n        } else {\r\n          distinct.push(x);\r\n          counts.push(1);\r\n        }\r\n      });\r\n      return _dic({ keys: distinct, vals: counts.map(_num) });\r\n    }\r\n    case \"distinct\": {\r\n      const arr = len(args) === 1 && args[0].t === \"vec\" ? vec(args[0]) : args;\r\n      const distinct: Val[] = [];\r\n      arr.forEach(a => {\r\n        if (!distinct.some(v => isEqual(a, v))) {\r\n          distinct.push(a);\r\n        }\r\n      });\r\n      return _vec(distinct);\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        return _vec();\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        _throw([{ e: \"Budget\", m: \"would exceed range budget\", errCtx }]);\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      return _vec(nums.map(_num));\r\n    }\r\n    case \"empty?\":\r\n      return _boo(!len(asArray(args[0])));\r\n    case \"keys\":\r\n    case \"vals\":\r\n      return _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n    case \"split\":\r\n      return _vec(str(args[1]).split(str(args[0])).map(_str));\r\n    case \"join\":\r\n      return _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n    case \"replace\":\r\n    case \"rreplace\": {\r\n      const rop = op === \"replace\" ? replace : rreplace;\r\n      return _str(rop(str(args[2]), str(args[0]), str(args[1])));\r\n    }\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      return _boo(\r\n        (op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])),\r\n      );\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      return _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      return _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          return _nul();\r\n        } else {\r\n          return _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        return _str(codeChar(num(args[0])));\r\n      }\r\n    }\r\n    case \"time\":\r\n      return _num(getTimeMs());\r\n    case \"version\":\r\n      return _num(insituxVersion);\r\n    case \"tests\":\r\n      return _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n    case \"symbols\":\r\n      return _vec(symbols(ctx.env, false).map(_str));\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const invokeId = `${errCtx.invokeId} eval`;\r\n      try {\r\n        const valOrNone = parseAndExe(ctx, str(args[0]), invokeId, []);\r\n        return valOrNone ? valOrNone : _nul();\r\n      } catch (e) {\r\n        if (isThrown(e)) {\r\n          _throw([\r\n            { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n            ...e.errors,\r\n          ]);\r\n        }\r\n      }\r\n    }\r\n    case \"about\": {\r\n      const func = str(args[0]);\r\n      const entry = ops[func];\r\n      if (!entry) {\r\n        return _nul();\r\n      }\r\n      const infos: Val[] = [];\r\n      const info = (what: string, val: Val) =>\r\n        infos.push(_key(`:${what}`), val);\r\n      const toStrVec = (v: (string | string[])[]): Val =>\r\n        _vec(v.map(typ => (isArray(typ) ? _vec(typ.map(_str)) : _str(typ))));\r\n      info(\"external?\", _boo(!!entry.external));\r\n      if (entry.exactArity) {\r\n        info(\"exact-arity\", _num(entry.exactArity));\r\n      } else {\r\n        if (entry.minArity) {\r\n          info(\"minimum-arity\", _num(entry.minArity));\r\n        }\r\n        if (entry.maxArity) {\r\n          info(\"maximum-arity\", _num(entry.maxArity));\r\n        }\r\n      }\r\n      if (entry.params || entry.numeric) {\r\n        info(\"in-types\", toStrVec(entry.params ? entry.params : [\"num\"]));\r\n      }\r\n      if (entry.returns || entry.numeric === true) {\r\n        info(\"out-types\", toStrVec(entry.returns ? entry.returns : [\"num\"]));\r\n      }\r\n      return toDict(infos);\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return _nul();\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      letsStack = [];\r\n      return _nul();\r\n  }\r\n\r\n  return _throw([{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }]);\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as operation requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\n\r\nfunction checks(op: string, args: Val[], errCtx: ErrCtx, checkArity: boolean) {\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  const types = args.map(a => [a.t]);\r\n  const violations = typeCheck(op, types, errCtx);\r\n  return violations ? violations : false;\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => Val {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const violations = checks(name, params, errCtx, checkArity);\r\n          if (violations) {\r\n            _throw(violations);\r\n          }\r\n          const valOrErr = ctx.functions[name].handler(params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return _throw([{ e: \"External\", m: valOrErr.err, errCtx }]);\r\n          }\r\n          return valOrErr.value;\r\n        };\r\n      }\r\n      return (params: Val[]) => {\r\n        const violations = checks(name, params, errCtx, checkArity);\r\n        if (violations) {\r\n          _throw(violations);\r\n        }\r\n        return exeOp(name, params, ctx, errCtx);\r\n      };\r\n    }\r\n    if (name in ctx.env.funcs && name !== \"entry\") {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets) {\r\n      return getExe(ctx, lets[name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          _throw(monoArityError(op.t, errCtx));\r\n        }\r\n        if (!ctx.set) {\r\n          const m = `\"set\" feature not implemented on this platform`;\r\n          return _throw([{ e: \"External\", m, errCtx }]);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        if (err) {\r\n          _throw([{ e: \"External\", m: err, errCtx }]);\r\n        }\r\n        return params[0];\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      if (!ctx.exe) {\r\n        const m = `operation \"${name}\" does not exist\"`;\r\n        return _throw([{ e: \"External\", m, errCtx }]);\r\n      }\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        return valAndErr.value;\r\n      }\r\n      return _throw([{ e: \"External\", m: valAndErr.err, errCtx }]);\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        _throw(monoArityError(op.t, errCtx));\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        return dictGet(dic(params[0]), op);\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        return found ?? _nul();\r\n      } else {\r\n        return _throw(keyOpErr(errCtx, [params[0].t]));\r\n      }\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        _throw(monoArityError(op.t, errCtx));\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return _throw(numOpErr(errCtx, [a.t]));\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        return _nul();\r\n      } else if (n < 0) {\r\n        return arr[alen + n];\r\n      }\r\n      return arr[n];\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        _throw(monoArityError(op.t, errCtx));\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      return found ?? _nul();\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        return dictGet(dict, params[0]);\r\n      } else if (len(params) === 2) {\r\n        return _dic(dictSet(dict, params[0], params[1]));\r\n      }\r\n      return _throw([\r\n        { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n      ]);\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return _throw([\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ]);\r\n      }\r\n      return cond ? params[0] : len(params) > 1 ? params[1] : _nul();\r\n    };\r\n  }\r\n  return _ =>\r\n    _throw([\r\n      { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n    ]);\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) => dictSet(d, _key(k), v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", _str(e));\r\n    dict = newKey(dict, \":m\", _str(m));\r\n    dict = newKey(dict, \":line\", _num(errCtx.line));\r\n    dict = newKey(dict, \":col\", _num(errCtx.col));\r\n    return _dic(dict);\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return _str(strIdx(val.v, shape[a + 1]));\r\n    } else {\r\n      return _nul();\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? _nul() : arr[pos];\r\n}\r\n\r\nfunction exeFunc(ctx: Ctx, func: Func, args: Val[], closureDeref = false): Val {\r\n  --ctx.callBudget;\r\n  if (!closureDeref) {\r\n    letsStack.push({});\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  const stack: Val[] = [];\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      _throw([\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ]);\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          stack.push(_vec(args));\r\n        } else if (len(args) <= paramIdx) {\r\n          stack.push(_nul());\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          stack.push(_fun(name));\r\n        } else if (starts(name, \"$\")) {\r\n          if (!ctx.get) {\r\n            const m = `\"get\" feature not implemented on this platform`;\r\n            return _throw([{ e: \"External\", m, errCtx }]);\r\n          }\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return _throw([{ e: \"External\", m: valAndErr.err, errCtx }]);\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets) {\r\n          stack.push(lets[name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          stack.push(_fun(name));\r\n        } else {\r\n          _throw([{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }]);\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const op = stack.pop()!;\r\n        const closure = getExe(ctx, op, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        try {\r\n          stack.push(closure(params));\r\n        } catch (e) {\r\n          if (isThrown(e)) {\r\n            //Find next catch statement\r\n            const nextCat = slice(func.ins, i).findIndex(\r\n              ins => ins.typ === \"cat\",\r\n            );\r\n            if (nextCat !== -1) {\r\n              i += nextCat;\r\n              lets[\"errors\"] = _vec(errorsToDict(e.errors));\r\n              break;\r\n            }\r\n          }\r\n          throw e;\r\n        }\r\n        if (recurArgs) {\r\n          letsStack[len(letsStack) - 1] = {};\r\n          i = -1;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            _throw([{ e: \"Budget\", m: `recurred too many times`, errCtx }]);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        if (ins.value === 1) {\r\n          stack.pop();\r\n        } else {\r\n          splice(stack, len(stack) - ins.value, ins.value);\r\n        }\r\n        break;\r\n      case \"ret\":\r\n        if (!ins.value) {\r\n          stack.push(_nul());\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\": {\r\n        //Ensure any in-scope declarations are captured here\r\n        const derefIns = slice(ins.value.derefs).map(ins => {\r\n          const decl =\r\n            ins.typ === \"val\" &&\r\n            ins.value.t === \"str\" &&\r\n            (lets[ins.value.v] ?? ctx.env.vars[ins.value.v]);\r\n          return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\r\n        });\r\n        //Dereference closure captures\r\n        const captures = <Val[]>exeFunc(ctx, { ins: derefIns }, args, true).v;\r\n        //Enclose the closure with dereferenced values\r\n        const cins = slice(func.ins, i + 1, i + 1 + ins.value.length);\r\n        stack.push({ t: \"clo\", v: makeEnclosure(ins.value, cins, captures) });\r\n        i += ins.value.length;\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (closureDeref) {\r\n    return _vec(stack);\r\n  } else {\r\n    letsStack.pop();\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  return stack[len(stack) - 1];\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  params: Val[],\r\n): Val | undefined {\r\n  const parsed = parse(code, invokeId);\r\n  if (len(parsed.errors)) {\r\n    _throw(parsed.errors);\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], params);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunctions) {\r\n  Object.keys(functions).forEach(name => {\r\n    if (ops[name] && !ops[name].external) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...functions[name].definition, external: true };\r\n  });\r\n}\r\n\r\nexport function removeExternalOperations(functionNames: string[]) {\r\n  functionNames.forEach(name => {\r\n    if (ops[name] && !ops[name].external) {\r\n      throw \"Removing internal operations is disallowed.\";\r\n    }\r\n    delete ops[name];\r\n  });\r\n}\r\n\r\nfunction innerInvoke(\r\n  ctx: Ctx,\r\n  closure: () => Val | undefined,\r\n  printResult: boolean,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  let errors: InvokeError[] = [];\r\n  let value: Val | undefined;\r\n  try {\r\n    value = closure();\r\n  } catch (e) {\r\n    if (!isThrown(e)) {\r\n      throw e;\r\n    }\r\n    errors = e.errors;\r\n  }\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  letsStack = [];\r\n  if (len(errors)) {\r\n    return { kind: \"errors\", errors };\r\n  }\r\n  if (printResult && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return value ? { kind: \"val\", value } : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param invokeId A unique ID referenced in invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  printResult = false,\r\n  params: Val[] = [],\r\n): InvokeResult {\r\n  return innerInvoke(\r\n    ctx,\r\n    () => parseAndExe(ctx, code, invokeId, params),\r\n    printResult,\r\n  );\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n  printResult = false,\r\n): InvokeResult | undefined {\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return innerInvoke(\r\n    ctx,\r\n    () => exeFunc(ctx, ctx.env.funcs[funcName], params),\r\n    printResult,\r\n  );\r\n}\r\n\r\n/**\r\n * @param env An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(env: Env, alsoSyntax = true): string[] {\r\n  let syms: string[] = [];\r\n  if (alsoSyntax) {\r\n    push(syms, syntaxes);\r\n  }\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(env.funcs));\r\n  syms = concat(syms, objKeys(env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke, invokeFunction } from \".\";\r\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\r\nimport { getTimeMs } from \"./poly-fills\";\r\nimport { Ctx, InvokeResult, Val } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(\r\n  ctx: Ctx,\r\n  code: string,\r\n  id?: string,\r\n  printResult = true,\r\n): { output: InvokeOutput; result: InvokeResult } {\r\n  id = id ? `-${id}` : `${getTimeMs()}`;\r\n  invocations.set(id, code);\r\n  const result = invoke(ctx, code, id, printResult);\r\n  return { output: invokeResultToOutput(result), result };\r\n}\r\n\r\nexport function functionInvoker(\r\n  ctx: Ctx,\r\n  name: string,\r\n  params: Val[],\r\n  printResult = true,\r\n): { output: InvokeOutput; result?: InvokeResult } {\r\n  const result = invokeFunction(ctx, name, params, printResult);\r\n  if (!result) {\r\n    const message = <InvokeOutput[0]>{\r\n      type: \"message\",\r\n      text: `Invoke Error: function '${name}' not found.`,\r\n    };\r\n    return { output: [message] };\r\n  }\r\n  return { output: invokeResultToOutput(result), result };\r\n}\r\n\r\nfunction invokeResultToOutput(result: InvokeResult) {\r\n  if (result.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  const msg = (text: string) => out.push({ type: \"message\", text });\r\n  const err = (text: string) => out.push({ type: \"error\", text });\r\n  result.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\r\n    const invocation = invocations.get(invokeId);\r\n    if (!invocation) {\r\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    const path = starts(invokeId, \"-\") ? `In ${substr(invokeId, 1)}\\n` : \"\";\r\n    msg(`\\n${padEnd(`${line}`, 4)} ${half1}`);\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      err(lineText[col - 1]);\r\n      msg(`${half2}\\n`);\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      err(sym);\r\n      msg(`${half2}\\n`);\r\n    }\r\n    msg(`${e} Error: ${m}.\\n${path}`);\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","prefix","startsWith","ends","endsWith","replace","what","to","split","join","rreplace","RegExp","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sinh","cosh","tanh","asin","acos","atan","sqrt","round","ceil","sign","logn","log","log2","log10","print","returns","exactArity","minArity","numeric","maxArity","neg","inc","dec","and","or","xor","rem","vec","dict","params","map","for","reduce","reductions","filter","remove","find","count","repeat","times","strn","rand","into","assoc","omit","insert","append","prepend","sect","skip","first","last","crop","flatten","shuffle","sample","distinct","freqs","vals","do","val","time","version","tests","symbols","eval","about","reset","recur","syntaxes","typeNames","null","bool","ref","func","clo","wild","ext","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","makeEnclosure","name","captures","derefs","cins","derefed","ins","errCtxs","typ","shift","canCapture","exclusions","ins0","ins1","text","nullVal","falseVal","isToken","node","symAt","pos","arg","node2str","nodes","sym0","isClosure","n","token2str","poppedBody","expressions","lastExp","truncatedExps","popIns","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","head","unshift","err","eCtx","parsed","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","acc","when","flatBody","ifJmp","looJmp","symNode","defs","symErrMsg","d","lim","def","defIns","shape","errors","parseParams","pins","cloParams","outerParams","p","monoFnBody","parsedParams","firstSym","cin","capture","newSubDerefs","newSubCaptures","j","ccin","makeClosure","paramNames","param","position","consumeLast","errs","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","badArg","parse","code","invokeId","tokens","stringError","doTransforms","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","collected","entries","forEach","collectFuncs","_treeise","token","treeise","namedNodes","nodeOrErr","fae","f","state","kind","set","exe","output","out","dic","_boo","_num","_str","_key","_vec","_dic","_fun","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","pathSet","path","replacement","coll","vecCopy","recurArgs","letsStack","lets","_throw","isThrown","throwTypeErr","exeOp","ctx","sum","every","pathVal","closure","getExe","badType","arrays","lims","divisors","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","ks1","vs1","ks2","vs2","dictDrop","vlen","del","take","src","flattened","shuffled","size","minimum","index","mapped","okT","groups","existingKey","subDict","parted","counts","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","parseAndExe","entry","infos","info","toStrVec","external","monoArityError","checks","checkArity","violations","valOrErr","handler","exeFunc","valAndErr","alen","newKey","destruct","closureDeref","tooManyLoops","paramIdx","nextCat","derefIns","decl","printResult","innerInvoke","invocations","parensRx","invoker","id","invokeResultToOutput","type","invocation","lineText","sym","half1","half2"],"sourceRoot":""}