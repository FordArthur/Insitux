{"version":3,"file":"insitux.lib.min.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = <T>(arr: T[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const charCode = (str: string): number => str.charCodeAt(0);\nexport const codeChar = (num: number): string => String.fromCharCode(num);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;\n","export type Val =\n  | { t: \"vec\"; v: Val[] }\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\n  | { t: \"null\"; v: undefined }\n  | { t: \"wild\"; v: undefined }\n  | { t: \"bool\"; v: boolean }\n  | { t: \"num\"; v: number }\n  | { t: \"clo\"; v: Func }\n  | { t: \"dict\"; v: Dict }\n  | { t: \"ext\"; v: unknown };\n\nexport type ErrCtx = { invokeId: string; line: number; col: number };\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\nexport type ValOrErr =\n  | { kind: \"val\"; value: Val }\n  | { kind: \"err\"; err: string };\n/**\n * @summary \"empty\" occurs when there was only function declaration;\n *          \"val\" occurs when there were no errors and there is a final value;\n *          \"errors\" occurs when there were any errors.\n */\nexport type InvokeResult =\n  | { kind: \"empty\" }\n  | { kind: \"val\"; value: Val }\n  | { kind: \"errors\"; errors: InvokeError[] };\n\nexport type Dict = {\n  keys: Val[];\n  vals: Val[];\n};\n\nexport type Func = {\n  name?: string;\n  ins: Ins[];\n};\nexport type Funcs = { [key: string]: Func };\nexport type Env = {\n  funcs: Funcs;\n  vars: { [key: string]: Val };\n};\n\n/** A context supplied with an Insitux invocation to provide its environment. */\nexport type Ctx = {\n  /** Called to set an external variable, returning nothing or an error. */\n  set: (key: string, val: Val) => undefined | string;\n  /** Called to retrieve an external variable,\n   * returning the value or an error. */\n  get: (key: string) => ValOrErr;\n  /** Called to print data out of Insitux. */\n  print: (str: string, withNewline: boolean) => void;\n  /** Extra function definitions to make available within this invocation */\n  functions: ExternalFunction[];\n  /** Called when Insitux cannot find a function definition otherwise.\n   * You should return an error if unknown externally too. */\n  exe: (name: string, args: Val[]) => ValOrErr;\n  /** Function and variable definitions, retained by you for each invocation. */\n  env: Env;\n  /** The number of loops an invocation is permitted. */\n  loopBudget: number;\n  /** The total length of all `range` calls permitted. */\n  rangeBudget: number;\n  /** The total number of function calls permitted. */\n  callBudget: number;\n  /** The total number of explicit recursions permitted.\n   * Explicit recursions are unlikely to cause a stack-overflow. */\n  recurBudget: number;\n};\n\nexport const defaultCtx = {\n  env: { funcs: {}, vars: {} },\n  loopBudget: 1e7,\n  rangeBudget: 1e6,\n  callBudget: 1e8,\n  recurBudget: 1e4,\n};\n\nexport type ParamsShape = { name: string; position: number[] }[];\nexport type Closure = {\n  name: string;\n  closureIns: Ins[];\n  captured: boolean[];\n  captureIns: Ins[];\n};\n\nexport type Ins = { errCtx: ErrCtx } & (\n  | { typ: \"val\"; value: Val }\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\n  | { typ: \"ret\"; value: boolean } //Return, with value?\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\n  | { typ: \"clo\" | \"par\"; value: Closure } //Closure and partial, text representation and instructions\n);\n\n/** Definition of an operation in Insitux,\n * with guarantees made for arity (number of parameters) and parameter types.\n * Return type is specified to inform the parse-time type-checker. */\nexport type Operation = {\n  minArity?: number;\n  maxArity?: number;\n  exactArity?: number;\n  numeric?: true | \"in only\";\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\n  returns?: Val[\"t\"][];\n};\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\nexport type ExternalFunction = {\n  name: string;\n  definition: Operation;\n  handler: ExternalHandler;\n};\n\nexport const ops: {\n  [name: string]: Operation & { external?: boolean };\n} = {\n  print: { returns: [\"null\"] },\n  \"print-str\": { returns: [\"null\"] },\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\n  \"=\": { minArity: 2 },\n  \"!=\": { minArity: 2 },\n  \"+\": { minArity: 2, numeric: true },\n  \"-\": { minArity: 1, numeric: true },\n  \"*\": { minArity: 2, numeric: true },\n  \"/\": { minArity: 2, numeric: true },\n  \"//\": { minArity: 2, numeric: true },\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\n  \"<\": { minArity: 2, numeric: true },\n  \">\": { minArity: 2, numeric: true },\n  \"<=\": { minArity: 2, numeric: true },\n  \">=\": { minArity: 2, numeric: true },\n  \"fast=\": { exactArity: 2 },\n  \"fast!=\": { exactArity: 2 },\n  \"fast+\": { exactArity: 2, numeric: true },\n  \"fast-\": { exactArity: 2, numeric: true },\n  \"fast*\": { exactArity: 2, numeric: true },\n  \"fast/\": { exactArity: 2, numeric: true },\n  \"fast//\": { exactArity: 2, numeric: true },\n  \"fast<\": { exactArity: 2, numeric: true },\n  \"fast>\": { exactArity: 2, numeric: true },\n  \"fast<=\": { exactArity: 2, numeric: true },\n  \"fast>=\": { exactArity: 2, numeric: true },\n  inc: { exactArity: 1, numeric: true },\n  dec: { exactArity: 1, numeric: true },\n  min: { minArity: 2, numeric: true },\n  max: { minArity: 2, numeric: true },\n  abs: { exactArity: 1, numeric: true },\n  sqrt: { exactArity: 1, numeric: true },\n  round: { minArity: 1, maxArity: 2, numeric: true },\n  floor: { exactArity: 1, numeric: true },\n  ceil: { exactArity: 1, numeric: true },\n  logn: { exactArity: 1, numeric: true },\n  log2: { exactArity: 1, numeric: true },\n  log10: { exactArity: 1, numeric: true },\n  and: { minArity: 1 },\n  or: { minArity: 1 },\n  xor: { exactArity: 2 },\n  \"&\": { exactArity: 2, numeric: true },\n  \"|\": { exactArity: 2, numeric: true },\n  \"^\": { exactArity: 2, numeric: true },\n  \"~\": { exactArity: 1, numeric: true },\n  \"<<\": { exactArity: 2, numeric: true },\n  \">>\": { exactArity: 2, numeric: true },\n  \">>>\": { exactArity: 2, numeric: true },\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\n  rem: { minArity: 2, numeric: true },\n  sin: { exactArity: 1, numeric: true },\n  cos: { exactArity: 1, numeric: true },\n  tan: { exactArity: 1, numeric: true },\n  vec: { returns: [\"vec\"] },\n  dict: { returns: [\"dict\"] },\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\n  \"to-num\": {\n    exactArity: 1,\n    params: [[\"str\", \"num\"]],\n    returns: [\"num\", \"null\"],\n  },\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  idx: { minArity: 2, maxArity: 3, params: [[\"str\", \"vec\"]], returns: [\"num\"] },\n  map: { minArity: 2, returns: [\"vec\"] },\n  for: { minArity: 2, returns: [\"vec\"] },\n  reduce: { minArity: 2, maxArity: 3 },\n  filter: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\", \"str\", \"dict\"],\n  },\n  remove: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\", \"str\", \"dict\"],\n  },\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\n  count: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"num\"],\n  },\n  repeat: { minArity: 2, params: [[], \"num\"] },\n  \"->\": { minArity: 2 },\n  str: { returns: [\"str\"] },\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \".\": { minArity: 1 },\n  \"..\": { minArity: 2 },\n  \"...\": { minArity: 2 },\n  into: {\n    exactArity: 2,\n    params: [\n      [\"vec\", \"dict\"],\n      [\"vec\", \"dict\"],\n    ],\n    returns: [\"vec\", \"dict\"],\n  },\n  push: {\n    minArity: 2,\n    maxArity: 3,\n    params: [[\"vec\", \"dict\"]],\n    returns: [\"vec\", \"dict\"],\n  },\n  sect: {\n    minArity: 1,\n    maxArity: 3,\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\n    returns: [\"vec\", \"str\"],\n  },\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\n  sort: {\n    minArity: 1,\n    maxArity: 2,\n    params: [[\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\"],\n  },\n  keys: { exactArity: 1, params: [\"dict\"] },\n  vals: { exactArity: 1, params: [\"dict\"] },\n  do: { minArity: 1 },\n  val: { minArity: 1 },\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\n  \"empty?\": {\n    exactArity: 1,\n    params: [[\"str\", \"vec\", \"dict\"]],\n    returns: [\"bool\"],\n  },\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\n  join: {\n    exactArity: 2,\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\n    returns: [\"str\"],\n  },\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\n  \"char-code\": {\n    minArity: 1,\n    maxArity: 2,\n    params: [[\"str\", \"num\"], \"num\"],\n    returns: [\"str\", \"num\", \"null\"],\n  },\n  time: { exactArity: 0, returns: [\"num\"] },\n  version: { exactArity: 0, returns: [\"num\"] },\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\n  symbols: { exactArity: 0, returns: [\"vec\"] },\n  eval: { exactArity: 1, params: [\"str\"] },\n  reset: { exactArity: 0 },\n  recur: {},\n};\n\nexport const typeNames = {\n  null: \"null\",\n  str: \"string\",\n  num: \"number\",\n  bool: \"boolean\",\n  key: \"keyword\",\n  ref: \"reference\",\n  vec: \"vector\",\n  dict: \"dictionary\",\n  func: \"function\",\n  clo: \"closure\",\n  wild: \"wildcard\",\n  ext: \"external\",\n};\n\nexport const assertUnreachable = (_x: never): never => <never>0;\n","import { has, isArray, len } from \"./poly-fills\";\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\n\nexport const asBoo = (val: Val) =>\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\n\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\n  const { exactArity, maxArity, minArity } = ops[op];\n  const aErr = (msg: string, amount: number) => [\n    <InvokeError>{\n      e: \"Arity\",\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\n      errCtx,\n    },\n  ];\n  if (exactArity !== undefined) {\n    if (nArg !== exactArity) {\n      return aErr(`exactly ${exactArity}`, exactArity);\n    }\n  } else {\n    if (minArity && !maxArity && nArg < minArity) {\n      return aErr(`at least ${minArity}`, minArity);\n    } else if (!minArity && maxArity && nArg > maxArity) {\n      return aErr(`at most ${maxArity}`, maxArity);\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\n    }\n  }\n}\n\nexport function typeCheck(\n  op: string,\n  args: Val[\"t\"][][],\n  errCtx: ErrCtx,\n  optimistic = false,\n): InvokeError[] | undefined {\n  const { params: types, numeric: onlyNum } = ops[op];\n  const nArg = len(args);\n  if (onlyNum) {\n    const nonNumArgIdx = args.findIndex(\n      a =>\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\n    );\n    if (nonNumArgIdx === -1) {\n      return;\n    }\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\n    return [\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\n    ];\n  }\n  if (!types) {\n    return;\n  }\n  const typeViolations = types\n    .map((need, i) => {\n      if (i >= nArg || !args[i]) {\n        return false;\n      }\n      const argTypes = args[i]!;\n      if (isArray(need)) {\n        if (\n          !len(need) ||\n          (optimistic\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\n            : len(argTypes) === 1 && has(need, argTypes[0]))\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        const needs = need.map(t => typeNames[t]).join(\", \");\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\n      } else {\n        if (\n          optimistic\n            ? !len(argTypes) || has(argTypes, need)\n            : len(argTypes) === 1 && need === argTypes[0]\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\n      }\n    })\n    .filter(r => !!r);\n  return len(typeViolations)\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\n    : undefined;\n}\n\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\n  e: \"Type\",\n  m,\n  errCtx,\n});\n\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\nimport * as pf from \"./poly-fills\";\nconst { has, flat, push, slice, splice } = pf;\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\nconst { isNum, len, toNum } = pf;\nimport { ParamsShape, ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\nimport { assertUnreachable, InvokeError } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype Node = Token | Node[];\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\nconst nullVal: Val = { t: \"null\", v: undefined };\nconst falseVal = <Val>{ t: \"bool\", v: false };\ntype NamedNodes = {\n  name: string;\n  nodes: Node[];\n};\nconst isToken = (node: Node | undefined): node is Token =>\n  !!node && \"errCtx\" in node;\nconst symAt = (node: Node, pos = 0) => {\n  if (isToken(node)) {\n    return \"\";\n  }\n  const arg = node[pos];\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\n};\nconst node2str = (nodes: Node[]): string =>\n  nodes.map(n => (isToken(n) ? n.text : `(${node2str(n)})`)).join(\" \");\n\nexport function tokenise(\n  code: string,\n  invokeId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\n  let [inSymbol, inNumber, inHex] = [false, false, false];\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (c === \"\\\\\" && inString) {\n      tokens[len(tokens) - 1].text +=\n        { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\n        (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`);\n      ++col;\n      ++i;\n      continue;\n    }\n    const errCtx: ErrCtx = { invokeId, line, col };\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      const nl = subIdx(substr(code, ++i), \"\\n\");\n      const text = substr(code, i, nl > 0 ? nl : l - i);\n      i += slen(text);\n      ++line;\n      col = 0;\n      if (emitComments) {\n        tokens.push({ typ: \"rem\", text, errCtx });\n      }\n      continue;\n    }\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or hex, or binary, else convert into symbol\n    if (inNumber && !isDigit(c)) {\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\n      inHex = inHex || hexStart;\n      inNumber =\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps && (c === \"[\" || c === \"{\")) {\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inHex = inSymbol = !inNumber;\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\n/** Parses tokens into a tree where each node is a token or token list. */\nfunction treeise(tokens: Token[]): Node[] {\n  const nodes: Node[] = [];\n  const _treeise = (tokens: Token[]): Node => {\n    let prefix: Token | undefined;\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\n      prefix = tokens.shift()!;\n    }\n    const token = tokens.shift()!;\n    if (token.typ !== \"(\" && token.typ !== \")\") {\n      return token;\n    }\n    const nodes: Node[] = prefix ? [prefix] : [];\n    while (tokens[0].typ !== \")\") {\n      nodes.push(_treeise(tokens));\n    }\n    tokens.shift();\n    return nodes;\n  };\n  while (len(tokens)) {\n    nodes.push(_treeise(tokens));\n  }\n  return nodes;\n}\n\n/** Separates function nodes and non-function nodes,\n * with non-function nodes collected into (function entry ...)\n * if there are any.*/\nfunction collectFuncs(\n  nodes: Node[],\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\n  const funcs: ReturnType<typeof collectFuncs> = [];\n  const entries: Node[] = [];\n  nodes.forEach(node => {\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\n      const name = symAt(node, 1);\n      if (!name) {\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\n      } else if (len(node) < 3) {\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\n      }\n      funcs.push({ name, nodes: slice(node, 2) });\n    } else {\n      entries.push(node);\n    }\n  });\n  if (len(entries)) {\n    funcs.push({ name: \"entry\", nodes: entries });\n  }\n  return funcs;\n}\n\nconst parseNode = (node: Node, params: ParamsShape) =>\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\n\nfunction parseForm(\n  nodes: Node[],\n  params: ParamsShape,\n  doArityCheck = true,\n): ParserIns[] {\n  if (!len(nodes)) {\n    return [];\n  }\n  const nodeParser = (node: Node) => parseNode(node, params);\n  let firstNode = nodes.shift()!;\n  let head = nodeParser(firstNode);\n  const { errCtx } = head[0];\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\n    //1-off arity deficiency rewritten as closure\n    if (firstNode.text in ops) {\n      const { exactArity, minArity } = ops[firstNode.text];\n      const a = exactArity ?? minArity;\n      if (a && a !== 1 && len(nodes) + 1 === a) {\n        nodes.unshift(firstNode);\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\n      }\n    }\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\n      nodes.unshift(firstNode);\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\n    }\n    const { text: op, errCtx } = firstNode;\n    const err = (m: string, eCtx = errCtx) => [\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\n    ];\n\n    if (has([\"if\", \"if!\", \"when\", \"match\"], op) && !len(nodes)) {\n      return err(\"provide a condition\");\n    } else if (has([\"if\", \"if!\"], op)) {\n      if (len(nodes) === 1) {\n        return err(\"provide at least one branch\");\n      } else if (len(nodes) > 3) {\n        return err(\"provide fewer than two branches\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [cond, branch1] = parsed;\n      let branch2 = parsed[2];\n      const ifN = op === \"if!\" && [\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\n      ];\n      if (!branch2) {\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\n      }\n      return [\n        ...cond,\n        ...(ifN || []),\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\n        ...branch1,\n        { typ: \"jmp\", value: len(branch2), errCtx },\n        ...branch2,\n      ];\n    } else if (op === \"when\") {\n      if (len(nodes) === 1) {\n        return err(\"provide a body\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\n      const bodyIns = flat(body);\n      return [\n        ...cond,\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\n        ...bodyIns,\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: nullVal, errCtx },\n      ];\n    } else if (op === \"match\") {\n      const parsed = nodes.map(nodeParser);\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\n      if (!len(args)) {\n        return err(\"provide at least one case\");\n      }\n      const elseLen = len(otherwise);\n      let insCount =\n        args.reduce((acc, a) => acc + len(a), 0) +\n        (elseLen ? elseLen : 2) +\n        len(args);\n      const ins: ParserIns[] = cond;\n      while (len(args) > 1) {\n        const [a, when] = [args.shift()!, args.shift()!];\n        push(ins, a);\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\n        push(ins, when);\n        insCount -= len(a) + len(when) + 2;\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\n      }\n      if (len(otherwise)) {\n        push(ins, otherwise);\n      } else {\n        ins.push({ typ: \"pop\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\n      }\n      return ins;\n    } else if (op === \"catch\") {\n      if (len(nodes) < 2) {\n        return err(\"provide at least 2 arguments\");\n      } else if (isToken(nodes[0])) {\n        return err(\"argument 1 must be expression\");\n      }\n      const body = nodeParser(nodes[0]);\n      const when = flat(slice(nodes, 1).map(nodeParser));\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\n      const args = nodes.map(nodeParser);\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\n      if (len(args) < 2) {\n        return err(\"provide at least 2 arguments\");\n      }\n      const ins: ParserIns[] = [];\n      if (op === \"while\") {\n        ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n        insCount += 2; //+1 for the if ins, +1 for the pop ins\n        const [head, body] = [args[0], slice(args, 1)];\n        push(ins, head);\n        ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n        ins.push({ typ: \"pop\", value: len(body), errCtx });\n        push(ins, flat(body));\n        ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n        return ins;\n      }\n      insCount += len(args); //+1 for each if/or ins\n      insCount += toNum(op === \"and\");\n      const typ = op === \"and\" ? \"if\" : \"or\";\n      for (let a = 0; a < len(args); ++a) {\n        push(ins, args[a]);\n        insCount -= len(args[a]);\n        ins.push({ typ, value: insCount, errCtx });\n        --insCount;\n      }\n      if (op === \"and\") {\n        push(ins, [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n          { typ: \"jmp\", value: 1, errCtx },\n        ]);\n      }\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\n      return ins;\n    } else if (op === \"var\" || op === \"let\") {\n      const defs = nodes.filter((n, i) => !(i % 2));\n      const vals = nodes.filter((n, i) => !!(i % 2));\n      if (!len(defs)) {\n        return err(\"provide at least 1 declaration name and value\");\n      } else if (len(defs) > len(vals)) {\n        return err(\"provide a value after each declaration name\");\n      }\n      const ins: ParserIns[] = [];\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\n        push(ins, nodeParser(vals[d]));\n        const def = defs[d];\n        if (isToken(def)) {\n          const defIns = parseNode(defs[d], params);\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\n            return err(\"declaration name must be symbol\", defIns[0].errCtx);\n          }\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\n        } else {\n          const { shape, errors } = parseParams([def], true);\n          if (len(errors)) {\n            return errors;\n          }\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\n          ins.push({ typ, value: shape, errCtx });\n        }\n      }\n      return ins;\n    } else if (op === \"var!\" || op === \"let!\") {\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\n      if (len(nodes) < 2) {\n        return err(\"provide 1 declaration name and 1 function\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\n      if (def.typ !== \"ref\") {\n        return err(\"declaration name must be symbol\", def.errCtx);\n      }\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\n      push(ins, [...flat(args), ...func]);\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\n      const typ = op === \"var!\" ? \"var\" : \"let\";\n      ins.push({ typ, value: def.value, errCtx });\n      return ins;\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\n      const pins: ParserIns[] = [];\n      let asStr = node2str(nodes);\n      asStr = op === \"fn\" ? `(fn ${asStr})` : `${op}(${asStr})`;\n      if (op === \"fn\") {\n        const parsedParams = parseParams(nodes, false);\n        params = parsedParams.shape;\n        push(pins, parsedParams.errors);\n        if (!len(nodes)) {\n          return err(\"provide a body\");\n        }\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\n      }\n      //Rewrite partial closure to #(... [body] args)\n      if (op === \"@\") {\n        nodes = [\n          { typ: \"sym\", text: \"...\", errCtx },\n          ...nodes,\n          { typ: \"sym\", text: \"args\", errCtx },\n        ];\n      }\n      push(pins, parseForm(nodes, params, op !== \"@\"));\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\n      const errors = pins.filter(i => i.typ === \"err\");\n      if (len(errors)) {\n        return errors;\n      }\n      if (op === \"fn\") {\n        cins.forEach(i => {\n          if (i.typ === \"npa\") {\n            i.typ = \"upa\";\n          }\n        });\n      }\n      //Calculate captures\n      const captureIns: Ins[] = [];\n      const captured: boolean[] = [];\n      for (let i = 0; i < len(cins); ++i) {\n        const ci = cins[i];\n        const isExe =\n          ci.typ === \"val\" &&\n          i + 1 < len(cins) &&\n          cins[i + 1].typ === \"exe\" &&\n          ((ci.value.t === \"func\" && !ops[ci.value.v]) || ci.value.t === \"str\");\n        captured[i] =\n          (ci.typ === \"ref\" &&\n            !cins.find(i => i.typ === \"let\" && i.value === ci.value)) ||\n          ci.typ === \"npa\" ||\n          isExe;\n        if (captured[i]) {\n          captureIns.push(ci);\n        }\n      }\n      const value = { name: asStr, closureIns: cins, captureIns, captured };\n      return [{ typ: op === \"@\" ? \"par\" : \"clo\", value, errCtx }];\n    }\n\n    //Operation arity check, optionally disabled for partial closures\n    if (ops[op] && doArityCheck) {\n      const errors = arityCheck(op, len(nodes), errCtx);\n      const err = (value: string, eCtx = errCtx) => [\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\n      ];\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\n      if (!errors) {\n        //Upgrade some math and logic functions to their faster counterparts\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\n        }\n      }\n    }\n  }\n\n  const args = nodes.map(nodeParser);\n  const ins: ParserIns[] = flat(args);\n  if (symAt([firstNode]) === \"return\") {\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\n  } else if (head[0].typ === \"ref\") {\n    const { value: v, errCtx } = head[0];\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\n  }\n  push(ins, head);\n  const typ = len(head) > 1 ? \"exa\" : \"exe\";\n  return [...ins, { typ, value: len(args), errCtx }];\n}\n\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\n  if (isToken(node)) {\n    const { errCtx } = node;\n    if (node.typ === \"str\") {\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\n    } else if (node.typ === \"num\") {\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\n    } else if (node.typ === \"sym\") {\n      const { text } = node;\n      const paramNames = params.map(({ name }) => name);\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (text === \"_\") {\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(paramNames, text)) {\n        const param = params.find(({ name }) => name === text)!;\n        if (len(param.position) === 1) {\n          return [{ typ: \"npa\", value: param.position[0], errCtx }];\n        }\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (text === \"PI\" || text === \"E\") {\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    }\n    return [];\n  } else if (!len(node)) {\n    return [];\n  }\n  return parseForm(node, params);\n}\n\n/** Consumes some tokens and returns ParamsShape.\n * Example inputs:\n * \"(fn \"   a [b [c]] d [d c b a]\n * \"(var \" [a] [1 2] b [1 2]\n * \"(function \" [x] (print x) x\n * \"(function \" x [x]\n * \"(fn \"\n * \"(function \"\n * */\nfunction parseParams(\n  nodes: Node[],\n  consumeLast: boolean,\n  position: number[] = [],\n): { shape: ParamsShape; errors: ParserIns[] } {\n  const shape: ParamsShape = [],\n    errs: ParserIns[] = [];\n  let n = 0;\n  while (\n    len(nodes) > (consumeLast ? 0 : 1) &&\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\n  ) {\n    const param = nodes.shift()!;\n    if (!isToken(param)) {\n      param.shift();\n      const parsed = parseParams(param, true, [...position, n]);\n      push(shape, parsed.shape);\n      push(errs, parsed.errors);\n    } else {\n      const { typ, errCtx } = param;\n      if (typ === \"sym\") {\n        shape.push({ name: param.text, position: [...position, n] });\n      } else {\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\n      }\n    }\n    ++n;\n  }\n  return { shape, errors: errs };\n}\n\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\n  const { shape: params, errors } = parseParams(nodes, false);\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\n  for (let i = 0, lim = len(ins); i < lim; i++) {\n    const { typ, value, errCtx } = ins[i];\n    if (typ === \"err\") {\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\n    }\n  }\n  return { name, ins: <Ins[]>ins };\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\n    return errors;\n  }\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\n    }\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\n//TODO: investigate Node implementation replacement\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\n  type TypeInfo = {\n    types?: Val[\"t\"][];\n    val?: Val;\n  };\n  const stack: TypeInfo[] = [];\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\n    const ins = fins[i];\n    switch (ins.typ) {\n      case \"val\":\n        stack.push({ types: [ins.value.t], val: ins.value });\n        break;\n      case \"exa\":\n      case \"exe\": {\n        const head = stack.pop()!;\n        const args = splice(stack, len(stack) - ins.value, ins.value);\n        const badMatch = (okTypes: Val[\"t\"][]) =>\n          args.findIndex(\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\n          );\n        const headIs = (t: Val[\"t\"]) =>\n          head.val\n            ? head.val.t === t\n            : head.types && len(head.types) === 1 && head.types[0] === t;\n        if (head.val && head.val.t === \"func\") {\n          if (head.val.v === \"recur\") {\n            splice(stack, len(stack) - ins.value, ins.value);\n            break;\n          }\n          const errors = typeCheck(\n            head.val.v,\n            args.map(a => a.types ?? []),\n            ins.errCtx,\n            true,\n          );\n          if (errors) {\n            return errors;\n          }\n          const { returns, numeric: onlyNum } = ops[head.val.v];\n          stack.push(\n            onlyNum && onlyNum !== \"in only\"\n              ? { types: [\"num\"] }\n              : { types: returns },\n          );\n        } else if (headIs(\"num\")) {\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return numOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"key\")) {\n          const badArg = badMatch([\"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return keyOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\n          stack.push({});\n        } else if (!head.types && !head.val) {\n          stack.push({});\n        }\n        break;\n      }\n      case \"or\":\n        stack.pop();\n        stack.push({});\n        i += ins.value;\n        break;\n      case \"cat\":\n      case \"var\":\n      case \"let\":\n      case \"dva\":\n      case \"dle\":\n      case \"loo\":\n      case \"jmp\":\n        break;\n      case \"clo\":\n      case \"par\": {\n        const errors = insErrorDetect(ins.value.closureIns);\n        if (errors) {\n          return errors;\n        }\n      }\n      case \"ref\":\n      case \"npa\":\n      case \"upa\":\n      case \"dpa\":\n        stack.push({});\n        break;\n      case \"if\": {\n        stack.pop();\n        stack.push({});\n        const ifIns = slice(fins, i + 1, ins.value + 1);\n        const errors = insErrorDetect(ifIns);\n        if (errors) {\n          return errors;\n        }\n        i += ins.value - 1;\n        break;\n      }\n      case \"mat\": {\n        stack.pop(); //first match\n        stack.pop(); //cond\n        i += ins.value;\n        i += fins[i].value as number; //The first jmp\n        stack.push({});\n        break;\n      }\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          stack.pop();\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n}\n\nexport function parse(\n  code: string,\n  invokeId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, invokeId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const okFuncs: Func[] = [],\n    errors: InvokeError[] = [];\n  const tree = treeise(slice(tokens));\n  const collected = collectFuncs(tree);\n  const namedNodes: NamedNodes[] = [];\n  collected.forEach(nodeOrErr => {\n    if (\"err\" in nodeOrErr) {\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\n    } else {\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\n    }\n  });\n  namedNodes.map(compileFunc).forEach(fae => {\n    if (\"e\" in fae) {\n      errors.push(fae);\n    } else {\n      okFuncs.push(fae);\n    }\n  });\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\n  return { errors, funcs };\n}\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\n\ntype State = { dict: Map<string, Val>; output: string };\n\nfunction get(state: State, key: string): ValOrErr {\n  if (!state.dict.has(key)) {\n    return { kind: \"err\", err: `\"${key}\" not found.` };\n  }\n  return { kind: \"val\", value: state.dict.get(key)! };\n}\n\nfunction set(state: State, key: string, val: Val): string | undefined {\n  state.dict.set(key, val);\n  return undefined;\n}\n\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\n  const nullVal: Val = { t: \"null\", v: undefined };\n  switch (name) {\n    case \"test.function\":\n      state.output += args[0].v + \"\\n\";\n      break;\n    default:\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\n  }\n  return { kind: \"val\", value: nullVal };\n}\n\nconst tests: {\n  name: string;\n  code: string;\n  err?: string[];\n  out?: string;\n}[] = [\n  //Basic snippets\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\n  {\n    name: \"Say Hello, world!\",\n    code: `(print \"Hello, world!\")`,\n    out: `Hello, world!\\nnull`,\n  },\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\n  {\n    name: \"Whens\",\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\n    out: `hi\\n[234 null]`,\n  },\n  {\n    name: \"match and wildcard\",\n    code: `(match [1 2]\n             [0 0] (print \"hello\")\n             [0 2] (print \"bye\")\n             [1 _] \"hey\")`,\n    out: `hey`,\n  },\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\n  {\n    name: \"and & short-circuit\",\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\n    out: `[false true]`,\n  },\n  {\n    name: \"or & short-circuit\",\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\n    out: `-> [true 1]`,\n  },\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\n  {\n    name: \"Key as operation\",\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\n    out: `[24 :abc]`,\n  },\n  {\n    name: \"Dictionary as op 1\",\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 2\",\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\n  },\n  {\n    name: \"Equalities\",\n    code: `[(= 1 2 1)\n            (!= 1 2 1)\n            (= \"Hello\" \"hello\")\n            (!= \"world\" \"world\")\n            (= [0 [1]] [0 [1]])]`,\n    out: `[false 1 false false [0 [1]]]`,\n  },\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\n  {\n    name: \"Define num and call\",\n    code: `(var f 1) (f [:a :b :c])`,\n    out: `:b`,\n  },\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\n  {\n    name: \"Apply op to let\",\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\n    out: `20`,\n  },\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\n  {\n    name: \"Sum vector of numbers\",\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\n    out: `[6 9]`,\n  },\n  {\n    name: \"Sum vectors of numbers\",\n    code: `(map + [1 2 3] [1 2 3 4])`,\n    out: `[2 4 6]`,\n  },\n  {\n    name: \"Filter by integer\",\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\n    out: `[[:a :b :c] \"hello\"]`,\n  },\n  {\n    name: \"Comments, short decimal\",\n    code: `;((print \"Hello\")\n           .456`,\n    out: `0.456`,\n  },\n  {\n    name: \"Dictionary into vector\",\n    code: `(into [1 2] {3 4 5 6})`,\n    out: `[1 2 [3 4] [5 6]]`,\n  },\n  {\n    name: \"Vector into dictionary\",\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\n    out: `{[0] 2, [2] 3}`,\n  },\n  {\n    name: \"While loop\",\n    code: `(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))`,\n    out: `543210`,\n  },\n  {\n    name: \"Catch error\",\n    code: `(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print \"hi\"))`,\n    out: `Type`,\n  },\n  //Basic functions and closures\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\n  {\n    name: \"Call greet func\",\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\n    out: `Hello!\\nnull`,\n  },\n  {\n    name: \"Call const value func\",\n    code: `(function const 123) (const)`,\n    out: `123`,\n  },\n  {\n    name: \"Call identity funcs\",\n    code: `(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]`,\n    out: `[123 456]`,\n  },\n  {\n    name: \"Call greet with name\",\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\n           (greeting \"Patrick\")`,\n    out: `Hello, Patrick!\\nnull`,\n  },\n  {\n    name: \"Call with too few args\",\n    code: `(function func a b c [a b c]) (func 1 2)`,\n    out: `[1 2 null]`,\n  },\n  {\n    name: \"Define func and call\",\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Anonymous parameters\",\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)`,\n    out: `false`,\n  },\n  {\n    name: \"Call parameter\",\n    code: `(function f x (x \"hello\")) (f print)`,\n    out: `hello\\nnull`,\n  },\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\n  {\n    name: \"Let num op and call\",\n    code: `(function f (let n 0) (n [1])) (f)`,\n    out: `1`,\n  },\n  {\n    name: \"Explicit return\",\n    code: `(function f (return 123) (print 456)) (f)`,\n    out: `123`,\n  },\n  {\n    name: \"Closure 1\",\n    code: `(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)`,\n    out: `20`,\n  },\n  {\n    name: \"Closure 2\",\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\n    out: `[0 2 4 5 6 8]`,\n  },\n  {\n    name: \"Closure 3\",\n    code: `(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]`,\n    out: `[20 40]`,\n  },\n  {\n    name: \"Func returns closure\",\n    code: `(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)`,\n    out: `4`,\n  },\n  {\n    name: \"Dictionary closure\",\n    code: `(function f x #{x 2})\n           (let closure (f :a))\n           (closure)`,\n    out: `{:a 2}`,\n  },\n  {\n    name: \"Vector closure\",\n    code: `(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Closure as head\",\n    code: `(#[% %1 %2] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 1\",\n    code: `(@[] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 2\",\n    code: `(@((do +) 2) 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Parameterised closure 1\",\n    code: `((fn a b (+ a b)) 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Parameterised closure 2\",\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\n    out: `224`,\n  },\n  {\n    name: \"Closure with mixed lets\",\n    code: `(let a + c 5 d 10)\n           (let closure (fn b (let d 1) (a b c d)))\n           (let a - c 4 d 11)\n           (closure 1)`,\n    out: `7`,\n  },\n  {\n    name: \"Destructure var\",\n    code: `(var [x [y]] [1 [2]]) [y x]`,\n    out: `[2 1]`,\n  },\n  {\n    name: \"Destructure string\",\n    code: `(let [a b c] \"hello\") [a b c]`,\n    out: `[\"h\" \"e\" \"l\"]`,\n  },\n  {\n    name: \"Destructure function\",\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\n    out: `[4 3 2 1 0]`,\n  },\n  {\n    name: \"Destructuring closure\",\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\n    out: `[3 2 1 0]`,\n  },\n  {\n    name: \"Destructuring fn decoy\",\n    code: `(let f (fn a [a [a]])) (f 0)`,\n    out: `[0 [0]]`,\n  },\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\n  //Runtime errors\n  {\n    name: \"String instead of number\",\n    code: `(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 \"hi\")`,\n    out: `4`,\n    err: [\"Type\"],\n  },\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\n  {\n    name: \"Expired let retrieve\",\n    code: `(function f (let a 1) a) (f) a`,\n    err: [\"Reference\"],\n  },\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\n  {\n    name: \"Loop budget\",\n    code: `(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))`,\n    err: [\"Budget\"],\n  },\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\n  {\n    name: \"Head exe arity check\",\n    code: `(((fn +)) 1)`,\n    err: [\"Arity\"],\n  },\n  //Complex functions\n  {\n    name: \"Fibonacci 13\",\n    code: `(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)`,\n    out: `233`,\n  },\n  {\n    name: \"dedupe (recur)\",\n    code: `(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"frequencies\",\n    code: `(function frequencies list\n             (reduce #(push % %1 (inc (or (% %1) 0))) {} list))\n           (frequencies \"12121212\")`,\n    out: `{\"1\" 4, \"2\" 4}`,\n  },\n  //Test environment functions\n  {\n    name: \"set get\",\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\n    out: `[5.5 5.5]`,\n  },\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\n  //Syntax errors\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\n  {\n    name: \"Imbalanced quotes\",\n    code: `(print \"Hello)`,\n    err: [\"Parse\"],\n  },\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\n  //Parser type and arity errors\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\n  {\n    name: \"Parser type error 2\",\n    code: `(function f (+ 1 (into {} {})))`,\n    err: [\"Type\"],\n  },\n  {\n    name: \"Parser type error 3\",\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\n    err: [\"Type\"],\n  },\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\n];\n\nexport function doTests(\n  invoke: (\n    ctx: Ctx,\n    code: string,\n    invokeId: string,\n    print: boolean,\n  ) => InvokeResult,\n  terse = true,\n): string[] {\n  const results: {\n    okErr: boolean;\n    okOut: boolean;\n    elapsedMs: number;\n    display: string;\n  }[] = [];\n  for (let t = 0; t < len(tests); ++t) {\n    const { name, code, err, out } = tests[t];\n    const state: State = {\n      dict: new Map<string, Val>(),\n      output: \"\",\n    };\n    const env: Env = { funcs: {}, vars: {} };\n    const startTime = getTimeMs();\n    const valOrErrs = invoke(\n      {\n        get: (key: string) => get(state, key),\n        set: (key: string, val: Val) => set(state, key, val),\n        print: (str, withNewLine) => {\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\n        },\n        exe: (name: string, args: Val[]) => exe(state, name, args),\n        functions: [],\n        env,\n        loopBudget: 10000,\n        rangeBudget: 1000,\n        callBudget: 1000,\n        recurBudget: 10000,\n      },\n      code,\n      code,\n      true,\n    );\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\n    const okOut = !out || trim(state.output) === out;\n    const elapsedMs = getTimeMs() - startTime;\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\n      padEnd(`${t + 1}`, 3),\n      padEnd(name, 24),\n      padEnd(`${elapsedMs}ms`, 6),\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\n      okErr ||\n        errors.map(\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\n        ),\n    ];\n    results.push({\n      okErr,\n      okOut,\n      elapsedMs,\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\n    });\n  }\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\n  return concat(\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\n  );\n}\n","import { len, slice, splice } from \"./poly-fills\";\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\n\nexport const num = ({ v }: Val) => v as number;\nexport const str = ({ v }: Val) => v as string;\nexport const vec = ({ v }: Val) => v as Val[];\nexport const dic = ({ v }: Val) => v as Dict;\n\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\n\nexport const isEqual = (a: Val, b: Val) => {\n  if (a.t === \"wild\" || b.t === \"wild\") {\n    return true;\n  }\n  if (a.t !== b.t) {\n    return false;\n  }\n  switch (a.t) {\n    case \"null\":\n      return true;\n    case \"bool\":\n      return a.v === b.v;\n    case \"num\":\n      return a.v === b.v;\n    case \"vec\":\n      return isVecEqual(a.v, vec(b));\n    case \"dict\": {\n      const bd = dic(b);\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\n    }\n    case \"str\":\n    case \"ref\":\n    case \"key\":\n    case \"func\":\n      return str(a) === str(b);\n    case \"clo\":\n      return (<Func>a.v).name === (<Func>b.v).name;\n    case \"ext\":\n      return a.v === b.v;\n  }\n  return assertUnreachable(a);\n};\n\nexport const stringify = (vals: Val[]) =>\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\n\nexport const val2str = (val: Val): string => {\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\n  if (val.t === \"clo\") {\n    return val.v.name ?? \"\";\n  } else if (val.t === \"vec\") {\n    return `[${val.v.map(quoted).join(\" \")}]`;\n  } else if (val.t === \"dict\") {\n    const { keys, vals } = val.v;\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\n    return `{${entries.join(\", \")}}`;\n  } else if (val.t === \"null\") {\n    return \"null\";\n  } else if (val.t === \"wild\") {\n    return \"_\";\n  }\n  return `${val.v}`;\n};\n\nexport const asArray = (val: Val): Val[] =>\n  val.t === \"vec\"\n    ? slice(val.v)\n    : val.t === \"str\"\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\n    : val.t === \"dict\"\n    ? val.v.keys.map((k, i) => ({\n        t: \"vec\",\n        v: [k, val.v.vals[i]],\n      }))\n    : [];\n\nexport const toDict = (args: Val[]): Val => {\n  if (len(args) % 2 === 1) {\n    args.pop();\n  }\n  const keys = args.filter((_, i) => i % 2 === 0);\n  const vals = args.filter((_, i) => i % 2 === 1);\n  const ddKeys: Val[] = [],\n    ddVals: Val[] = [];\n  keys.forEach((key, i) => {\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\n    if (existingIdx === -1) {\n      ddKeys.push(key);\n      ddVals.push(vals[i]);\n    } else {\n      ddVals[existingIdx] = vals[i];\n    }\n  });\n  return {\n    t: \"dict\",\n    v: { keys: ddKeys, vals: ddVals },\n  };\n};\n\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\n  const idx = keys.findIndex(k => isEqual(k, key));\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\n};\n\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    nVals[idx] = val;\n  } else {\n    nKeys.push(key);\n    nVals.push(val);\n  }\n  return <Dict>{ keys: nKeys, vals: nVals };\n};\n\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    splice(nKeys, idx, 1);\n    splice(nVals, idx, 1);\n  }\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\n};\n\nexport function errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n","export const insituxVersion = 20220103;\nimport { asBoo } from \"./checks\";\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\nimport { parse } from \"./parse\";\nimport * as pf from \"./poly-fills\";\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\nconst { logn, log2, log10 } = pf;\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\nconst { getTimeMs, randInt, randNum } = pf;\nconst { isNum, len, objKeys, range, toNum } = pf;\nimport { doTests } from \"./test\";\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\nimport { ExternalFunction, ExternalHandler } from \"./types\";\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\n\nconst externalOps: { [name: string]: ExternalHandler } = {};\nlet stack: Val[] = [];\nlet lets: { [key: string]: Val }[] = [];\nlet recurArgs: undefined | Val[];\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\nconst _num = (v: number) => stack.push({ t: \"num\", v });\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\n\nfunction exeOp(\n  op: string,\n  args: Val[],\n  ctx: Ctx,\n  errCtx: ErrCtx,\n  checkArity: boolean,\n): InvokeError[] | undefined {\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\n  //Optional arity check\n  if (checkArity) {\n    const violations = arityCheck(op, len(args), errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n  //Argument type check\n  {\n    const types = args.map(a => [a.t]);\n    const violations = typeCheck(op, types, errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n\n  switch (op) {\n    case \"str\":\n      stack.push({ t: \"str\", v: stringify(args) });\n      return;\n    case \"print\":\n    case \"print-str\":\n      ctx.print(stringify(args), op === \"print\");\n      _nul();\n      return;\n    case \"vec\":\n      _vec(args);\n      return;\n    case \"dict\":\n      stack.push(toDict(args));\n      return;\n    case \"len\":\n      _num(\n        args[0].t === \"str\"\n          ? slen(args[0].v)\n          : args[0].t === \"vec\"\n          ? len(args[0].v)\n          : len(dic(args[0]).keys),\n      );\n      return;\n    case \"to-num\":\n      if (isNum(args[0].v)) {\n        _num(toNum(args[0].v));\n      } else {\n        _nul();\n      }\n      return;\n    case \"to-key\":\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\n      return;\n    case \"!\":\n      _boo(!asBoo(args[0]));\n      return;\n    case \"=\":\n    case \"!=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\n          _boo(false);\n          return;\n        }\n      }\n      stack.push(args[0]);\n      return;\n    case \"-\":\n      _num(\n        len(args) === 1\n          ? -num(args[0])\n          : args.map(num).reduce((sum, n) => sum - n),\n      );\n      return;\n    case \"**\":\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\n      return;\n    case \"+\":\n      _num(args.map(num).reduce((sum, n) => sum + n));\n      return;\n    case \"*\":\n      _num(args.map(num).reduce((sum, n) => sum * n));\n      return;\n    case \"/\":\n      _num(args.map(num).reduce((sum, n) => sum / n));\n      return;\n    case \"//\":\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\n      return;\n    case \"fast=\":\n    case \"fast!=\":\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\n        _boo(false);\n        return;\n      }\n      stack.push(args[0]);\n      return;\n    case \"fast-\":\n      _num(<number>args[0].v - <number>args[1].v);\n      return;\n    case \"fast+\":\n      _num(<number>args[0].v + <number>args[1].v);\n      return;\n    case \"fast*\":\n      _num(<number>args[0].v * <number>args[1].v);\n      return;\n    case \"fast/\":\n      _num(<number>args[0].v / <number>args[1].v);\n      return;\n    case \"fast//\":\n      _num(floor(<number>args[0].v / <number>args[1].v));\n      return;\n    case \"fast<\":\n      _boo(<number>args[0].v < <number>args[1].v);\n      return;\n    case \"fast>\":\n      _boo(<number>args[0].v > <number>args[1].v);\n      return;\n    case \"fast<=\":\n      _boo(<number>args[0].v <= <number>args[1].v);\n      return;\n    case \"fast>=\":\n      _boo(<number>args[0].v >= <number>args[1].v);\n      return;\n    case \"rem\":\n      _num(args.map(num).reduce((sum, n) => sum % n));\n      return;\n    case \"min\":\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\n      return;\n    case \"max\":\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\n      return;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\n        if (\n          (op === \"<\" && a >= b) ||\n          (op === \">\" && a <= b) ||\n          (op === \"<=\" && a > b) ||\n          (op === \">=\" && a < b)\n        ) {\n          _boo(false);\n          return;\n        }\n      }\n      _boo(true);\n      return;\n    case \"inc\":\n      _num(<number>args[0].v + 1);\n      return;\n    case \"dec\":\n      _num(<number>args[0].v - 1);\n      return;\n    case \"abs\":\n      _num(abs(<number>args[0].v));\n      return;\n    case \"round\":\n      if (len(args) === 2) {\n        const x = 10 ** <number>args[0].v;\n        _num(round(<number>args[1].v * x) / x);\n      } else {\n        _num(round(<number>args[0].v));\n      }\n      return;\n    case \"sin\":\n    case \"cos\":\n    case \"tan\":\n    case \"sqrt\":\n    case \"floor\":\n    case \"ceil\":\n    case \"logn\":\n    case \"log2\":\n    case \"log10\": {\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\n      _num(f(num(args[0])));\n      return;\n    }\n    case \"and\":\n      _boo(args.every(asBoo));\n      return;\n    case \"or\":\n      _boo(args.some(asBoo));\n      return;\n    case \"xor\":\n      if (asBoo(args[0]) !== asBoo(args[1])) {\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\n      } else {\n        _boo(false);\n      }\n      return;\n    case \"&\":\n    case \"|\":\n    case \"^\":\n    case \"<<\":\n    case \">>\":\n    case \">>>\":\n      const [a, b] = [num(args[0]), num(args[1])];\n      _num(\n        op === \"&\"\n          ? a & b\n          : op === \"|\"\n          ? a | b\n          : op === \"^\"\n          ? a ^ b\n          : op === \"<<\"\n          ? a << b\n          : op === \">>\"\n          ? a >> b\n          : a >>> b,\n      );\n      return;\n    case \"~\":\n      _num(~num(args[0]));\n      return;\n    case \"odd?\":\n    case \"even?\":\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\n      return;\n    case \"pos?\":\n    case \"neg?\":\n    case \"zero?\": {\n      const n = num(args[0]);\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\n      return;\n    }\n    case \"null?\":\n    case \"num?\":\n    case \"bool?\":\n    case \"str?\":\n    case \"dict?\":\n    case \"vec?\":\n    case \"key?\":\n    case \"func?\":\n    case \"wild?\":\n    case \"ext?\": {\n      const { t } = args[0];\n      _boo(\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\n          substr(op, 0, slen(op) - 1) === t,\n      );\n      return;\n    }\n    case \"has?\":\n      _boo(sub(str(args[0]), str(args[1])));\n      return;\n    case \"idx\": {\n      let i = -1;\n      if (args[0].t === \"str\") {\n        if (args[1].t !== \"str\") {\n          return tErr(\"strings can only contain strings\");\n        }\n        if (len(args) < 3) {\n          i = subIdx(args[0].v, args[1].v);\n        } else {\n          const arr = args[0].v.split(\"\");\n          arr[num(args[2])] = args[1].v;\n          _str(arr.join(\"\"));\n          return;\n        }\n      } else if (args[0].t === \"vec\") {\n        if (len(args) < 3) {\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\n        } else {\n          const v = slice(args[0].v);\n          v[num(args[2])] = args[1];\n          _vec(v);\n          return;\n        }\n      }\n      if (i === -1) {\n        _nul();\n      } else {\n        _num(i);\n      }\n      return;\n    }\n    case \"map\":\n    case \"for\":\n    case \"reduce\":\n    case \"filter\":\n    case \"remove\":\n    case \"find\":\n    case \"count\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      if (op === \"map\" || op === \"for\") {\n        const badArg = args.findIndex(\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\n        );\n        if (badArg !== -1) {\n          const badType = typeNames[args[badArg].t];\n          return tErr(\n            `argument ${\n              badArg + 2\n            } must be either: string, vector, dictionary, not ${badType}`,\n          );\n        }\n      }\n\n      if (op === \"for\") {\n        const arrays = args.map(asArray);\n        const lims = arrays.map(len);\n        const divisors = lims.map((_, i) =>\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\n        );\n        divisors.unshift(1);\n        const lim = divisors.pop()!;\n        if (lim > ctx.loopBudget) {\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\n        }\n        const array: Val[] = [];\n        for (let t = 0; t < lim; ++t) {\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      if (op === \"map\") {\n        const arrays = args.map(asArray);\n        const shortest = min(...arrays.map(len));\n        const array: Val[] = [];\n        for (let i = 0; i < shortest; ++i) {\n          const errors = closure(arrays.map(a => a[i]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      if (op !== \"reduce\") {\n        const arrArg = args.shift()!;\n        const array = asArray(arrArg);\n        const isRemove = op === \"remove\",\n          isFind = op === \"find\",\n          isCount = op === \"count\";\n        const filtered: Val[] = [];\n        let count = 0;\n        for (let i = 0, lim = len(array); i < lim; ++i) {\n          const errors = closure([array[i], ...args]);\n          if (errors) {\n            return errors;\n          }\n          const b = asBoo(stack.pop()!);\n          if (isCount) {\n            count += b ? 1 : 0;\n          } else if (isFind) {\n            if (b) {\n              stack.push(array[i]);\n              return;\n            }\n          } else if (b !== isRemove) {\n            filtered.push(array[i]);\n          }\n        }\n        switch (op) {\n          case \"count\":\n            _num(count);\n            return;\n          case \"find\":\n            _nul();\n            return;\n        }\n        if (arrArg.t === \"str\") {\n          _str(filtered.map(v => val2str(v)).join(\"\"));\n        } else if (arrArg.t === \"dict\") {\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\n        } else {\n          _vec(filtered);\n        }\n        return;\n      }\n      const arrayVal = args.pop()!;\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\n        return tErr(\n          `must reduce either: string, vector, dictionary, not ${\n            typeNames[arrayVal.t]\n          }`,\n        );\n      }\n      const array = asArray(arrayVal);\n\n      if (!len(array)) {\n        if (len(args)) {\n          stack.push(args[0]);\n        } else {\n          _vec();\n        }\n        return;\n      }\n      if (len(array) < 2 && !len(args)) {\n        push(stack, array);\n        return;\n      }\n\n      let reduction: Val = (len(args) ? args : array).shift()!;\n      for (let i = 0, lim = len(array); i < lim; ++i) {\n        const errors = closure([reduction, array[i]]);\n        if (errors) {\n          return errors;\n        }\n        reduction = stack.pop()!;\n      }\n      stack.push(reduction);\n      return;\n    }\n    case \"repeat\": {\n      const toRepeat = args.shift()!;\n      const result: Val[] = [];\n      const count = num(args[0]);\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\n        const closure = getExe(ctx, toRepeat, errCtx);\n        for (let i = 0; i < count; ++i) {\n          const errors = closure([{ t: \"num\", v: i }]);\n          if (errors) {\n            return errors;\n          }\n          result.push(stack.pop()!);\n        }\n      } else {\n        for (let i = 0; i < count; ++i) {\n          result.push(toRepeat);\n        }\n      }\n      _vec(result);\n      return;\n    }\n    case \"->\": {\n      stack.push(args.shift()!);\n      for (let i = 0, lim = len(args); i < lim; ++i) {\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\n        if (errors) {\n          return errors;\n        }\n      }\n      return;\n    }\n    case \"rand-int\":\n    case \"rand\":\n      {\n        const nArgs = len(args);\n        const [a, b] = [\n          nArgs < 2 ? 0 : num(args[0]),\n          nArgs === 0\n            ? 1 + toNum(op === \"rand-int\")\n            : nArgs === 1\n            ? num(args[0])\n            : num(args[1]),\n        ];\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\n      }\n      return;\n    case \"do\":\n    case \"val\":\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\n      return;\n    case \".\":\n    case \"..\":\n    case \"...\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      if (op === \".\") {\n        return closure(args);\n      }\n      let flatArgs: Val[] = args;\n      if (op === \"..\") {\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\n      } else {\n        const a = flatArgs.pop()!;\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\n      }\n      return closure(flatArgs);\n    }\n    case \"into\": {\n      if (args[0].t === \"vec\") {\n        _vec(concat(args[0].v, asArray(args[1])));\n      } else {\n        if (args[1].t === \"vec\") {\n          stack.push(\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\n          );\n        } else {\n          const { keys, vals } = dic(args[0]);\n          const d1 = dic(args[1]);\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\n        }\n      }\n      return;\n    }\n    case \"push\": {\n      if (args[0].t === \"vec\") {\n        const v = args[0].v;\n        if (len(args) < 3) {\n          _vec(concat(v, [args[1]]));\n        } else {\n          const n = num(args[2]);\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\n        }\n      } else {\n        if (len(args) < 3) {\n          stack.push(dictDrop(dic(args[0]), args[1]));\n        } else {\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\n        }\n      }\n      return;\n    }\n    case \"sect\": {\n      const v = args[0];\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\n      let a = 0,\n        b = vlen;\n      switch (len(args)) {\n        case 1:\n          a = 1;\n          break;\n        case 2: {\n          const del = num(args[1]);\n          if (del < 0) {\n            b += del;\n          } else {\n            a += del;\n          }\n          break;\n        }\n        case 3: {\n          const skip = num(args[1]);\n          const take = num(args[2]);\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\n          b = (take < 0 ? b : a) + take;\n          break;\n        }\n      }\n      a = max(a, 0);\n      b = min(b, vlen);\n      if (a > b) {\n        (v.t === \"vec\" ? _vec : _str)();\n        return;\n      }\n      if (v.t === \"vec\") {\n        _vec(slice(v.v, a, b));\n      } else {\n        _str(substr(str(args[0]), a, b - a));\n      }\n      return;\n    }\n    case \"reverse\":\n      if (args[0].t === \"str\") {\n        _str(stringify(reverse(asArray(args[0]))));\n      } else {\n        _vec(reverse(asArray(args[0])));\n      }\n      return;\n    case \"sort\": {\n      const src = asArray(args[0]);\n      if (!len(src)) {\n        _vec();\n        return;\n      }\n      const mapped: Val[][] = [];\n      if (len(args) === 1) {\n        push(\n          mapped,\n          src.map(v => [v, v]),\n        );\n      } else {\n        const closure = getExe(ctx, args.pop()!, errCtx);\n        for (let i = 0, lim = len(src); i < lim; ++i) {\n          const errors = closure([src[i]]);\n          if (errors) {\n            return errors;\n          }\n          mapped.push([src[i], stack.pop()!]);\n        }\n      }\n      const okT = mapped[0][1].t;\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\n        return tErr(\"can only sort by all number or all string\");\n      }\n      if (mapped[0][1].t === \"num\") {\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\n      } else {\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\n      }\n      _vec(mapped.map(([v]) => v));\n      return;\n    }\n    case \"range\": {\n      const [a, b, s] = args.map(num);\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\n      const [x, y] =\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\n      const step = sign((y - x) * (s || 1)) * (s || 1);\n      const count = ceil(abs((y - x) / step));\n      if (!count) {\n        _vec([]);\n        return;\n      }\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      const nums = range(count).map(n => n * step + x);\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\n      return;\n    }\n    case \"empty?\":\n      _boo(!len(asArray(args[0])));\n      return;\n    case \"keys\":\n    case \"vals\":\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\n      return;\n    case \"split\":\n      _vec(\n        str(args[len(args) - 1])\n          .split(len(args) - 1 ? str(args[0]) : \" \")\n          .map(v => <Val>{ t: \"str\", v }),\n      );\n      return;\n    case \"join\":\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\n      return;\n    case \"starts?\":\n    case \"ends?\":\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\n      return;\n    case \"upper-case\":\n    case \"lower-case\":\n    case \"trim\":\n    case \"trim-start\":\n    case \"trim-end\":\n      _str(\n        (op === \"upper-case\"\n          ? upperCase\n          : op === \"lower-case\"\n          ? lowerCase\n          : op === \"trim\"\n          ? trim\n          : op === \"trim-start\"\n          ? trimStart\n          : trimEnd)(str(args[0])),\n      );\n      return;\n    case \"str*\": {\n      const text = str(args[0]);\n      _str(\n        range(max(ceil(num(args[1])), 0))\n          .map(n => text)\n          .join(\"\"),\n      );\n      return;\n    }\n    case \"char-code\": {\n      if (args[0].t === \"str\") {\n        const n = len(args) > 1 ? num(args[1]) : 0;\n        const s = str(args[0]);\n        if (slen(s) <= n || n < 0) {\n          _nul();\n        } else {\n          _num(charCode(strIdx(s, n)));\n        }\n      } else {\n        _str(codeChar(num(args[0])));\n      }\n      return;\n    }\n    case \"time\":\n      _num(getTimeMs());\n      return;\n    case \"version\":\n      _num(insituxVersion);\n      return;\n    case \"tests\":\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\n      return;\n    case \"symbols\":\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\n      return;\n    case \"eval\": {\n      delete ctx.env.funcs[\"entry\"];\n      const sLen = len(stack);\n      const invokeId = `${errCtx.invokeId} eval`;\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\n      if (errors) {\n        return [\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\n          ...errors,\n        ];\n      }\n      if (sLen === len(stack)) {\n        _nul();\n      }\n      return;\n    }\n    case \"recur\":\n      recurArgs = args;\n      return;\n    case \"reset\":\n      ctx.env.vars = {};\n      ctx.env.funcs = {};\n      lets = [];\n      _nul();\n      return;\n  }\n\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\n}\n\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\n  {\n    e: \"Arity\",\n    m: `${typeNames[t]} as op requires one sole argument`,\n    errCtx,\n  },\n];\nfunction getExe(\n  ctx: Ctx,\n  op: Val,\n  errCtx: ErrCtx,\n  checkArity = true,\n): (params: Val[]) => InvokeError[] | undefined {\n  if (op.t === \"str\" || op.t === \"func\") {\n    const name = op.v;\n    if (ops[name]) {\n      if (ops[name].external) {\n        return (params: Val[]) => {\n          const valOrErr = externalOps[name](params);\n          if (valOrErr.kind === \"err\") {\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\n          }\n          stack.push(valOrErr.value);\n        };\n      }\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\n    }\n    if (name in ctx.env.funcs) {\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\n    }\n    if (name in ctx.env.vars) {\n      return getExe(ctx, ctx.env.vars[name], errCtx);\n    }\n    if (name in lets[len(lets) - 1]) {\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\n    }\n    if (starts(name, \"$\")) {\n      return (params: Val[]) => {\n        if (!len(params)) {\n          return monoArityError(op.t, errCtx);\n        }\n        const err = ctx.set(substr(name, 1), params[0]);\n        stack.push(params[0]);\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n      };\n    }\n    return (params: Val[]) => {\n      const valAndErr = ctx.exe(name, params);\n      if (valAndErr.kind === \"val\") {\n        stack.push(valAndErr.value);\n        return;\n      }\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\n    };\n  } else if (op.t === \"clo\") {\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\n  } else if (op.t === \"key\") {\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      if (params[0].t === \"dict\") {\n        stack.push(dictGet(dic(params[0]), op));\n      } else if (params[0].t === \"vec\") {\n        const found = vec(params[0]).find(v => isEqual(v, op));\n        stack.push(found ?? { t: \"null\", v: undefined });\n      } else {\n        return keyOpErr(errCtx, [params[0].t]);\n      }\n      return;\n    };\n  } else if (op.t === \"num\") {\n    const n = floor(op.v);\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      const a = params[0];\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\n        return numOpErr(errCtx, [a.t]);\n      }\n      const arr = asArray(a),\n        alen = len(arr);\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\n        _nul();\n      } else if (n < 0) {\n        stack.push(arr[alen + n]);\n      } else {\n        stack.push(arr[n]);\n      }\n      return;\n    };\n  } else if (op.t === \"vec\") {\n    const { v } = op;\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      const found = v.find(val => isEqual(val, params[0]));\n      if (found) {\n        stack.push(found);\n      } else {\n        _nul();\n      }\n      return;\n    };\n  } else if (op.t === \"dict\") {\n    const dict = op.v;\n    return (params: Val[]) => {\n      if (len(params) === 1) {\n        stack.push(dictGet(dict, params[0]));\n      } else if (len(params) === 2) {\n        _dic(dictSet(dict, params[0], params[1]));\n      } else {\n        return [\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\n        ];\n      }\n      return;\n    };\n  } else if (op.t === \"bool\") {\n    const cond = op.v;\n    return (params: Val[]) => {\n      if (!len(params) || len(params) > 2) {\n        return [\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\n        ];\n      }\n      stack.push(\n        cond\n          ? params[0]\n          : len(params) > 1\n          ? params[1]\n          : { t: \"null\", v: undefined },\n      );\n      return;\n    };\n  }\n  return _ => [\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\n  ];\n}\n\nfunction errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n\nfunction destruct(args: Val[], shape: number[]): Val {\n  let arr: Val[] = args;\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\n    const val = arr[shape[a]];\n    if (val.t === \"vec\") {\n      arr = val.v;\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\n    } else {\n      return { t: \"null\", v: undefined };\n    }\n  }\n  const pos = shape[len(shape) - 1];\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\n}\n\nfunction exeFunc(\n  ctx: Ctx,\n  func: Func,\n  args: Val[],\n  inClosure = false,\n): InvokeError[] | undefined {\n  --ctx.callBudget;\n  if (!inClosure) {\n    lets.push({});\n  }\n  const stackLen = len(stack);\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\n    const ins = func.ins[i];\n    const { errCtx } = func.ins[i];\n\n    const tooManyLoops = ctx.loopBudget < 1;\n    if (tooManyLoops || ctx.callBudget < 1) {\n      return [\n        {\n          e: \"Budget\",\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\n          errCtx,\n        },\n      ];\n    }\n\n    switch (ins.typ) {\n      case \"val\":\n        stack.push(ins.value);\n        break;\n      case \"var\":\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\n        break;\n      case \"let\":\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\n        break;\n      case \"dle\":\n      case \"dva\": {\n        const val = stack.pop()!;\n        let last: Val | undefined;\n        ins.value.forEach(({ name, position }) => {\n          if (ins.typ === \"dva\") {\n            last = ctx.env.vars[name] = destruct([val], position);\n          } else {\n            last = lets[len(lets) - 1][name] = destruct([val], position);\n          }\n        });\n        stack.push(last!);\n        break;\n      }\n      case \"npa\":\n      case \"upa\": {\n        const paramIdx = ins.value;\n        if (paramIdx === -1) {\n          _vec(args);\n        } else if (len(args) <= paramIdx) {\n          _nul();\n        } else {\n          stack.push(args[paramIdx]);\n        }\n        break;\n      }\n      case \"dpa\":\n        stack.push(destruct(args, ins.value));\n        break;\n      case \"ref\": {\n        const name = ins.value;\n        if (ops[name]) {\n          _fun(name);\n        } else if (starts(name, \"$\")) {\n          const valAndErr = ctx.get(substr(name, 1));\n          if (valAndErr.kind === \"err\") {\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\n          }\n          stack.push(valAndErr.value);\n        } else if (name in ctx.env.vars) {\n          stack.push(ctx.env.vars[name]);\n        } else if (name in lets[len(lets) - 1]) {\n          stack.push(lets[len(lets) - 1][name]);\n        } else if (name in ctx.env.funcs) {\n          _fun(name);\n        } else {\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\n        }\n        break;\n      }\n      case \"exa\":\n      case \"exe\": {\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\n        const nArgs = ins.value;\n        const params = splice(stack, len(stack) - nArgs, nArgs);\n        const errors = closure(params);\n        if (errors) {\n          //Find next catch statement\n          const nextCat = slice(func.ins, i).findIndex(\n            ins => ins.typ === \"cat\",\n          );\n          if (nextCat !== -1) {\n            i += nextCat;\n            lets[len(lets) - 1][\"errors\"] = {\n              t: \"vec\",\n              v: errorsToDict(errors),\n            };\n            break;\n          }\n          return errors;\n        }\n        if (recurArgs) {\n          lets[len(lets) - 1] = {};\n          i = -1;\n          const nArgs = ins.value;\n          args = recurArgs;\n          recurArgs = undefined;\n          --ctx.recurBudget;\n          if (!ctx.recurBudget) {\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\n          }\n          break;\n        }\n        break;\n      }\n      case \"or\":\n        if (asBoo(stack[len(stack) - 1])) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      case \"mat\": {\n        const a = stack[len(stack) - 2];\n        if (!isEqual(a, stack.pop()!)) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      }\n      case \"if\":\n        if (!asBoo(stack.pop()!)) {\n          i += ins.value;\n        }\n        break;\n      case \"jmp\":\n      case \"cat\":\n        i += ins.value;\n        break;\n      case \"loo\":\n        i += ins.value;\n        --ctx.loopBudget;\n        break;\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          splice(stack, stackLen, len(stack) - stackLen - 1);\n        } else {\n          _nul();\n        }\n        i = lim;\n        break;\n      case \"clo\":\n      case \"par\": {\n        const { name, captured, captureIns } = ins.value;\n        let { closureIns: cins } = ins.value;\n        const newCins: Ins[] = [];\n        if (!len(captureIns)) {\n          push(newCins, cins);\n        } else {\n          cins = cins.map((ins, i) => {\n            const decl =\n              ins.typ === \"val\" &&\n              ins.value.t === \"str\" &&\n              (lets[len(lets) - 1][ins.value.v] ?? ctx.env.vars[ins.value.v]);\n            captured[i] = decl ? false : captured[i];\n            return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\n          });\n          const errors = exeFunc(ctx, { ins: captureIns }, args, true);\n          if (errors) {\n            return errors;\n          }\n          const numIns = len(captureIns);\n          const captures = splice(stack, len(stack) - numIns, numIns);\n          const cap = (value: Val) => <Ins>{ typ: \"val\", value, errCtx };\n          for (let i = 0, c = 0; i < len(captured); ++i) {\n            newCins.push(captured[i] ? cap(captures[c++]) : cins[i]);\n          }\n        }\n        stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: newCins } });\n        break;\n      }\n      default:\n        assertUnreachable(ins);\n    }\n  }\n  if (!inClosure) {\n    lets.pop();\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\n  }\n  return;\n}\n\nfunction parseAndExe(\n  ctx: Ctx,\n  code: string,\n  invokeId: string,\n): InvokeError[] | undefined {\n  const parsed = parse(code, invokeId);\n  if (len(parsed.errors)) {\n    return parsed.errors;\n  }\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\n  if (!(\"entry\" in ctx.env.funcs)) {\n    return;\n  }\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\n}\n\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\n  functions.forEach(({ name, definition, handler }) => {\n    if (ops[name] && !externalOps[name]) {\n      throw \"Redefining internal operations is disallowed.\";\n    }\n    ops[name] = { ...definition, external: true };\n    externalOps[name] = handler;\n  });\n}\n\nfunction removeExternalOperations(functions: ExternalFunction[]) {\n  functions.forEach(({ name }) => {\n    delete ops[name];\n    delete externalOps[name];\n  });\n}\n\nfunction innerInvoke(\n  ctx: Ctx,\n  closure: () => InvokeError[] | undefined,\n): InvokeResult {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  ingestExternalOperations(ctx.functions);\n  const errors = closure();\n  removeExternalOperations(ctx.functions);\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\n  delete ctx.env.funcs[\"entry\"];\n  const value = stack.pop();\n  [stack, lets] = [[], []];\n  return errors\n    ? { kind: \"errors\", errors }\n    : value\n    ? { kind: \"val\", value }\n    : { kind: \"empty\" };\n}\n\n/**\n * Parses and executes the given code.\n * @param ctx An environment context you retain.\n * @param code The code to parse and execute.\n * @param invokeId A unique ID referenced in invocation errors.\n * @param printResult Automatically print the final value of this invocation?\n * @returns Invocation errors caused during execution of the code,\n * or the final value of the invocation.\n */\nexport function invoke(\n  ctx: Ctx,\n  code: string,\n  invokeId: string,\n  printResult = false,\n): InvokeResult {\n  const result = innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId));\n  if (printResult && result.kind === \"val\") {\n    ctx.print(val2str(result.value), true);\n  }\n  return result;\n}\n\n/**\n * Executes a user-defined Insitux function by name.\n * @param ctx An environment context you retain.\n * @param funcName The function to execute.\n * @param params The parameters to pass to the function.\n * @returns Invocation errors caused during execution of the function,\n * or the final value of the invocation,\n * or undefined if the function was not found.\n */\nexport function invokeFunction(\n  ctx: Ctx,\n  funcName: string,\n  params: Val[],\n): InvokeResult | undefined {\n  if (!(funcName in ctx.env.funcs)) {\n    return;\n  }\n  return innerInvoke(ctx, () => exeFunc(ctx, ctx.env.funcs[funcName], params));\n}\n\n/**\n * @param ctx An environment context you retain.\n * @param alsoSyntax To optionally include syntax symbols.\n * @returns List of symbols defined in Insitux, including built-in operations,\n * (optionally) syntax, constants, and user-defined functions.\n */\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\n  let syms = alsoSyntax\n    ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"when\", \"while\", \"match\", \"catch\"]\n    : [];\n  push(syms, [\"args\", \"PI\", \"E\"]);\n  syms = concat(syms, objKeys(ops));\n  syms = concat(syms, objKeys(ctx.env.funcs));\n  syms = concat(syms, objKeys(ctx.env.vars));\n  const hidden = [\"entry\"];\n  syms = syms.filter(o => !has(hidden, o));\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\n}\n","import { invoke } from \".\";\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\nimport { getTimeMs } from \"./poly-fills\";\nimport { Ctx } from \"./types\";\n\nexport type InvokeOutput = {\n  type: \"message\" | \"error\";\n  text: string;\n}[];\n\nconst invocations = new Map<string, string>();\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\n\nexport function invoker(ctx: Ctx, code: string, id?: string): InvokeOutput {\n  id = id ? `-${id}` : `${getTimeMs()}`;\n  invocations.set(id, code);\n  const valOrErrs = invoke(ctx, code, id, true);\n  if (valOrErrs.kind !== \"errors\") {\n    return [];\n  }\n  let out: InvokeOutput = [];\n  const msg = (text: string) => out.push({ type: \"message\", text });\n  const err = (text: string) => out.push({ type: \"error\", text });\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\n    const invocation = invocations.get(invokeId);\n    if (!invocation) {\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\n      return;\n    }\n    const lineText = invocation.split(\"\\n\")[line - 1];\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\n    const half1 = trimStart(substr(lineText, 0, col - 1));\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\n    if (!sym) {\n      const half2 = substr(lineText, col);\n      err(lineText[col - 1]);\n      msg(`${half2}\\n`);\n    } else {\n      const half2 = substr(lineText, col - 1 + slen(sym));\n      err(sym);\n      msg(`${half2}\\n`);\n    }\n    msg(`${e} Error: ${m}.\\n`);\n  });\n  return out;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","prefix","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","xor","rem","vec","dict","params","map","for","reduce","filter","remove","find","count","repeat","rand","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","recur","typeNames","null","bool","ref","func","clo","wild","ext","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","nullVal","falseVal","isToken","node","symAt","pos","arg","typ","text","node2str","nodes","n","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","shift","head","unshift","err","eCtx","parsed","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","acc","when","defs","d","lim","def","defIns","shape","errors","parseParams","pins","asStr","parsedParams","cins","forEach","captureIns","captured","ci","isExe","name","closureIns","ins","paramNames","param","position","consumeLast","errs","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","badArg","parse","code","invokeId","tokens","stringError","makeCollsOps","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","tree","_treeise","token","treeise","collected","entries","collectFuncs","namedNodes","nodeOrErr","fae","f","state","kind","set","exe","output","out","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","externalOps","recurArgs","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","monoArityError","getExe","ctx","checkArity","external","valOrErr","tErr","violations","sum","every","closure","arrays","lims","divisors","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","alen","newKey","destruct","inClosure","stackLen","tooManyLoops","last","paramIdx","nextCat","newCins","decl","numIns","captures","cap","printResult","handler","innerInvoke","invocations","parensRx","invoker","id","type","invocation","lineText","sym","half1","half2"],"sourceRoot":""}