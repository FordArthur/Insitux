{"version":3,"file":"repl.js","mappings":"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","sources":["webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/types.ts","webpack://insitux/external node-commonjs \"fs\"","webpack://insitux/external node-commonjs \"readline\"","webpack://insitux/webpack/bootstrap","webpack://insitux/./src/repl.ts"],"sourcesContent":["export const insituxVersion = 20210919;\r\nimport { arityCheck, parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, pi, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isArray, isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, ops, typeNames } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, InvokeError, Val } from \"./types\";\r\n\r\nconst val2str = ({ v, t }: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  switch (t) {\r\n    case \"bool\":\r\n      return `${v as boolean}`;\r\n    case \"num\":\r\n      return `${v as number}`;\r\n    case \"str\":\r\n    case \"key\":\r\n    case \"ref\":\r\n    case \"func\":\r\n      return v as string;\r\n    case \"vec\":\r\n      return `[${(v as Val[]).map(quoted).join(\" \")}]`;\r\n    case \"dict\": {\r\n      const { keys, vals } = v as Dict;\r\n      const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n      const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n      return `{${entries.join(\", \")}}`;\r\n    }\r\n    case \"null\":\r\n      return \"null\";\r\n  }\r\n  return assertUnreachable(t);\r\n};\r\n\r\nlet stack: Val[] = [];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v: string = \"\") => stack.push({ t: \"str\", v });\r\nconst _key = (v: string) => stack.push({ t: \"key\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\nconst num = ({ v }: Val) => v as number;\r\nconst str = ({ v }: Val) => v as string;\r\nconst vec = ({ v }: Val) => v as Val[];\r\nconst dic = ({ v }: Val) => v as Dict;\r\nconst asBoo = ({ t, v }: Val) => (t === \"bool\" ? (v as boolean) : t !== \"null\");\r\nexport const visStr = (val: Val): val is { t: \"str\"; v: string } =>\r\n  val.t === \"str\";\r\nexport const visNum = (val: Val): val is { t: \"num\"; v: number } =>\r\n  val.t === \"num\";\r\nexport const visVec = (val: Val): val is { t: \"vec\"; v: Val[] } =>\r\n  val.t === \"vec\";\r\nexport const visDic = (val: Val): val is { t: \"dict\"; v: Dict } =>\r\n  val.t === \"dict\";\r\nexport const visFun = (val: Val): val is { t: \"func\"; v: string } =>\r\n  val.t === \"func\";\r\nexport const visKey = (val: Val): val is { t: \"key\"; v: string } =>\r\n  val.t === \"key\";\r\nexport const visBoo = (val: Val): val is { t: \"bool\"; v: boolean } =>\r\n  val.t == \"bool\";\r\n\r\nconst asArray = ({ t, v }: Val): Val[] =>\r\n  t === \"vec\"\r\n    ? slice(v as Val[])\r\n    : t === \"str\"\r\n    ? [...(v as string)].map(s => ({ t: \"str\", v: s }))\r\n    : t === \"dict\"\r\n    ? (v as Dict).keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, (v as Dict).vals[i]],\r\n      }))\r\n    : [];\r\n\r\nconst stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nconst typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nconst isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nconst isDictEqual = (a: Val, b: Val): boolean => {\r\n  const [ad, bd] = [dic(a), dic(b)];\r\n  return len(ad.keys) === len(bd.keys) && isVecEqual(ad.keys, bd.keys);\r\n};\r\n\r\nconst isEqual = (a: Val, b: Val) => {\r\n  const { t } = a;\r\n  switch (t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return num(a) === num(b);\r\n    case \"vec\":\r\n      return isVecEqual(vec(a), vec(b));\r\n    case \"dict\":\r\n      return isDictEqual(a, b);\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n  }\r\n  return assertUnreachable(t);\r\n};\r\n\r\nconst dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nconst dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nconst dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nfunction typeCheck(op: string, args: Val[], errCtx: ErrCtx) {\r\n  const { types, onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(a => a.t !== \"num\");\r\n    if (nonNumArgIdx === -1) {\r\n      return [];\r\n    }\r\n    const typeName = typeNames[args[nonNumArgIdx].t];\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${typeName}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return [];\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg) {\r\n        return false;\r\n      }\r\n      const argType = args[i].t;\r\n      const badType = typeNames[argType];\r\n      return isArray(need)\r\n        ? has(need, argType)\r\n          ? false\r\n          : `argument ${i + 1} must be either: ${need\r\n              .map(t => typeNames[t])\r\n              .join(\", \")}, not ${badType}`\r\n        : need === argType\r\n        ? false\r\n        : `argument ${i + 1} must be ${typeNames[need]}, not ${badType}`;\r\n    })\r\n    .filter(r => !!r);\r\n  return typeViolations.map(v => typeErr(<string>v, errCtx));\r\n}\r\n\r\nasync function exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): Promise<InvokeError[]> {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(op, args, errCtx);\r\n    if (len(violations)) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"execute-last\":\r\n      return await getExe(ctx, args.pop()!, errCtx)(args);\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return [];\r\n    case \"print\":\r\n    case \"print-str\":\r\n      {\r\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\r\n        _nul();\r\n      }\r\n      return [];\r\n    case \"vec\":\r\n      _vec(args);\r\n      return [];\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return [];\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(str(args[0]))\r\n          : args[0].t === \"vec\"\r\n          ? len(vec(args[0]))\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return [];\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return [];\r\n    case \"to-key\":\r\n      _key(`:${val2str(args[0])}`);\r\n      return [];\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return [];\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return [];\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return [];\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return [];\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return [];\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return [];\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return [];\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return [];\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return [];\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return [];\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return [];\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return [];\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return [];\r\n        }\r\n      }\r\n      _boo(true);\r\n      return [];\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return [];\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return [];\r\n    case \"abs\":\r\n      _num(abs(num(args[0])));\r\n      return [];\r\n    case \"pi\":\r\n      _num(pi);\r\n      return [];\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"round\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, round, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return [];\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return [];\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return [];\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && args[0].t === \"func\"),\r\n      );\r\n      return [];\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return [];\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(str(args[0]), str(args[1]));\r\n        } else {\r\n          const arr = str(args[0]).split(\"\");\r\n          arr[num(args[2])] = str(args[1]);\r\n          _str(arr.join(\"\"));\r\n          return [];\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = vec(args[0]).findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = asArray(args[0]);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return [];\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return [];\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n      {\r\n        const closure = getExe(ctx, args.shift()!, errCtx);\r\n        const okT = (t: Val[\"t\"]) => t === \"vec\" || t === \"str\" || t === \"dict\";\r\n        const badArg =\r\n          op === \"map\" || op === \"for\"\r\n            ? args.findIndex(({ t }) => !okT(t))\r\n            : okT(args[0].t)\r\n            ? -1\r\n            : 0;\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument 2 must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n\r\n        if (op === \"for\") {\r\n          const arrays = args.map(asArray);\r\n          const lims = arrays.map(len);\r\n          const divisors = lims.map((_, i) =>\r\n            slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n          );\r\n          divisors.unshift(1);\r\n          const lim = divisors.pop()!;\r\n          if (lim > ctx.loopBudget) {\r\n            return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n          }\r\n          const array: Val[] = [];\r\n          for (let t = 0; t < lim; ++t) {\r\n            const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n            const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n            if (len(errors)) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return [];\r\n        }\r\n\r\n        if (op === \"map\") {\r\n          const arrays = args.map(asArray);\r\n          const shortest = min(...arrays.map(a => len(a)));\r\n          const array: Val[] = [];\r\n          for (let i = 0; i < shortest; ++i) {\r\n            const errors = await closure(arrays.map(a => a[i]));\r\n            if (len(errors)) {\r\n              return errors;\r\n            }\r\n            array.push(stack.pop()!);\r\n          }\r\n          _vec(array);\r\n          return [];\r\n        }\r\n\r\n        const array = asArray(args.shift()!);\r\n        const isRemove = op === \"remove\";\r\n        if (op === \"filter\" || isRemove) {\r\n          const filtered: Val[] = [];\r\n          for (let i = 0, lim = len(array); i < lim; ++i) {\r\n            const errors = await closure([array[i], ...args]);\r\n            if (len(errors)) {\r\n              return errors;\r\n            }\r\n            if (asBoo(stack.pop()!) !== isRemove) {\r\n              filtered.push(array[i]);\r\n            }\r\n          }\r\n          _vec(filtered);\r\n          return [];\r\n        }\r\n\r\n        if (len(array) < 2) {\r\n          push(stack, array);\r\n          return [];\r\n        }\r\n        let reduction: Val = (len(args) ? args : array).shift()!;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = await closure([reduction, array[i]]);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          reduction = stack.pop()!;\r\n        }\r\n        stack.push(reduction);\r\n      }\r\n      return [];\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return [];\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return [];\r\n    case \"..\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      return await closure(flat(args.map(a => (a.t === \"vec\" ? vec(a) : [a]))));\r\n    }\r\n    case \"into\": {\r\n      const a0v = args[0].t === \"vec\";\r\n      const a1v = args[1].t === \"vec\";\r\n      if (a0v) {\r\n        _vec(concat(vec(args[0]), a1v ? vec(args[1]) : asArray(args[1])));\r\n      } else {\r\n        if (a1v) {\r\n          const v1 = asArray(args[1]);\r\n          stack.push(toDict(concat(flat(asArray(args[0]).map(vec)), v1)));\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return [];\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = vec(args[0]);\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return [];\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const isVec = v.t === \"vec\";\r\n      const vlen = isVec ? len(vec(v)) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (isVec ? _vec : _str)();\r\n        return [];\r\n      }\r\n      if (isVec) {\r\n        _vec(slice(vec(v), a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return [];\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return [];\r\n    case \"sort\": {\r\n      if (!len(vec(args[0]))) {\r\n        _vec();\r\n        return [];\r\n      }\r\n      const src = asArray(args[0]);\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = await closure([src[i]]);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (visNum(mapped[0][1])) {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return [];\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return [];\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"range budget depleted\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return [];\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return [];\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return [];\r\n    case \"split\":\r\n      _vec(\r\n        str(args[0])\r\n          .split(len(args) > 1 ? str(args[1]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return [];\r\n    case \"join\":\r\n      _str(\r\n        vec(args[0])\r\n          .map(val2str)\r\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\r\n      );\r\n      return [];\r\n    case \"starts-with?\":\r\n      _boo(starts(str(args[0]), str(args[1])));\r\n      return [];\r\n    case \"ends-with?\":\r\n      _boo(ends(str(args[0]), str(args[1])));\r\n      return [];\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return [];\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(num(args[1]), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return [];\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return [];\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return [];\r\n    case \"tests\":\r\n      {\r\n        const tests = await doTests(invoke, !(len(args) && asBoo(args[0])));\r\n        const summary = tests.pop()!;\r\n        for (const test of tests) {\r\n          await exeOp(\"print\", [{ v: test, t: \"str\" }], ctx, errCtx, false);\r\n        }\r\n        _str(summary);\r\n      }\r\n      return [];\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return [];\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const errors = await parseAndExe(ctx, str(args[0]), errCtx.invocationId);\r\n      if (len(errors)) {\r\n        errors.forEach(e => {\r\n          e.errCtx.invocationId = \"evaluated\";\r\n        });\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return [];\r\n    }\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      ctx.env.lets = [];\r\n      _nul();\r\n      return [];\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => Promise<InvokeError[]> {\r\n  const monoArityError = [{ e: \"Arity\", m: `one argument required`, errCtx }];\r\n  if (visStr(op) || visFun(op)) {\r\n    const str = op.v;\r\n    if (ops[str]) {\r\n      return (params: Val[]) => exeOp(str, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (str in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[str], params);\r\n    }\r\n    if (str in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[str], errCtx);\r\n    }\r\n    if (str in ctx.env.lets[len(ctx.env.lets) - 1]) {\r\n      return getExe(ctx, ctx.env.lets[len(ctx.env.lets) - 1][str], errCtx);\r\n    }\r\n    if (starts(str, \"$\")) {\r\n      return async (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = await ctx.set(substr(str, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : [];\r\n      };\r\n    }\r\n    return async (params: Val[]) => {\r\n      const { err, value } = await ctx.exe(str, params);\r\n      if (!err) {\r\n        stack.push(value);\r\n      }\r\n      return err ? [{ e: \"External\", m: err, errCtx }] : [];\r\n    };\r\n  } else if (visKey(op)) {\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t !== \"dict\") {\r\n        const badType = typeNames[params[0].t];\r\n        return [\r\n          typeErr(\r\n            `keyword as operation argument must be dictionary, not ${badType}`,\r\n            errCtx,\r\n          ),\r\n        ];\r\n      }\r\n      stack.push(dictGet(dic(params[0]), op));\r\n      return [];\r\n    };\r\n  } else if (visNum(op)) {\r\n    const n = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        const badType = typeNames[a.t];\r\n        return [\r\n          typeErr(\r\n            `number as operation argument must be string, vector, or dictionary, not ${badType}`,\r\n            errCtx,\r\n          ),\r\n        ];\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return [];\r\n    };\r\n  } else if (visVec(op)) {\r\n    const { v } = op;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return [];\r\n    };\r\n  } else if (visDic(op)) {\r\n    const dict = op.v;\r\n    return async (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dictionary as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return [];\r\n    };\r\n  } else if (visBoo(op)) {\r\n    const cond = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return [];\r\n    };\r\n  }\r\n  return async _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nexport async function exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n): Promise<InvokeError[]> {\r\n  --ctx.callBudget;\r\n  ctx.env.lets.push({});\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const { typ, value, errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (typ) {\r\n      case \"nul\":\r\n        _nul();\r\n        break;\r\n      case \"boo\":\r\n        _boo(value as boolean);\r\n        break;\r\n      case \"num\":\r\n        _num(value as number);\r\n        break;\r\n      case \"str\":\r\n        _str(value as string);\r\n        break;\r\n      case \"key\":\r\n        _key(value as string);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[value as string] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        ctx.env.lets[len(ctx.env.lets) - 1][value as string] =\r\n          stack[len(stack) - 1];\r\n        break;\r\n      case \"par\":\r\n        {\r\n          const paramIdx = value as number;\r\n          if (paramIdx === -1) {\r\n            _vec(args);\r\n          } else if (len(args) <= paramIdx) {\r\n            _nul();\r\n          } else {\r\n            stack.push(args[paramIdx]);\r\n          }\r\n        }\r\n        break;\r\n      case \"ref\":\r\n        {\r\n          const name = value as string;\r\n          if (ops[name]) {\r\n            _fun(name);\r\n          } else if (starts(name, \"$\")) {\r\n            const { value, err } = await ctx.get(substr(name, 1));\r\n            if (err) {\r\n              return [{ e: \"External\", m: err, errCtx }];\r\n            }\r\n            stack.push(value);\r\n          } else if (name in ctx.env.vars) {\r\n            stack.push(ctx.env.vars[name]);\r\n          } else if (name in ctx.env.lets[len(ctx.env.lets) - 1]) {\r\n            stack.push(ctx.env.lets[len(ctx.env.lets) - 1][name]);\r\n          } else if (name in ctx.env.funcs) {\r\n            _fun(name);\r\n          } else {\r\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n          }\r\n        }\r\n        break;\r\n      case \"op\":\r\n      case \"exe\":\r\n        {\r\n          let [op, nArgs] = value as [Val, number];\r\n          const params = splice(stack, len(stack) - nArgs, nArgs);\r\n          if (len(params) !== nArgs) {\r\n            return [{ e: \"Unexpected\", m: `${op} stack depleted`, errCtx }];\r\n          }\r\n          //Tail-call optimisation\r\n          if (i === lim - 1 && visStr(op) && op.v === func.name) {\r\n            ctx.env.lets[len(ctx.env.lets) - 1] = {};\r\n            i = -1;\r\n            args = params;\r\n            --ctx.recurBudget;\r\n            if (!ctx.recurBudget) {\r\n              return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n            }\r\n            continue;\r\n          }\r\n          const closure = getExe(ctx, op, errCtx, false);\r\n          const errors = await closure(params);\r\n          if (len(errors)) {\r\n            if (i + 1 !== lim && func.ins[i + 1].typ === \"cat\") {\r\n              ++i;\r\n              ctx.env.lets[len(ctx.env.lets) - 1][\"errors\"] = {\r\n                t: \"vec\",\r\n                v: errorsToDict(errors),\r\n              };\r\n              break;\r\n            }\r\n            return errors;\r\n          }\r\n        }\r\n        break;\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += value as number;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += value as number;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += value as number;\r\n        break;\r\n      case \"loo\":\r\n        i += value as number;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - (value as number), value as number);\r\n        break;\r\n      case \"ret\":\r\n        if (value as boolean) {\r\n          splice(stack, 0, len(stack) - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      default:\r\n        assertUnreachable(typ);\r\n    }\r\n  }\r\n  ctx.env.lets.pop();\r\n  return [];\r\n}\r\n\r\nasync function parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n): Promise<InvokeError[]> {\r\n  const parsed = parse(code, invocationId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return [];\r\n  }\r\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nexport async function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invocationId: string,\r\n  printResult = false,\r\n): Promise<InvokeError[]> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  const errors = await parseAndExe(ctx, code, invocationId);\r\n  ctx.env.lets = [];\r\n  ctx.callBudget = callBudget;\r\n  ctx.recurBudget = recurBudget;\r\n  ctx.loopBudget = loopBudget;\r\n  ctx.rangeBudget = rangeBudget;\r\n  delete ctx.env.funcs[\"entry\"];\r\n  if (!len(errors) && printResult && len(stack)) {\r\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(stack[len(stack) - 1]) }]);\r\n  }\r\n  stack = [];\r\n  return errors;\r\n}\r\n\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax ? [\"function\"] : [];\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"execute-last\", \"entry\"];\r\n  return syms.filter(o => !has(hidden, o));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type ErrorOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport async function invoker(ctx: Ctx, code: string): Promise<ErrorOutput> {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const errors = await invoke(ctx, code, uuid, true);\r\n  let out: ErrorOutput = [];\r\n  errors.forEach(({ e, m, errCtx: { line, col, invocationId } }) => {\r\n    const invocation = invocations.get(invocationId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + sym.length);\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n","import * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ErrCtx, Func, Funcs, Ins, InvokeError, ops } from \"./types\";\r\nimport { assertUnreachable } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"ref\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Omit<Ins, \"typ\"> & { typ: Ins[\"typ\"] | \"def\" | \"err\" };\r\n\r\nfunction tokenise(code: string, invocationId: string) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { invocationId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invocationId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text, errCtx });\r\n        if (c === \"[\") {\r\n          tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n        } else if (c === \"{\") {\r\n          tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inSymbol = !inNumber;\r\n      let typ: \"sym\" | \"num\" | \"ref\" = inSymbol ? \"sym\" : \"num\";\r\n      if (len(tokens)) {\r\n        const { typ: t, text } = tokens[len(tokens) - 1];\r\n        if (t === \"sym\" && (text === \"var\" || text === \"let\")) {\r\n          typ = \"ref\";\r\n        }\r\n      }\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseWholeArg(tokens: Token[], params: string[]) {\r\n  const body: ParserIns[] = [];\r\n  while (true) {\r\n    const exp = parseArg(tokens, params);\r\n    if (!len(exp)) {\r\n      break;\r\n    }\r\n    push(body, exp);\r\n  }\r\n  return body;\r\n}\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseForm(tokens: Token[], params: string[]): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\r\n  if (op === \"catch\") {\r\n    if (tokens[0].typ !== \"(\") {\r\n      return err(\"first argument must be expression\");\r\n    }\r\n    const body = parseArg(tokens, params);\r\n    const when = parseWholeArg(tokens, params);\r\n    if (!len(body) || !len(when)) {\r\n      return err(\"must provide 2 arguments\");\r\n    }\r\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const [def, val] = [parseArg(tokens, params), parseArg(tokens, params)];\r\n    if (!len(def) || !len(val) || len(parseArg(tokens, params))) {\r\n      return err(\"must provide reference name and value only\");\r\n    }\r\n    return [...val, { typ: op, value: def[0].value, errCtx }];\r\n  } else if (op === \"if\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        if (len(parseArg(tokens, params))) {\r\n          return err(\"too many branches\");\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"nul\", value: undefined, errCtx });\r\n      }\r\n    } else {\r\n      const body = parseWholeArg(tokens, params);\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"nul\", value: undefined, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n    const args: ParserIns[][] = [];\r\n    let insCount = 0;\r\n    while (true) {\r\n      const arg = parseArg(tokens, params);\r\n      if (!len(arg)) {\r\n        break;\r\n      }\r\n      args.push(arg);\r\n      insCount += len(arg);\r\n    }\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"boo\", value: true, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"boo\", value: false, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"boo\", value: false, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  let args = 0;\r\n  //Head is a form or parameter\r\n  if (typ === \"(\" || has(params, text) || starts(text, \"#\")) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    push(headIns, ins);\r\n    op = \"execute-last\";\r\n    ++args;\r\n  }\r\n  const body: Ins[] = [];\r\n  while (len(tokens)) {\r\n    const parsed = parseArg(tokens, params);\r\n    if (!len(parsed)) {\r\n      break;\r\n    }\r\n    ++args;\r\n    push(body, parsed);\r\n  }\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n\r\n  //Operation arity check\r\n  if (ops[op]) {\r\n    const errors = arityCheck(op, args, errCtx);\r\n    if (errors) {\r\n      push(headIns, errors.map(e => err(e.m)[0]));\r\n    }\r\n  }\r\n\r\n  headIns.push({\r\n    typ: ops[op] ? \"op\" : \"exe\",\r\n    value: [\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op },\r\n      args,\r\n    ],\r\n    errCtx,\r\n  });\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction parseArg(tokens: Token[], params: string[]): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"str\", value: text, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"num\", value: toNum(text), errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [{ typ: \"boo\", value: text === \"true\", errCtx }];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"nul\", value: undefined, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"key\", value: text, errCtx }];\r\n      } else if (starts(text, \"#\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"nul\", errCtx }];\r\n        }\r\n        return [{ typ: \"par\", value, errCtx }];\r\n      } else if (has(params, text)) {\r\n        return [{ typ: \"par\", value: params.indexOf(text), errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"par\", value: -1, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"ref\":\r\n      return [{ typ: \"def\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params);\r\n    case \")\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\nfunction partitionWhen<T>(\r\n  array: T[],\r\n  predicate: (item: T) => boolean,\r\n): [T[], T[]] {\r\n  const a: T[] = [],\r\n    b: T[] = [];\r\n  for (let i = 0, isB = false; i < len(array); ++i) {\r\n    isB ||= predicate(array[i]);\r\n    (isB ? b : a).push(array[i]);\r\n  }\r\n  return [a, b];\r\n}\r\n\r\nfunction partition<T>(array: T[], predicate: (item: T) => boolean): [T[], T[]] {\r\n  const a: T[] = [],\r\n    b: T[] = [];\r\n  array.forEach(x => (predicate(x) ? b : a).push(x));\r\n  return [a, b];\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): {\r\n  func?: Func;\r\n  err?: InvokeError;\r\n} {\r\n  const [params, body] = partitionWhen(tokens, t => t.typ !== \"sym\");\r\n  //In the case of e.g. (function (+))\r\n  if (name === \"(\") {\r\n    return { err: { e: \"Parse\", m: \"nameless function\", errCtx } };\r\n  }\r\n  //In the case of e.g. (function)\r\n  if (!len(params) && !len(body)) {\r\n    return { err: { e: \"Parse\", m: \"empty function body\", errCtx } };\r\n  }\r\n  if (len(body) && body[0].typ === \")\") {\r\n    if (len(params)) {\r\n      //In the case of e.g. (function f #) or (function x y z)\r\n      body.unshift(params.pop()!);\r\n    } else {\r\n      //In the case of e.g. (function name)\r\n      return { err: { e: \"Parse\", m: \"empty function body\", errCtx } };\r\n    }\r\n  }\r\n  //In the case of e.g. (function entry x y z)\r\n  if (len(params) && !len(body)) {\r\n    body.push(params.pop()!);\r\n  }\r\n  const ins: ParserIns[] = [];\r\n  while (len(body)) {\r\n    push(\r\n      ins,\r\n      parseArg(\r\n        body,\r\n        params.map(p => p.text),\r\n      ),\r\n    );\r\n  }\r\n  const parseErrors = ins.filter(i => i.typ === \"err\");\r\n  if (len(parseErrors)) {\r\n    return {\r\n      err: {\r\n        e: \"Parse\",\r\n        m: <string>parseErrors[0].value,\r\n        errCtx: parseErrors[0].errCtx,\r\n      },\r\n    };\r\n  }\r\n  return { func: { name, ins: <Ins[]>ins } };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction errorDetect(\r\n  stringError: number[] | undefined,\r\n  tokens: Token[],\r\n  invocationId: string,\r\n) {\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invocationId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invocationId, line, col });\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invocationId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invocationId);\r\n  const errors = errorDetect(stringError, tokens, invocationId);\r\n  if (len(errors)) {\r\n    return { errors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      invocationId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const [funcArr, synErrors] = partition(funcsAndErrors, fae => !!fae.err);\r\n  push(\r\n    errors,\r\n    synErrors.map(fae => fae.err!),\r\n  );\r\n  const funcs: Funcs = {};\r\n  funcArr.forEach(({ func }) => (funcs[func!.name] = func!));\r\n  return { errors, funcs };\r\n}\r\n","export const toNum = (x: unknown): number => Number(x);\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const pi = Math.PI;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, ExternalError, InvokeError, Val, ValAndErr } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nasync function get(state: State, key: string): Promise<ValAndErr> {\r\n  if (!state.dict.has(key)) {\r\n    return { value: { t: \"null\", v: undefined }, err: `\"${key} not found.` };\r\n  }\r\n  return { value: state.dict.get(key)!, err: undefined };\r\n}\r\n\r\nasync function set(\r\n  state: State,\r\n  key: string,\r\n  val: Val,\r\n): Promise<ExternalError> {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nasync function exe(\r\n  state: State,\r\n  name: string,\r\n  args: Val[],\r\n): Promise<ValAndErr> {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"print-str\":\r\n      state.output += args[0].v;\r\n      break;\r\n    case \"print\":\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { value: nullVal, err: \"operation does not exist\" };\r\n  }\r\n  return { value: nullVal, err: undefined };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `(:age {:name \"Patrick\" :age 24})`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543215`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (+ 1 :a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 #)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + #) (len #)) #1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (tail-call optim)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (dedupe (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes 1\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\", \"Parse\"],\r\n  },\r\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport async function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invocationId: string,\r\n    print: boolean,\r\n  ) => Promise<InvokeError[]>,\r\n  terse: boolean = true,\r\n): Promise<string[]> {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {}, lets: [] };\r\n    const startTime = getTimeMs();\r\n    const errors = await invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      \"testing\",\r\n      true,\r\n    );\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [testNum, testName, testElapsed, testErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${testNum} ${testName} ${testElapsed} ${okOut} ${testErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`----- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","export type Val = {\r\n  v: Val[] | Dict | undefined | string | number | boolean | Func;\r\n  t: \"null\" | \"str\" | \"num\" | \"bool\" | \"key\" | \"ref\" | \"vec\" | \"dict\" | \"func\";\r\n};\r\n\r\nexport type ErrCtx = { invocationId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ExternalError = undefined | string;\r\nexport type ValAndErr = { value: Val; err?: ExternalError };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n  lets: { [key: string]: Val }[];\r\n};\r\n\r\nexport type Ctx = {\r\n  set: (key: string, val: Val) => Promise<ExternalError>;\r\n  get: (key: string) => Promise<ValAndErr>;\r\n  exe: (name: string, args: Val[]) => Promise<ValAndErr>;\r\n  env: Env;\r\n  loopBudget: number;\r\n  rangeBudget: number;\r\n  callBudget: number;\r\n  recurBudget: number;\r\n};\r\n\r\nexport type InsType =\r\n  | \"nul\"\r\n  | \"boo\"\r\n  | \"num\"\r\n  | \"str\"\r\n  | \"key\"\r\n  | \"par\"\r\n  | \"var\"\r\n  | \"let\"\r\n  | \"ref\"\r\n  | \"op\"\r\n  | \"exe\"\r\n  | \"if\"\r\n  | \"jmp\" //Inexpensive jump\r\n  | \"loo\" //Expensive jump\r\n  | \"pop\" //Truncate stack\r\n  | \"or\"\r\n  | \"ret\"\r\n  | \"cat\";\r\nexport type Ins = {\r\n  typ: InsType;\r\n  value?: unknown;\r\n  errCtx: ErrCtx;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: {\r\n    minArity?: number;\r\n    maxArity?: number;\r\n    exactArity?: number;\r\n    onlyNum?: boolean;\r\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  };\r\n} = {\r\n  print: {},\r\n  \"print-str\": {},\r\n  \"execute-last\": {},\r\n  \"!\": { exactArity: 1 },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, onlyNum: true },\r\n  \"-\": { minArity: 1, onlyNum: true },\r\n  \"*\": { minArity: 2, onlyNum: true },\r\n  \"/\": { minArity: 2, onlyNum: true },\r\n  \"//\": { minArity: 2, onlyNum: true },\r\n  \"**\": { minArity: 1, onlyNum: true },\r\n  \"<\": { minArity: 2, onlyNum: true },\r\n  \">\": { minArity: 2, onlyNum: true },\r\n  \"<=\": { minArity: 2, onlyNum: true },\r\n  \">=\": { minArity: 2, onlyNum: true },\r\n  inc: { exactArity: 1, onlyNum: true },\r\n  dec: { exactArity: 1, onlyNum: true },\r\n  min: { minArity: 2, onlyNum: true },\r\n  max: { minArity: 2, onlyNum: true },\r\n  abs: { exactArity: 1, onlyNum: true },\r\n  pi: { exactArity: 0 },\r\n  sqrt: { exactArity: 1, onlyNum: true },\r\n  round: { exactArity: 1, onlyNum: true },\r\n  floor: { exactArity: 1, onlyNum: true },\r\n  ceil: { exactArity: 1, onlyNum: true },\r\n  logn: { exactArity: 1, onlyNum: true },\r\n  log2: { exactArity: 1, onlyNum: true },\r\n  log10: { exactArity: 1, onlyNum: true },\r\n  \"odd?\": { exactArity: 1, onlyNum: true },\r\n  \"even?\": { exactArity: 1, onlyNum: true },\r\n  \"pos?\": { exactArity: 1, onlyNum: true },\r\n  \"neg?\": { exactArity: 1, onlyNum: true },\r\n  \"zero?\": { exactArity: 1, onlyNum: true },\r\n  \"null?\": { exactArity: 1 },\r\n  \"num?\": { exactArity: 1 },\r\n  \"bool?\": { exactArity: 1 },\r\n  \"str?\": { exactArity: 1 },\r\n  \"vec?\": { exactArity: 1 },\r\n  \"dict?\": { exactArity: 1 },\r\n  \"key?\": { exactArity: 1 },\r\n  \"func?\": { exactArity: 1 },\r\n  rem: { minArity: 2, onlyNum: true },\r\n  sin: { exactArity: 1, onlyNum: true },\r\n  cos: { exactArity: 1, onlyNum: true },\r\n  tan: { exactArity: 1, onlyNum: true },\r\n  vec: {},\r\n  dict: {},\r\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\r\n  \"to-num\": { exactArity: 1, types: [[\"str\", \"num\"]] },\r\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]] },\r\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]] },\r\n  map: { minArity: 2 },\r\n  for: { minArity: 2 },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: { minArity: 2 },\r\n  remove: { minArity: 2 },\r\n  str: {},\r\n  rand: { maxArity: 2, onlyNum: true },\r\n  \"rand-int\": { maxArity: 2, onlyNum: true },\r\n  while: {},\r\n  \"..\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    types: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n  },\r\n  push: { minArity: 2, maxArity: 3, types: [[\"vec\", \"dict\"]] },\r\n  sect: { minArity: 1, maxArity: 3, types: [[\"vec\", \"str\"], \"num\", \"num\"] },\r\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]] },\r\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"] },\r\n  keys: { exactArity: 1, types: [\"dict\"] },\r\n  vals: { exactArity: 1, types: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, types: [\"num\", \"num\", \"num\"] },\r\n  \"empty?\": { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]] },\r\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"] },\r\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"] },\r\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"] },\r\n  \"lower-case\": { exactArity: 1, types: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, types: [\"str\"] },\r\n  trim: { exactArity: 1, types: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, types: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, types: [\"str\"] },\r\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"] },\r\n  time: { exactArity: 0 },\r\n  version: { exactArity: 0 },\r\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"] },\r\n  symbols: { exactArity: 0 },\r\n  eval: { exactArity: 1, types: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","module.exports = require(\"fs\");","module.exports = require(\"readline\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import readline = require(\"readline\");\r\nimport fs = require(\"fs\");\r\nimport { symbols, visStr } from \".\";\r\nimport { Ctx, Val, ValAndErr } from \"./types\";\r\nimport { ErrorOutput, invoker, parensRx } from \"./invoker\";\r\nconst env = new Map<string, Val>();\r\n\r\nasync function get(key: string) {\r\n  return env.has(key)\r\n    ? { value: env.get(key)!, err: undefined }\r\n    : {\r\n        value: <Val>{ v: undefined, t: \"null\" },\r\n        err: `key ${key} not found`,\r\n      };\r\n}\r\n\r\nasync function set(key: string, val: Val) {\r\n  env.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nconst ctx: Ctx = {\r\n  env: { funcs: {}, vars: {}, lets: [] },\r\n  get,\r\n  set,\r\n  exe,\r\n  loopBudget: 10000,\r\n  rangeBudget: 1000,\r\n  callBudget: 100000000,\r\n  recurBudget: 10000,\r\n};\r\n\r\nasync function exe(name: string, args: Val[]): Promise<ValAndErr> {\r\n  const nullVal: Val = { v: undefined, t: \"null\" };\r\n  switch (name) {\r\n    case \"print\":\r\n    case \"print-str\":\r\n      process.stdout.write(`\\x1b[32m${args[0].v}\\x1b[0m`);\r\n      if (name === \"print\") {\r\n        process.stdout.write(\"\\n\");\r\n      }\r\n      break;\r\n    case \"read\": {\r\n      const path = args[0].v as string;\r\n      if (!fs.existsSync(path)) {\r\n        return { value: nullVal };\r\n      }\r\n      return {\r\n        value: { t: \"str\", v: fs.readFileSync(path).toString() },\r\n      };\r\n    }\r\n    default:\r\n      if (args.length) {\r\n        const a = args[0];\r\n        if (visStr(a) && a.v.startsWith(\"$\")) {\r\n          if (args.length === 1) {\r\n            return await get(`${a.v.substring(1)}.${name}`);\r\n          } else {\r\n            await set(`${a.v.substring(1)}.${name}`, args[1]);\r\n            return { value: args[1] };\r\n          }\r\n        }\r\n      }\r\n      return { value: nullVal, err: `operation ${name} does not exist` };\r\n  }\r\n  return { value: nullVal };\r\n}\r\n\r\nfunction completer(line: string) {\r\n  const input = line.split(parensRx).pop();\r\n  const completions = symbols(ctx);\r\n  if (!input) {\r\n    return [completions, \"\"];\r\n  }\r\n  const hits = completions.filter(c => c.startsWith(input));\r\n  return [hits.length ? hits : completions, input];\r\n}\r\n\r\nconst rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n  prompt: \"> \",\r\n  completer,\r\n  history: fs.existsSync(\".repl-history\")\r\n    ? fs.readFileSync(\".repl-history\").toString().split(\"\\n\").reverse()\r\n    : [],\r\n});\r\n\r\nrl.on(\"line\", async line => {\r\n  if (line === \"quit\") {\r\n    rl.close();\r\n    return;\r\n  }\r\n  if (line.trim()) {\r\n    fs.appendFileSync(\".repl-history\", `\\n${line}`);\r\n    printErrorOutput(await invoker(ctx, line));\r\n  }\r\n  rl.prompt();\r\n});\r\n\r\nrl.prompt();\r\n\r\nfunction printErrorOutput(lines: ErrorOutput) {\r\n  const colours = { error: 31, message: 35 };\r\n  lines.forEach(({ type, text }) => {\r\n    process.stdout.write(`\\x1b[${colours[type]}m${text}\\x1b[0m`);\r\n  });\r\n}\r\n"],"names":[],"sourceRoot":""}