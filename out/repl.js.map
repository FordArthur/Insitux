{"version":3,"file":"repl.js","mappings":"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","sources":["webpack://insitux/external node-commonjs \"fs\"","webpack://insitux/external node-commonjs \"readline\"","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/./src/repl.ts"],"sourcesContent":["module.exports = require(\"fs\");","module.exports = require(\"readline\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = (arr: unknown[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const pi = Math.PI;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;","export type Val =\n  | { t: \"vec\"; v: Val[] }\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\n  | { t: \"null\"; v: undefined }\n  | { t: \"bool\"; v: boolean }\n  | { t: \"num\"; v: number }\n  | { t: \"clo\"; v: Func }\n  | { t: \"dict\"; v: Dict };\n\nexport type ErrCtx = { invocationId: string; line: number; col: number };\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\nexport type ExternalError = undefined | string;\nexport type ValAndErr = { value: Val; err?: ExternalError };\n\nexport type Dict = {\n  keys: Val[];\n  vals: Val[];\n};\n\nexport type Func = {\n  name: string;\n  ins: Ins[];\n};\nexport type Funcs = { [key: string]: Func };\nexport type Env = {\n  funcs: Funcs;\n  vars: { [key: string]: Val };\n};\n\nexport type Ctx = {\n  set: (key: string, val: Val) => Promise<ExternalError>;\n  get: (key: string) => Promise<ValAndErr>;\n  exe: (name: string, args: Val[]) => Promise<ValAndErr>;\n  env: Env;\n  loopBudget: number;\n  rangeBudget: number;\n  callBudget: number;\n  recurBudget: number;\n};\n\nexport type Ins = { errCtx: ErrCtx } & (\n  | { typ: \"val\"; value: Val }\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\"; value: number } //number of instructions\n  | { typ: \"ret\"; value: boolean } //Return, with value?\n  | { typ: \"rec\"; value: number } //Recur, number of args\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\n);\n\nexport const ops: {\n  [name: string]: {\n    minArity?: number;\n    maxArity?: number;\n    exactArity?: number;\n    numeric?: true | \"in only\";\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\n    returns?: Val[\"t\"][];\n  };\n} = {\n  print: { returns: [\"null\"] },\n  \"print-str\": { returns: [\"null\"] },\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\n  \"=\": { minArity: 2 },\n  \"!=\": { minArity: 2 },\n  \"+\": { minArity: 2, numeric: true },\n  \"-\": { minArity: 1, numeric: true },\n  \"*\": { minArity: 2, numeric: true },\n  \"/\": { minArity: 2, numeric: true },\n  \"//\": { minArity: 2, numeric: true },\n  \"**\": { minArity: 1, numeric: true },\n  \"<\": { minArity: 2, numeric: true },\n  \">\": { minArity: 2, numeric: true },\n  \"<=\": { minArity: 2, numeric: true },\n  \">=\": { minArity: 2, numeric: true },\n  inc: { exactArity: 1, numeric: true },\n  dec: { exactArity: 1, numeric: true },\n  min: { minArity: 2, numeric: true },\n  max: { minArity: 2, numeric: true },\n  abs: { exactArity: 1, numeric: true },\n  pi: { exactArity: 0, numeric: true },\n  sqrt: { exactArity: 1, numeric: true },\n  round: { exactArity: 1, numeric: true },\n  floor: { exactArity: 1, numeric: true },\n  ceil: { exactArity: 1, numeric: true },\n  logn: { exactArity: 1, numeric: true },\n  log2: { exactArity: 1, numeric: true },\n  log10: { exactArity: 1, numeric: true },\n  and: { minArity: 1 },\n  or: { minArity: 1 },\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\n  rem: { minArity: 2, numeric: true },\n  sin: { exactArity: 1, numeric: true },\n  cos: { exactArity: 1, numeric: true },\n  tan: { exactArity: 1, numeric: true },\n  vec: { returns: [\"vec\"] },\n  dict: { returns: [\"dict\"] },\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\n  \"to-num\": {\n    exactArity: 1,\n    types: [[\"str\", \"num\"]],\n    returns: [\"num\", \"null\"],\n  },\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]], returns: [\"key\"] },\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]], returns: [\"num\"] },\n  map: { minArity: 2, returns: [\"vec\"] },\n  for: { minArity: 2, returns: [\"vec\"] },\n  reduce: { minArity: 2, maxArity: 3 },\n  filter: { minArity: 2, returns: [\"vec\"] },\n  remove: { minArity: 2, returns: [\"vec\"] },\n  find: { minArity: 2 },\n  count: { minArity: 2, returns: [\"num\"] },\n  str: { returns: [\"str\"] },\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\n  while: {},\n  \"..\": { minArity: 2 },\n  \"...\": { minArity: 2 },\n  into: {\n    exactArity: 2,\n    types: [\n      [\"vec\", \"dict\"],\n      [\"vec\", \"dict\"],\n    ],\n    returns: [\"vec\", \"dict\"],\n  },\n  push: {\n    minArity: 2,\n    maxArity: 3,\n    types: [[\"vec\", \"dict\"]],\n    returns: [\"vec\", \"dict\"],\n  },\n  sect: {\n    minArity: 1,\n    maxArity: 3,\n    types: [[\"vec\", \"str\"], \"num\", \"num\"],\n    returns: [\"vec\", \"str\"],\n  },\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"], returns: [\"vec\"] },\n  keys: { exactArity: 1, types: [\"dict\"] },\n  vals: { exactArity: 1, types: [\"dict\"] },\n  do: { minArity: 1 },\n  val: { minArity: 1 },\n  range: { minArity: 1, maxArity: 3, numeric: true },\n  \"empty?\": {\n    exactArity: 1,\n    types: [[\"str\", \"vec\", \"dict\"]],\n    returns: [\"bool\"],\n  },\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"], returns: [\"vec\"] },\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"], returns: [\"str\"] },\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"lower-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"upper-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  trim: { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"trim-start\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"trim-end\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"], returns: [\"str\"] },\n  time: { exactArity: 0, returns: [\"num\"] },\n  version: { exactArity: 0, returns: [\"num\"] },\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"], returns: [\"str\"] },\n  symbols: { exactArity: 0, returns: [\"vec\"] },\n  eval: { exactArity: 1, types: [\"str\"] },\n  reset: { exactArity: 0 },\n};\n\nexport const typeNames = {\n  null: \"null\",\n  str: \"string\",\n  num: \"number\",\n  bool: \"boolean\",\n  key: \"keyword\",\n  ref: \"reference\",\n  vec: \"vector\",\n  dict: \"dictionary\",\n  func: \"function\",\n  clo: \"closure\",\n};\n\nexport const assertUnreachable = (_x: never): never => <never>0;\n\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\n  e: \"Type\",\n  m,\n  errCtx,\n});\n\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n","import * as pf from \"./poly-fills\";\nconst { concat, has, flat, push, slice, splice } = pf;\nconst { slen, starts, sub, substr, strIdx } = pf;\nconst { isNum, len, toNum, isArray } = pf;\nimport { ErrCtx, Func, Funcs, Ins, ops, typeNames, Val } from \"./types\";\nimport { assertUnreachable } from \"./types\";\nimport { InvokeError, typeErr, keyOpErr, numOpErr } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype NamedTokens = {\n  name: string;\n  tokens: Token[];\n  errCtx: ErrCtx;\n};\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\nconst nullVal: Val = { t: \"null\", v: undefined };\n\nexport function tokenise(\n  code: string,\n  invocationId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const digits = \"0123456789\";\n  let inString = false,\n    isEscaped = false,\n    inStringAt = [0, 0],\n    inSymbol = false,\n    inNumber = false,\n    inComment = false,\n    line = 1,\n    col = 0;\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (inComment) {\n      if (c === \"\\n\") {\n        inComment = false;\n        ++line;\n        col = 0;\n      } else if (emitComments) {\n        tokens[len(tokens) - 1].text += c;\n      }\n      continue;\n    }\n    if (isEscaped) {\n      isEscaped = false;\n      if (inString) {\n        tokens[len(tokens) - 1].text +=\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\n      }\n      continue;\n    }\n    if (c === \"\\\\\") {\n      isEscaped = true;\n      continue;\n    }\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({\n          typ: \"str\",\n          text: \"\",\n          errCtx: { invocationId, line, col },\n        });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      inComment = true;\n      if (emitComments) {\n        tokens.push({\n          typ: \"rem\",\n          text: \"\",\n          errCtx: { invocationId, line, col },\n        });\n      }\n      continue;\n    }\n    const errCtx: ErrCtx = { invocationId, line, col };\n    const isDigit = (ch: string) => sub(digits, ch);\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or convert into symbol\n    if (inNumber && !isDigit(c)) {\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const parens: { [ch: string]: Token[\"typ\"] } = {\n          \"[\": \"(\",\n          \"{\": \"(\",\n          \"(\": \"(\",\n          \")\": \")\",\n          \"}\": \")\",\n          \"]\": \")\",\n        };\n        const text = parens[c]!;\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps) {\n          if (c === \"[\") {\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\n          } else if (c === \"{\") {\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\n          }\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inSymbol = !inNumber;\n      let typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\nfunction segment(tokens: Token[]): Token[][] {\n  const segments: Token[][] = [[]];\n  let depth = 0;\n  tokens.forEach(token => {\n    segments[len(segments) - 1].push(token);\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\n    if (depth === 0) {\n      segments.push([]);\n    }\n  });\n  return segments;\n}\n\nfunction funcise(segments: Token[][]): NamedTokens[] {\n  const isFunc = (segment: Token[]) =>\n    len(segment) > 1 &&\n    segment[1].typ === \"sym\" &&\n    segment[1].text === \"function\";\n  const funcs = segments.filter(t => isFunc(t));\n  const entries = flat(segments.filter(t => !isFunc(t)));\n  const described = funcs.map(tokens => ({\n    name: tokens[2].text,\n    tokens: slice(tokens, 3),\n    errCtx: tokens[2].errCtx,\n  }));\n  return len(entries)\n    ? concat(described, [\n        {\n          name: \"entry\",\n          tokens: entries,\n          errCtx: entries[0].errCtx,\n        },\n      ])\n    : described;\n}\n\nfunction parseAllArgs(tokens: Token[], params: string[]) {\n  const body: ParserIns[] = [];\n  while (true) {\n    const exp = parseArg(tokens, params);\n    if (!len(exp)) {\n      break;\n    }\n    push(body, exp);\n  }\n  return body;\n}\n\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\n  const { exactArity, maxArity, minArity } = ops[op];\n  const aErr = (msg: string, amount: number) => [\n    <InvokeError>{\n      e: \"Arity\",\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\n      errCtx,\n    },\n  ];\n  if (exactArity !== undefined) {\n    if (nArg !== exactArity) {\n      return aErr(`exactly ${exactArity}`, exactArity);\n    }\n  } else {\n    if (minArity && !maxArity && nArg < minArity) {\n      return aErr(`at least ${minArity}`, minArity);\n    } else if (!minArity && maxArity && nArg > maxArity) {\n      return aErr(`at most ${maxArity}`, maxArity);\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\n    }\n  }\n}\n\nexport function typeCheck(\n  op: string,\n  args: Val[\"t\"][][],\n  errCtx: ErrCtx,\n  optimistic = false,\n): InvokeError[] | undefined {\n  const { types, numeric: onlyNum } = ops[op];\n  const nArg = len(args);\n  if (onlyNum) {\n    const nonNumArgIdx = args.findIndex(\n      a => len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\n    );\n    if (nonNumArgIdx === -1) {\n      return;\n    }\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\n    return [\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\n    ];\n  }\n  if (!types) {\n    return;\n  }\n  const typeViolations = types\n    .map((need, i) => {\n      if (i >= nArg || !args[i]) {\n        return false;\n      }\n      const argTypes = args[i]!;\n      if (isArray(need)) {\n        if (\n          optimistic\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\n            : len(argTypes) === 1 && has(need, argTypes[0])\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        const needs = need.map(t => typeNames[t]).join(\", \");\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\n      } else {\n        if (\n          optimistic\n            ? !len(argTypes) || has(argTypes, need)\n            : len(argTypes) === 1 && need === argTypes[0]\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\n      }\n    })\n    .filter(r => !!r);\n  return len(typeViolations)\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\n    : undefined;\n}\n\nfunction parseForm(\n  tokens: Token[],\n  params: string[],\n  checkArity = true,\n): ParserIns[] {\n  const head = tokens.shift();\n  if (!head) {\n    return [];\n  }\n  const { typ, text, errCtx } = head;\n  let op = text;\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\n  if (op === \"catch\") {\n    if (tokens[0].typ !== \"(\") {\n      return err(\"argument 1 must be expression\");\n    }\n    const body = parseArg(tokens, params);\n    const when = parseAllArgs(tokens, params);\n    if (!len(body) || !len(when)) {\n      return err(\"must provide at least 2 arguments\");\n    }\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n  } else if (op === \"var\" || op === \"let\") {\n    const ins: Ins[] = [];\n    while (true) {\n      const defIns = parseArg(tokens, params);\n      if (len(ins) && !len(defIns)) {\n        return ins;\n      }\n      const val = parseArg(tokens, params);\n      if (!len(ins) && (!len(defIns) || !len(val))) {\n        return err(`must provide at least one declaration name and value`);\n      } else if (!len(val)) {\n        return err(`must provide a value after each declaration name`);\n      }\n      const def = defIns[0];\n      if (def.typ !== \"ref\") {\n        return err(\"declaration name must be symbol\");\n      }\n      push(ins, val);\n      ins.push({ typ: op, value: def.value, errCtx });\n    }\n  } else if (op === \"if\" || op === \"when\") {\n    const cond = parseArg(tokens, params);\n    if (!len(cond)) {\n      return err(\"must provide condition\");\n    }\n    const ins: ParserIns[] = cond;\n    if (op === \"if\") {\n      const ifT = parseArg(tokens, params);\n      if (!len(ifT)) {\n        return err(\"must provide a branch\");\n      }\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\n      push(ins, ifT);\n      const ifF = parseArg(tokens, params);\n      if (len(ifF)) {\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\n        push(ins, ifF);\n        if (len(parseArg(tokens, params))) {\n          return err(\"too many branches\");\n        }\n      } else {\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\n      }\n    } else {\n      const body = parseAllArgs(tokens, params);\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\n      push(ins, body);\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\n    }\n    return ins;\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\n    const args: ParserIns[][] = [];\n    let insCount = 0;\n    while (true) {\n      const arg = parseArg(tokens, params);\n      if (!len(arg)) {\n        break;\n      }\n      args.push(arg);\n      insCount += len(arg);\n    }\n    if (op === \"recur\") {\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\n    }\n    if (len(args) < 2) {\n      return err(\"requires at least two arguments\");\n    }\n    const ins: Ins[] = [];\n    if (op === \"while\") {\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\n      const head = args.shift()!;\n      push(ins, head);\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\n      args.forEach(as => push(ins, as));\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n      return ins;\n    }\n    insCount += len(args); //+1 for each if/or ins\n    insCount += toNum(op === \"and\");\n    const typ = op === \"and\" ? \"if\" : \"or\";\n    for (let a = 0; a < len(args); ++a) {\n      push(ins, args[a]);\n      insCount -= len(args[a]);\n      ins.push({ typ, value: insCount, errCtx });\n      --insCount;\n    }\n    if (op === \"and\") {\n      push(ins, [\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\n      ]);\n    } else {\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\n    }\n    return ins;\n  }\n  const headIns: Ins[] = [];\n  let nArgs = 0;\n  //Head is a form or parameter\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\n    tokens.unshift(head);\n    const ins = parseArg(tokens, params);\n    push(headIns, ins);\n  }\n  const body: Ins[] = [];\n  while (len(tokens)) {\n    const parsed = parseArg(tokens, params);\n    if (!len(parsed)) {\n      break;\n    }\n    ++nArgs;\n    push(body, parsed);\n  }\n  if (op === \"return\") {\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\n  }\n\n  //Operation arity check\n  if (ops[op] && checkArity) {\n    const errors = arityCheck(op, nArgs, errCtx);\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\n  }\n\n  if (len(headIns)) {\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  } else {\n    const value: Val =\n      typ === \"num\"\n        ? { t: \"num\", v: toNum(op) }\n        : starts(op, \":\")\n        ? { t: \"key\", v: op }\n        : ops[op]\n        ? { t: \"func\", v: op }\n        : op === \"true\" || op === \"false\"\n        ? { t: \"bool\", v: op === \"true\" }\n        : { t: \"str\", v: op };\n    headIns.push({ typ: \"val\", value, errCtx });\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  }\n  return [...body, ...headIns];\n}\n\nfunction parseArg(\n  tokens: Token[],\n  params: string[],\n  checkArity = true,\n): ParserIns[] {\n  if (!len(tokens)) {\n    return [];\n  }\n  const { typ, text, errCtx } = tokens.shift() as Token;\n  //Upon closure\n  if (\n    typ === \"sym\" &&\n    sub(\"#@\", text) &&\n    len(tokens) &&\n    tokens[0].typ === \"(\"\n  ) {\n    const texts = tokens.map(t => t.text);\n    const body = parseArg(tokens, params, text !== \"@\");\n    const err = body.find(t => t.typ === \"err\");\n    if (err) {\n      return [err];\n    }\n    const value: [string, Ins[]] = [\n      slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\n      <Ins[]>body,\n    ];\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\n  }\n  switch (typ) {\n    case \"str\":\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\n    case \"num\":\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\n    case \"sym\":\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(params, text)) {\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    case \"(\":\n      return parseForm(tokens, params, checkArity);\n    case \")\":\n    case \"rem\":\n      return [];\n    default:\n      return assertUnreachable(typ);\n  }\n}\n\nfunction partitionWhen<T>(\n  array: T[],\n  predicate: (item: T) => boolean,\n): [T[], T[]] {\n  const a: T[] = [],\n    b: T[] = [];\n  for (let i = 0, isB = false; i < len(array); ++i) {\n    isB ||= predicate(array[i]);\n    (isB ? b : a).push(array[i]);\n  }\n  return [a, b];\n}\n\nfunction syntaxise(\n  { name, tokens }: NamedTokens,\n  errCtx: ErrCtx,\n): [\"func\", Func] | [\"err\", InvokeError] {\n  const err = (m: string, eCtx = errCtx) =>\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\n  const [params, body] = partitionWhen(\n    tokens,\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\n  );\n  //In the case of e.g. (function (+))\n  if (name === \"(\") {\n    return err(\"nameless function\");\n  }\n  //In the case of e.g. (function)\n  if (!len(params) && !len(body)) {\n    return err(\"empty function body\");\n  }\n  if (len(body) && body[0].typ === \")\") {\n    if (len(params)) {\n      //In the case of e.g. (function f %) or (function x y z)\n      body.unshift(params.pop()!);\n    } else {\n      //In the case of e.g. (function name)\n      return err(\"empty function body\");\n    }\n  }\n  //In the case of e.g. (function entry x y z)\n  if (len(params) && !len(body)) {\n    body.push(params.pop()!);\n  }\n  const ins: ParserIns[] = [];\n  while (len(body)) {\n    push(\n      ins,\n      parseArg(\n        body,\n        params.map(p => p.text),\n      ),\n    );\n  }\n  const parseError = ins.find(i => i.typ === \"err\");\n  if (parseError) {\n    return err(<string>parseError.value, parseError.errCtx);\n  }\n  return [\"func\", { name, ins: <Ins[]>ins }];\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const invocationId = len(tokens) ? tokens[0].errCtx.invocationId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { invocationId, line, col });\n    }\n  }\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { invocationId, line, col });\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\nfunction insErrorDetect(fins: Ins[]): InvokeError[] {\n  type TypeInfo = {\n    types?: Val[\"t\"][];\n    val?: Val;\n  };\n  const stack: TypeInfo[] = [];\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\n    const ins = fins[i];\n    switch (ins.typ) {\n      case \"val\":\n        stack.push({ types: [ins.value.t], val: ins.value });\n        break;\n      case \"exe\": {\n        const head = stack.pop()!;\n        const args = splice(stack, len(stack) - ins.value, ins.value);\n        const badMatch = (okTypes: Val[\"t\"][]) =>\n          args.findIndex(\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\n          );\n        const headIs = (t: Val[\"t\"]) =>\n          head.val\n            ? head.val.t === t\n            : head.types && len(head.types) === 1 && head.types[0] === t;\n        if (head.val && head.val.t === \"func\") {\n          const errors = typeCheck(\n            head.val.v,\n            args.map(a => a.types ?? []),\n            ins.errCtx,\n            true,\n          );\n          if (errors) {\n            return errors;\n          }\n          const { returns, numeric: onlyNum } = ops[head.val.v];\n          stack.push(\n            onlyNum && onlyNum !== \"in only\"\n              ? { types: [\"num\"] }\n              : { types: returns },\n          );\n        } else if (headIs(\"num\")) {\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return numOpErr(ins.errCtx, args[badArg].types!);\n          }\n        } else if (headIs(\"key\")) {\n          const badArg = badMatch([\"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return keyOpErr(ins.errCtx, args[badArg].types!);\n          }\n        }\n        break;\n      }\n      case \"cat\":\n      case \"or\":\n      case \"var\":\n      case \"let\":\n      case \"loo\":\n        break;\n      case \"clo\":\n      case \"par\": {\n        const errors = insErrorDetect(ins.value[1]);\n        if (errors) {\n          return errors;\n        }\n      }\n      case \"ref\":\n      case \"npa\":\n      case \"upa\":\n        stack.push({});\n        break;\n      case \"if\":\n        stack.pop();\n        stack.push({});\n      case \"jmp\":\n        i += ins.value - (ins.typ === \"if\" ? 1 : 0);\n        break;\n      case \"pop\":\n      case \"rec\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          stack.pop();\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n  return [];\n}\n\nexport function parse(\n  code: string,\n  invocationId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, invocationId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const segments = segment(tokens);\n  const labelled = funcise(segments);\n  const funcsAndErrors = labelled.map(named =>\n    syntaxise(named, {\n      invocationId,\n      line: named.errCtx.line,\n      col: named.errCtx.col,\n    }),\n  );\n  const okFuncs: Func[] = [],\n    errors: InvokeError[] = [];\n  funcsAndErrors.forEach(fae => {\n    if (fae[0] === \"err\") {\n      errors.push(fae[1]);\n    } else {\n      okFuncs.push(fae[1]);\n    }\n  });\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins))));\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name] = func));\n  return { errors, funcs };\n}\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\nimport { Ctx, Env, ExternalError, InvokeError, Val, ValAndErr } from \"./types\";\n\ntype State = { dict: Map<string, Val>; output: string };\n\nasync function get(state: State, key: string): Promise<ValAndErr> {\n  if (!state.dict.has(key)) {\n    return { value: { t: \"null\", v: undefined }, err: `\"${key} not found.` };\n  }\n  return { value: state.dict.get(key)!, err: undefined };\n}\n\nasync function set(\n  state: State,\n  key: string,\n  val: Val,\n): Promise<ExternalError> {\n  state.dict.set(key, val);\n  return undefined;\n}\n\nasync function exe(\n  state: State,\n  name: string,\n  args: Val[],\n): Promise<ValAndErr> {\n  const nullVal: Val = { t: \"null\", v: undefined };\n  switch (name) {\n    case \"print-str\":\n      state.output += args[0].v;\n      break;\n    case \"print\":\n    case \"test.function\":\n      state.output += args[0].v + \"\\n\";\n      break;\n    default:\n      return { value: nullVal, err: `operation ${name} does not exist` };\n  }\n  return { value: nullVal, err: undefined };\n}\n\nconst tests: {\n  name: string;\n  code: string;\n  err?: string[];\n  out?: string;\n}[] = [\n  //Basic snippets\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\n  {\n    name: \"Say Hello, world!\",\n    code: `(print \"Hello, world!\")`,\n    out: `Hello, world!\\nnull`,\n  },\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\n  {\n    name: \"Whens\",\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\n    out: `hi\\n[234 null]`,\n  },\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\n  {\n    name: \"and & short-circuit\",\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\n    out: `[false true]`,\n  },\n  {\n    name: \"or & short-circuit\",\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\n    out: `-> [true 1]`,\n  },\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\n  {\n    name: \"Key as operation\",\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\n    out: `[24 :abc]`,\n  },\n  {\n    name: \"Dictionary as op 1\",\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 2\",\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\n  },\n  {\n    name: \"Equalities\",\n    code: `[(= 1 2 1)\n            (!= 1 2 1)\n            (= \"Hello\" \"hello\")\n            (!= \"world\" \"world\")\n            (= [0 [1]] [0 [1]])]`,\n    out: `[false 1 false false [0 [1]]]`,\n  },\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\n  {\n    name: \"Define num and call\",\n    code: `(var f 1) (f [:a :b :c])`,\n    out: `:b`,\n  },\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\n  {\n    name: \"Sum vector of numbers\",\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\n    out: `[6 9]`,\n  },\n  {\n    name: \"Sum vectors of numbers\",\n    code: `(map + [1 2 3] [1 2 3 4])`,\n    out: `[2 4 6]`,\n  },\n  {\n    name: \"Filter by integer\",\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\n    out: `[[:a :b :c] \"hello\"]`,\n  },\n  {\n    name: \"Comments, short decimal\",\n    code: `;((print \"Hello\")\n           .456`,\n    out: `0.456`,\n  },\n  {\n    name: \"Dictionary into vector\",\n    code: `(into [1 2] {3 4 5 6})`,\n    out: `[1 2 [3 4] [5 6]]`,\n  },\n  {\n    name: \"Vector into dictionary\",\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\n    out: `{[0] 2, [2] 3}`,\n  },\n  {\n    name: \"While loop\",\n    code: `(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))`,\n    out: `543210`,\n  },\n  {\n    name: \"Catch error\",\n    code: `(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print \"hi\"))`,\n    out: `Type`,\n  },\n  //Basic functions and closures\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\n  {\n    name: \"Call greet func\",\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\n    out: `Hello!\\nnull`,\n  },\n  {\n    name: \"Call const value func\",\n    code: `(function const 123) (const)`,\n    out: `123`,\n  },\n  {\n    name: \"Call identity funcs\",\n    code: `(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]`,\n    out: `[123 456]`,\n  },\n  {\n    name: \"Call greet with name\",\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\n           (greeting \"Patrick\")`,\n    out: `Hello, Patrick!\\nnull`,\n  },\n  {\n    name: \"Call with too few args\",\n    code: `(function func a b c [a b c]) (func 1 2)`,\n    out: `[1 2 null]`,\n  },\n  {\n    name: \"Define func and call\",\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Anonymous parameters\",\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)`,\n    out: `false`,\n  },\n  {\n    name: \"Call parameter\",\n    code: `(function f x (x \"hello\")) (f print)`,\n    out: `hello\\nnull`,\n  },\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\n  {\n    name: \"Let num op and call\",\n    code: `(function f (let n 0) (n [1])) (f)`,\n    out: `1`,\n  },\n  {\n    name: \"Explicit return\",\n    code: `(function f (return 123) (print 456)) (f)`,\n    out: `123`,\n  },\n  {\n    name: \"Closure 1\",\n    code: `(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)`,\n    out: `20`,\n  },\n  {\n    name: \"Closure 2\",\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\n    out: `[0 2 4 5 6 8]`,\n  },\n  {\n    name: \"Closure 3\",\n    code: `(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]`,\n    out: `[20 40]`,\n  },\n  {\n    name: \"Func returns closure\",\n    code: `(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)`,\n    out: `4`,\n  },\n  {\n    name: \"Dictionary closure\",\n    code: `(function f x #{x 2})\n           (let closure (f :a))\n           (closure)`,\n    out: `{:a 2}`,\n  },\n  {\n    name: \"Vector closure\",\n    code: `(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Closure as head\",\n    code: `(#[% %1 %2] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 1\",\n    code: `(@[] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  //Runtime errors\n  {\n    name: \"String instead of number\",\n    code: `(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 \"hi\")`,\n    out: `4`,\n    err: [\"Type\"],\n  },\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\n  {\n    name: \"Expired let retrieve\",\n    code: `(function f (let a 1) a) (f) a`,\n    err: [\"Reference\"],\n  },\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\n  {\n    name: \"Loop budget\",\n    code: `(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))`,\n    err: [\"Budget\"],\n  },\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\n  //Complex functions\n  {\n    name: \"Fibonacci 13\",\n    code: `(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)`,\n    out: `233`,\n  },\n  {\n    name: \"dedupe (recur)\",\n    code: `(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])`,\n    out: `[1 2 3]`,\n  },\n  //Test environment functions\n  {\n    name: \"set get\",\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\n    out: `[5.5 5.5]`,\n  },\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\n  //Syntax errors\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\n  {\n    name: \"Imbalanced quotes 1\",\n    code: `(print \"Hello)`,\n    err: [\"Parse\", \"Parse\"],\n  },\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\n  //Parser type-errors\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\n  {\n    name: \"Parser type error 2\",\n    code: `(function f (+ 1 (into {} {})))`,\n    err: [\"Type\"],\n  },\n];\n\nexport async function doTests(\n  invoke: (\n    ctx: Ctx,\n    code: string,\n    invocationId: string,\n    print: boolean,\n  ) => Promise<InvokeError[]>,\n  terse: boolean = true,\n): Promise<string[]> {\n  const results: {\n    okErr: boolean;\n    okOut: boolean;\n    elapsedMs: number;\n    display: string;\n  }[] = [];\n  for (let t = 0; t < len(tests); ++t) {\n    const { name, code, err, out } = tests[t];\n    const state: State = {\n      dict: new Map<string, Val>(),\n      output: \"\",\n    };\n    const env: Env = { funcs: {}, vars: {} };\n    const startTime = getTimeMs();\n    const errors = await invoke(\n      {\n        get: (key: string) => get(state, key),\n        set: (key: string, val: Val) => set(state, key, val),\n        exe: (name: string, args: Val[]) => exe(state, name, args),\n        env,\n        loopBudget: 10000,\n        rangeBudget: 1000,\n        callBudget: 1000,\n        recurBudget: 10000,\n      },\n      code,\n      \"testing\",\n      true,\n    );\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\n    const okOut = !out || trim(state.output) === out;\n    const elapsedMs = getTimeMs() - startTime;\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\n      padEnd(`${t + 1}`, 3),\n      padEnd(name, 24),\n      padEnd(`${elapsedMs}ms`, 6),\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\n      okErr ||\n        errors.map(\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\n        ),\n    ];\n    results.push({\n      okErr,\n      okOut,\n      elapsedMs,\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\n    });\n  }\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\n  return concat(\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\n  );\n}\n","export const insituxVersion = 20211008;\nimport { arityCheck, parse, typeCheck } from \"./parse\";\nimport * as pf from \"./poly-fills\";\nconst { abs, cos, sin, tan, pi, sign, sqrt, floor, ceil, round, max, min } = pf;\nconst { logn, log2, log10 } = pf;\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\nconst { trim, trimStart, trimEnd } = pf;\nconst { getTimeMs, randInt, randNum } = pf;\nconst { isNum, len, objKeys, range, toNum } = pf;\nimport { doTests } from \"./test\";\nimport { assertUnreachable, typeNames } from \"./types\";\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops } from \"./types\";\nimport { InvokeError, typeErr, numOpErr, keyOpErr } from \"./types\";\n\nconst val2str = ({ v, t }: Val): string => {\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\n  switch (t) {\n    case \"bool\":\n      return `${v as boolean}`;\n    case \"num\":\n      return `${v as number}`;\n    case \"str\":\n    case \"key\":\n    case \"ref\":\n    case \"func\":\n      return v as string;\n    case \"clo\":\n      return `#${(v as Func).name}`;\n    case \"vec\":\n      return `[${(v as Val[]).map(quoted).join(\" \")}]`;\n    case \"dict\": {\n      const { keys, vals } = v as Dict;\n      const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\n      const entries = ks.map((k, i) => `${k} ${vs[i]}`);\n      return `{${entries.join(\", \")}}`;\n    }\n    case \"null\":\n      return \"null\";\n  }\n  return assertUnreachable(t);\n};\n\nlet stack: Val[] = [];\nlet lets: { [key: string]: Val }[] = [];\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\nconst _num = (v: number) => stack.push({ t: \"num\", v });\nconst _str = (v: string = \"\") => stack.push({ t: \"str\", v });\nconst _key = (v: string) => stack.push({ t: \"key\", v });\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\nconst num = ({ v }: Val) => v as number;\nconst str = ({ v }: Val) => v as string;\nconst vec = ({ v }: Val) => v as Val[];\nconst dic = ({ v }: Val) => v as Dict;\nconst clo = ({ v }: Val) => v as Func;\nconst asBoo = ({ t, v }: Val) => (t === \"bool\" ? (v as boolean) : t !== \"null\");\n\nconst asArray = ({ t, v }: Val): Val[] =>\n  t === \"vec\"\n    ? slice(v as Val[])\n    : t === \"str\"\n    ? [...(v as string)].map(s => ({ t: \"str\", v: s }))\n    : t === \"dict\"\n    ? (v as Dict).keys.map((k, i) => ({\n        t: \"vec\",\n        v: [k, (v as Dict).vals[i]],\n      }))\n    : [];\n\nconst stringify = (vals: Val[]) =>\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\n\nconst toDict = (args: Val[]): Val => {\n  if (len(args) % 2 === 1) {\n    args.pop();\n  }\n  const keys = args.filter((_, i) => i % 2 === 0);\n  const vals = args.filter((_, i) => i % 2 === 1);\n  const ddKeys: Val[] = [],\n    ddVals: Val[] = [];\n  keys.forEach((key, i) => {\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\n    if (existingIdx === -1) {\n      ddKeys.push(key);\n      ddVals.push(vals[i]);\n    } else {\n      ddVals[existingIdx] = vals[i];\n    }\n  });\n  return {\n    t: \"dict\",\n    v: { keys: ddKeys, vals: ddVals },\n  };\n};\n\nconst isVecEqual = (a: Val[], b: Val[]): boolean =>\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\n\nconst isDictEqual = (a: Val, b: Val): boolean => {\n  const [ad, bd] = [dic(a), dic(b)];\n  return len(ad.keys) === len(bd.keys) && isVecEqual(ad.keys, bd.keys);\n};\n\nconst isEqual = (a: Val, b: Val) => {\n  const { t } = a;\n  switch (t) {\n    case \"null\":\n      return true;\n    case \"bool\":\n      return a.v === b.v;\n    case \"num\":\n      return num(a) === num(b);\n    case \"vec\":\n      return isVecEqual(vec(a), vec(b));\n    case \"dict\":\n      return isDictEqual(a, b);\n    case \"str\":\n    case \"ref\":\n    case \"key\":\n    case \"func\":\n      return str(a) === str(b);\n    case \"clo\":\n      return clo(a).name === clo(b).name;\n  }\n  return assertUnreachable(t);\n};\n\nconst dictGet = ({ keys, vals }: Dict, key: Val) => {\n  const idx = keys.findIndex(k => isEqual(k, key));\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\n};\n\nconst dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    nVals[idx] = val;\n  } else {\n    nKeys.push(key);\n    nVals.push(val);\n  }\n  return <Dict>{ keys: nKeys, vals: nVals };\n};\n\nconst dictDrop = ({ keys, vals }: Dict, key: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    splice(nKeys, idx, 1);\n    splice(nVals, idx, 1);\n  }\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\n};\n\nasync function exeOp(\n  op: string,\n  args: Val[],\n  ctx: Ctx,\n  errCtx: ErrCtx,\n  checkArity: boolean,\n): Promise<InvokeError[] | undefined> {\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\n  //Optional arity check\n  if (checkArity) {\n    const violations = arityCheck(op, len(args), errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n  //Argument type check\n  {\n    const violations = typeCheck(\n      op,\n      args.map(a => [a.t]),\n      errCtx,\n    );\n    if (violations) {\n      return violations;\n    }\n  }\n\n  switch (op) {\n    case \"str\":\n      stack.push({\n        t: \"str\",\n        v: stringify(args),\n      });\n      return;\n    case \"print\":\n    case \"print-str\":\n      {\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\n        _nul();\n      }\n      return;\n    case \"vec\":\n      _vec(args);\n      return;\n    case \"dict\": {\n      stack.push(toDict(args));\n      return;\n    }\n    case \"len\":\n      _num(\n        args[0].t === \"str\"\n          ? slen(str(args[0]))\n          : args[0].t === \"vec\"\n          ? len(vec(args[0]))\n          : len(dic(args[0]).keys),\n      );\n      return;\n    case \"to-num\":\n      if (isNum(args[0].v)) {\n        _num(toNum(args[0].v));\n      } else {\n        _nul();\n      }\n      return;\n    case \"to-key\":\n      _key(`:${val2str(args[0])}`);\n      return;\n    case \"!\":\n      _boo(!asBoo(args[0]));\n      return;\n    case \"=\":\n    case \"!=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\n          _boo(false);\n          return;\n        }\n      }\n      stack.push(args[0]);\n      return;\n    case \"-\":\n      _num(\n        len(args) === 1\n          ? -num(args[0])\n          : args.map(num).reduce((sum, n) => sum - n),\n      );\n      return;\n    case \"**\":\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\n      return;\n    case \"+\":\n      _num(args.map(num).reduce((sum, n) => sum + n));\n      return;\n    case \"*\":\n      _num(args.map(num).reduce((sum, n) => sum * n));\n      return;\n    case \"/\":\n      _num(args.map(num).reduce((sum, n) => sum / n));\n      return;\n    case \"//\":\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\n      return;\n    case \"rem\":\n      _num(args.map(num).reduce((sum, n) => sum % n));\n      return;\n    case \"min\":\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\n      return;\n    case \"max\":\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\n      return;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\n        if (\n          (op === \"<\" && a >= b) ||\n          (op === \">\" && a <= b) ||\n          (op === \"<=\" && a > b) ||\n          (op === \">=\" && a < b)\n        ) {\n          _boo(false);\n          return;\n        }\n      }\n      _boo(true);\n      return;\n    case \"inc\":\n      _num(<number>args[0].v + 1);\n      return;\n    case \"dec\":\n      _num(<number>args[0].v - 1);\n      return;\n    case \"abs\":\n      _num(abs(num(args[0])));\n      return;\n    case \"pi\":\n      _num(pi);\n      return;\n    case \"sin\":\n    case \"cos\":\n    case \"tan\":\n    case \"sqrt\":\n    case \"round\":\n    case \"floor\":\n    case \"ceil\":\n    case \"logn\":\n    case \"log2\":\n    case \"log10\":\n      _num(\n        { sin, cos, tan, sqrt, round, floor, ceil, logn, log2, log10 }[op](\n          num(args[0]),\n        ),\n      );\n      return;\n    case \"and\":\n      _boo(args.every(asBoo));\n      return;\n    case \"or\":\n      _boo(args.some(asBoo));\n      return;\n    case \"odd?\":\n    case \"even?\":\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\n      return;\n    case \"pos?\":\n    case \"neg?\":\n    case \"zero?\": {\n      const n = num(args[0]);\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\n      return;\n    }\n    case \"null?\":\n    case \"num?\":\n    case \"bool?\":\n    case \"str?\":\n    case \"dict?\":\n    case \"vec?\":\n    case \"key?\":\n    case \"func?\":\n      _boo(\n        (op === \"null?\" && args[0].t === \"null\") ||\n          (op === \"num?\" && args[0].t === \"num\") ||\n          (op === \"bool?\" && args[0].t === \"bool\") ||\n          (op === \"str?\" && args[0].t === \"str\") ||\n          (op === \"dict?\" && args[0].t === \"dict\") ||\n          (op === \"vec?\" && args[0].t === \"vec\") ||\n          (op === \"key?\" && args[0].t === \"key\") ||\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\n      );\n      return;\n    case \"has?\":\n      _boo(sub(str(args[0]), str(args[1])));\n      return;\n    case \"idx\": {\n      let i = -1;\n      if (args[0].t === \"str\") {\n        if (args[1].t !== \"str\") {\n          return tErr(\"strings can only contain strings\");\n        }\n        if (len(args) < 3) {\n          i = subIdx(str(args[0]), str(args[1]));\n        } else {\n          const arr = str(args[0]).split(\"\");\n          arr[num(args[2])] = str(args[1]);\n          _str(arr.join(\"\"));\n          return;\n        }\n      } else if (args[0].t === \"vec\") {\n        if (len(args) < 3) {\n          i = vec(args[0]).findIndex(a => isEqual(a, args[1]));\n        } else {\n          const v = asArray(args[0]);\n          v[num(args[2])] = args[1];\n          _vec(v);\n          return;\n        }\n      }\n      if (i === -1) {\n        _nul();\n      } else {\n        _num(i);\n      }\n      return;\n    }\n    case \"map\":\n    case \"for\":\n    case \"reduce\":\n    case \"filter\":\n    case \"remove\":\n    case \"find\":\n    case \"count\":\n      {\n        const closure = getExe(ctx, args.shift()!, errCtx);\n        const okT = (t: Val[\"t\"]) => t === \"vec\" || t === \"str\" || t === \"dict\";\n        const badArg =\n          op === \"map\" || op === \"for\"\n            ? args.findIndex(({ t }) => !okT(t))\n            : okT(args[0].t)\n            ? -1\n            : 0;\n        if (badArg !== -1) {\n          const badType = typeNames[args[badArg].t];\n          return tErr(\n            `argument 2 must be either: string, vector, dictionary, not ${badType}`,\n          );\n        }\n\n        if (op === \"for\") {\n          const arrays = args.map(asArray);\n          const lims = arrays.map(len);\n          const divisors = lims.map((_, i) =>\n            slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\n          );\n          divisors.unshift(1);\n          const lim = divisors.pop()!;\n          if (lim > ctx.loopBudget) {\n            return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\n          }\n          const array: Val[] = [];\n          for (let t = 0; t < lim; ++t) {\n            const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\n            const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\n            if (errors) {\n              return errors;\n            }\n            array.push(stack.pop()!);\n          }\n          _vec(array);\n          return;\n        }\n\n        if (op === \"map\") {\n          const arrays = args.map(asArray);\n          const shortest = min(...arrays.map(len));\n          const array: Val[] = [];\n          for (let i = 0; i < shortest; ++i) {\n            const errors = await closure(arrays.map(a => a[i]));\n            if (errors) {\n              return errors;\n            }\n            array.push(stack.pop()!);\n          }\n          _vec(array);\n          return;\n        }\n\n        const array = asArray(args.shift()!);\n        if (op !== \"reduce\") {\n          const isRemove = op === \"remove\",\n            isFind = op === \"find\",\n            isCount = op === \"count\";\n          const filtered: Val[] = [];\n          let count = 0;\n          for (let i = 0, lim = len(array); i < lim; ++i) {\n            const errors = await closure([array[i], ...args]);\n            if (errors) {\n              return errors;\n            }\n            const b = asBoo(stack.pop()!);\n            if (isCount) {\n              count += b ? 1 : 0;\n              continue;\n            }\n            if (isFind && b) {\n              stack.push(array[i]);\n              return;\n            }\n            if (!isFind && b !== isRemove) {\n              filtered.push(array[i]);\n            }\n          }\n          switch (op) {\n            case \"count\":\n              _num(count);\n              return;\n            case \"find\":\n              _nul();\n              return;\n            default:\n              _vec(filtered);\n              return;\n          }\n        }\n\n        if (!len(array)) {\n          if (len(args)) {\n            stack.push(args[0]);\n          } else {\n            _vec();\n          }\n          return;\n        }\n        if (len(array) < 2 && !len(args)) {\n          push(stack, array);\n          return;\n        }\n\n        let reduction: Val = (len(args) ? args : array).shift()!;\n        for (let i = 0, lim = len(array); i < lim; ++i) {\n          const errors = await closure([reduction, array[i]]);\n          if (errors) {\n            return errors;\n          }\n          reduction = stack.pop()!;\n        }\n        stack.push(reduction);\n      }\n      return;\n    case \"rand-int\":\n    case \"rand\":\n      {\n        const nArgs = len(args);\n        const [a, b] = [\n          nArgs < 2 ? 0 : num(args[0]),\n          nArgs === 0\n            ? 1 + toNum(op === \"rand-int\")\n            : nArgs === 1\n            ? num(args[0])\n            : num(args[1]),\n        ];\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\n      }\n      return;\n    case \"do\":\n    case \"val\":\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\n      return;\n    case \"..\":\n    case \"...\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      let flatArgs: Val[] = args;\n      if (op === \"..\") {\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? vec(a) : [a])));\n      } else {\n        const a = flatArgs.pop()!;\n        push(flatArgs, flat([a.t === \"vec\" ? vec(a) : [a]]));\n      }\n      return await closure(flatArgs);\n    }\n    case \"into\": {\n      const a0v = args[0].t === \"vec\";\n      const a1v = args[1].t === \"vec\";\n      if (a0v) {\n        _vec(concat(vec(args[0]), a1v ? vec(args[1]) : asArray(args[1])));\n      } else {\n        if (a1v) {\n          const v1 = asArray(args[1]);\n          stack.push(toDict(concat(flat(asArray(args[0]).map(vec)), v1)));\n        } else {\n          const { keys, vals } = dic(args[0]);\n          const d1 = dic(args[1]);\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\n        }\n      }\n      return;\n    }\n    case \"push\": {\n      if (args[0].t === \"vec\") {\n        const v = vec(args[0]);\n        if (len(args) < 3) {\n          _vec(concat(v, [args[1]]));\n        } else {\n          const n = num(args[2]);\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\n        }\n      } else {\n        if (len(args) < 3) {\n          stack.push(dictDrop(dic(args[0]), args[1]));\n        } else {\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\n        }\n      }\n      return;\n    }\n    case \"sect\": {\n      const v = args[0];\n      const isVec = v.t === \"vec\";\n      const vlen = isVec ? len(vec(v)) : slen(str(v));\n      let a = 0,\n        b = vlen;\n      switch (len(args)) {\n        case 1:\n          a = 1;\n          break;\n        case 2: {\n          const del = num(args[1]);\n          if (del < 0) {\n            b += del;\n          } else {\n            a += del;\n          }\n          break;\n        }\n        case 3: {\n          const skip = num(args[1]);\n          const take = num(args[2]);\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\n          b = (take < 0 ? b : a) + take;\n          break;\n        }\n      }\n      a = max(a, 0);\n      b = min(b, vlen);\n      if (a > b) {\n        (isVec ? _vec : _str)();\n        return;\n      }\n      if (isVec) {\n        _vec(slice(vec(v), a, b));\n      } else {\n        _str(substr(str(args[0]), a, b - a));\n      }\n      return;\n    }\n    case \"reverse\":\n      if (args[0].t === \"str\") {\n        _str(stringify(reverse(asArray(args[0]))));\n      } else {\n        _vec(reverse(asArray(args[0])));\n      }\n      return;\n    case \"sort\": {\n      if (!len(vec(args[0]))) {\n        _vec();\n        return;\n      }\n      const src = asArray(args[0]);\n      const mapped: Val[][] = [];\n      if (len(args) === 1) {\n        push(\n          mapped,\n          src.map(v => [v, v]),\n        );\n      } else {\n        const closure = getExe(ctx, args.pop()!, errCtx);\n        for (let i = 0, lim = len(src); i < lim; ++i) {\n          const errors = await closure([src[i]]);\n          if (errors) {\n            return errors;\n          }\n          mapped.push([src[i], stack.pop()!]);\n        }\n      }\n      const okT = mapped[0][1].t;\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\n        return tErr(\"can only sort by all number or all string\");\n      }\n      if (mapped[0][1].t === \"num\") {\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\n      } else {\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\n      }\n      _vec(mapped.map(([v]) => v));\n      return;\n    }\n    case \"range\": {\n      const [a, b, s] = args.map(num);\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\n      const [x, y] =\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\n      const step = sign((y - x) * (s || 1)) * (s || 1);\n      const count = ceil(abs((y - x) / step));\n      if (!count) {\n        _vec([]);\n        return;\n      }\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"range budget depleted\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      const nums = range(count).map(n => n * step + x);\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\n      return;\n    }\n    case \"empty?\":\n      _boo(!len(asArray(args[0])));\n      return;\n    case \"keys\":\n    case \"vals\":\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\n      return;\n    case \"split\":\n      _vec(\n        str(args[0])\n          .split(len(args) > 1 ? str(args[1]) : \" \")\n          .map(v => <Val>{ t: \"str\", v }),\n      );\n      return;\n    case \"join\":\n      _str(\n        vec(args[0])\n          .map(val2str)\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\n      );\n      return;\n    case \"starts-with?\":\n      _boo(starts(str(args[0]), str(args[1])));\n      return;\n    case \"ends-with?\":\n      _boo(ends(str(args[0]), str(args[1])));\n      return;\n    case \"upper-case\":\n    case \"lower-case\":\n    case \"trim\":\n    case \"trim-start\":\n    case \"trim-end\":\n      _str(\n        (op === \"upper-case\"\n          ? upperCase\n          : op === \"lower-case\"\n          ? lowerCase\n          : op === \"trim\"\n          ? trim\n          : op === \"trim-start\"\n          ? trimStart\n          : trimEnd)(str(args[0])),\n      );\n      return;\n    case \"str*\": {\n      const text = str(args[0]);\n      _str(\n        range(max(num(args[1]), 0))\n          .map(n => text)\n          .join(\"\"),\n      );\n      return;\n    }\n    case \"time\":\n      _num(getTimeMs());\n      return;\n    case \"version\":\n      _num(insituxVersion);\n      return;\n    case \"tests\":\n      {\n        const tests = await doTests(invoke, !(len(args) && asBoo(args[0])));\n        const summary = tests.pop()!;\n        for (const test of tests) {\n          await exeOp(\"print\", [{ v: test, t: \"str\" }], ctx, errCtx, false);\n        }\n        _str(summary);\n      }\n      return;\n    case \"symbols\":\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\n      return;\n    case \"eval\": {\n      delete ctx.env.funcs[\"entry\"];\n      const sLen = len(stack);\n      const errors = await parseAndExe(ctx, str(args[0]), errCtx.invocationId);\n      if (errors) {\n        errors.forEach(e => {\n          e.errCtx.invocationId = \"evaluated\";\n        });\n        return [\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\n          ...errors,\n        ];\n      }\n      if (sLen === len(stack)) {\n        _nul();\n      }\n      return;\n    }\n    case \"reset\":\n      ctx.env.vars = {};\n      ctx.env.funcs = {};\n      lets = [];\n      _nul();\n      return;\n  }\n\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\n}\n\nfunction getExe(\n  ctx: Ctx,\n  op: Val,\n  errCtx: ErrCtx,\n  checkArity = true,\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\n  const monoArityError = [{ e: \"Arity\", m: `one argument required`, errCtx }];\n  if (op.t === \"str\" || op.t === \"func\") {\n    const name = op.v;\n    if (ops[name]) {\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\n    }\n    if (name in ctx.env.funcs) {\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\n    }\n    if (name in ctx.env.vars) {\n      return getExe(ctx, ctx.env.vars[name], errCtx);\n    }\n    if (name in lets[len(lets) - 1]) {\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\n    }\n    if (starts(name, \"$\")) {\n      return async (params: Val[]) => {\n        if (!len(params)) {\n          return monoArityError;\n        }\n        const err = await ctx.set(substr(name, 1), params[0]);\n        stack.push(params[0]);\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n      };\n    }\n    return async (params: Val[]) => {\n      const { err, value } = await ctx.exe(name, params);\n      if (!err) {\n        stack.push(value);\n      }\n      return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n    };\n  } else if (op.t === \"clo\") {\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\n  } else if (op.t === \"key\") {\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      if (params[0].t === \"dict\") {\n        stack.push(dictGet(dic(params[0]), op));\n      } else if (params[0].t === \"vec\") {\n        const found = vec(params[0]).find(v => isEqual(v, op));\n        stack.push(found ?? { t: \"null\", v: undefined });\n      } else {\n        return keyOpErr(errCtx, [params[0].t]);\n      }\n      return;\n    };\n  } else if (op.t === \"num\") {\n    const n = floor(op.v);\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const a = params[0];\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\n        return numOpErr(errCtx, [a.t]);\n      }\n      const arr = asArray(a);\n      if (abs(n) >= len(arr)) {\n        _nul();\n      } else if (n < 0) {\n        stack.push(arr[len(arr) + n]);\n      } else {\n        stack.push(arr[n]);\n      }\n      return;\n    };\n  } else if (op.t === \"vec\") {\n    const { v } = op;\n    return async (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError;\n      }\n      const found = v.find(val => isEqual(val, params[0]));\n      if (found) {\n        stack.push(found);\n      } else {\n        _nul();\n      }\n      return;\n    };\n  } else if (op.t === \"dict\") {\n    const dict = op.v;\n    return async (params: Val[]) => {\n      if (len(params) === 1) {\n        stack.push(dictGet(dict, params[0]));\n      } else if (len(params) === 2) {\n        _dic(dictSet(dict, params[0], params[1]));\n      } else {\n        return [\n          {\n            e: \"Arity\",\n            m: \"dictionary as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      return;\n    };\n  } else if (op.t === \"bool\") {\n    const cond = op.v;\n    return async (params: Val[]) => {\n      if (!len(params) || len(params) > 2) {\n        return [\n          {\n            e: \"Arity\",\n            m: \"boolean as operation takes one or two arguments only\",\n            errCtx,\n          },\n        ];\n      }\n      stack.push(\n        cond\n          ? params[0]\n          : len(params) > 1\n          ? params[1]\n          : { t: \"null\", v: undefined },\n      );\n      return;\n    };\n  }\n  return async _ => [\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\n  ];\n}\n\nfunction errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n\nexport async function exeFunc(\n  ctx: Ctx,\n  func: Func,\n  args: Val[],\n  inClosure = false,\n): Promise<InvokeError[] | undefined> {\n  --ctx.callBudget;\n  if (!inClosure) {\n    lets.push({});\n  }\n  const stackLen = len(stack);\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\n    const ins = func.ins[i];\n    const { errCtx } = func.ins[i];\n\n    const tooManyLoops = ctx.loopBudget < 1;\n    if (tooManyLoops || ctx.callBudget < 1) {\n      return [\n        {\n          e: \"Budget\",\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\n          errCtx,\n        },\n      ];\n    }\n\n    switch (ins.typ) {\n      case \"val\":\n        stack.push(ins.value);\n        break;\n      case \"var\":\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\n        break;\n      case \"let\":\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\n        break;\n      case \"npa\":\n      case \"upa\":\n        {\n          const paramIdx = ins.value;\n          if (paramIdx === -1) {\n            _vec(args);\n          } else if (len(args) <= paramIdx) {\n            _nul();\n          } else {\n            stack.push(args[paramIdx]);\n          }\n        }\n        break;\n      case \"ref\":\n        {\n          const name = ins.value;\n          if (ops[name]) {\n            _fun(name);\n          } else if (starts(name, \"$\")) {\n            const { value, err } = await ctx.get(substr(name, 1));\n            if (err) {\n              return [{ e: \"External\", m: err, errCtx }];\n            }\n            stack.push(value);\n          } else if (name in ctx.env.vars) {\n            stack.push(ctx.env.vars[name]);\n          } else if (name in lets[len(lets) - 1]) {\n            stack.push(lets[len(lets) - 1][name]);\n          } else if (name in ctx.env.funcs) {\n            _fun(name);\n          } else {\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\n          }\n        }\n        break;\n      case \"exe\":\n        {\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\n          const nArgs = ins.value;\n          const params = splice(stack, len(stack) - nArgs, nArgs);\n          const errors = await closure(params);\n          if (errors) {\n            //Find next catch statement\n            const nextCat = slice(func.ins, i).findIndex(\n              ins => ins.typ === \"cat\",\n            );\n            if (nextCat !== -1) {\n              i += nextCat;\n              lets[len(lets) - 1][\"errors\"] = {\n                t: \"vec\",\n                v: errorsToDict(errors),\n              };\n              break;\n            }\n            return errors;\n          }\n        }\n        break;\n      case \"or\":\n        if (asBoo(stack[len(stack) - 1])) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      case \"if\":\n        if (!asBoo(stack.pop()!)) {\n          i += ins.value;\n        }\n        break;\n      case \"jmp\":\n      case \"cat\":\n        i += ins.value;\n        break;\n      case \"loo\":\n        i += ins.value;\n        --ctx.loopBudget;\n        break;\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          splice(stack, 0, len(stack) - 1);\n        } else {\n          _nul();\n        }\n        i = lim;\n        break;\n      case \"rec\":\n        {\n          lets[len(lets) - 1] = {};\n          i = -1;\n          const nArgs = ins.value;\n          args = splice(stack, len(stack) - nArgs, nArgs);\n          --ctx.recurBudget;\n          if (!ctx.recurBudget) {\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\n          }\n        }\n        continue;\n      case \"clo\":\n      case \"par\":\n        {\n          let [name, cins] = ins.value;\n          const isCapture = ({ typ, value }: Ins) =>\n            (typ === \"ref\" &&\n              !cins.find(i => i.typ === \"let\" && i.value === value)) ||\n            typ === \"npa\";\n          const derefFunc: Func = {\n            name: \"\",\n            ins: cins.filter(isCapture),\n          };\n          const errors = await exeFunc(ctx, derefFunc, args, true);\n          if (errors) {\n            return errors;\n          }\n          const numIns = len(derefFunc.ins);\n          const captures = splice(stack, len(stack) - numIns, numIns);\n          cins = cins.map(ins =>\n            isCapture(ins)\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\n              : ins,\n          );\n          //Rewrite partial closure to #(... func [args] args)\n          if (ins.typ === \"par\") {\n            const { value: exeNumArgs, errCtx } = cins.pop()!;\n            cins.unshift(cins.pop()!);\n            cins.push({ typ: \"upa\", value: -1, errCtx });\n            cins.push({\n              typ: \"val\",\n              value: <Val>{ t: \"str\", v: \"...\" },\n              errCtx,\n            });\n            cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\n          }\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n  if (!inClosure) {\n    lets.pop();\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\n  }\n  return;\n}\n\nasync function parseAndExe(\n  ctx: Ctx,\n  code: string,\n  invocationId: string,\n): Promise<InvokeError[] | undefined> {\n  const parsed = parse(code, invocationId);\n  if (len(parsed.errors)) {\n    return parsed.errors;\n  }\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\n  if (!(\"entry\" in ctx.env.funcs)) {\n    return;\n  }\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\n}\n\nexport async function invoke(\n  ctx: Ctx,\n  code: string,\n  invocationId: string,\n  printResult = false,\n): Promise<InvokeError[]> {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  const errors = await parseAndExe(ctx, code, invocationId);\n  ctx.callBudget = callBudget;\n  ctx.recurBudget = recurBudget;\n  ctx.loopBudget = loopBudget;\n  ctx.rangeBudget = rangeBudget;\n  delete ctx.env.funcs[\"entry\"];\n  if (!errors && printResult && len(stack)) {\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(stack[len(stack) - 1]) }]);\n  }\n  stack = [];\n  lets = [];\n  return errors ?? [];\n}\n\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\n  let syms = alsoSyntax ? [\"function\"] : [];\n  syms = concat(syms, objKeys(ops));\n  syms = concat(syms, objKeys(ctx.env.funcs));\n  syms = concat(syms, objKeys(ctx.env.vars));\n  const hidden = [\"entry\"];\n  return syms.filter(o => !has(hidden, o));\n}\n","import { invoke } from \".\";\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\nimport { Ctx } from \"./types\";\n\nexport type ErrorOutput = {\n  type: \"message\" | \"error\";\n  text: string;\n}[];\n\nconst invocations = new Map<string, string>();\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\n\nexport async function invoker(ctx: Ctx, code: string): Promise<ErrorOutput> {\n  const uuid = getTimeMs().toString();\n  invocations.set(uuid, code);\n  const errors = await invoke(ctx, code, uuid, true);\n  let out: ErrorOutput = [];\n  errors.forEach(({ e, m, errCtx: { line, col, invocationId } }) => {\n    const invocation = invocations.get(invocationId);\n    if (!invocation) {\n      out.push({\n        type: \"message\",\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\n      });\n      return;\n    }\n    const lineText = invocation.split(\"\\n\")[line - 1];\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\n    const half1 = trimStart(substr(lineText, 0, col - 1));\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\n    if (!sym) {\n      const half2 = substr(lineText, col);\n      out.push({ type: \"error\", text: lineText[col - 1] });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    } else {\n      const half2 = substr(lineText, col - 1 + slen(sym));\n      out.push({ type: \"error\", text: sym });\n      out.push({ type: \"message\", text: `${half2}\\n` });\n    }\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\n  });\n  return out;\n}\n","import readline = require(\"readline\");\nimport fs = require(\"fs\");\nimport { symbols, insituxVersion } from \".\";\nimport { Ctx, Val, ValAndErr } from \"./types\";\nimport { ErrorOutput, invoker, parensRx } from \"./invoker\";\nimport { tokenise } from \"./parse\";\nconst env = new Map<string, Val>();\n\nasync function get(key: string) {\n  return env.has(key)\n    ? { value: env.get(key)!, err: undefined }\n    : {\n        value: <Val>{ v: undefined, t: \"null\" },\n        err: `key ${key} not found`,\n      };\n}\n\nasync function set(key: string, val: Val) {\n  env.set(key, val);\n  return undefined;\n}\n\nconst ctx: Ctx = {\n  env: { funcs: {}, vars: {} },\n  get,\n  set,\n  exe,\n  loopBudget: 1e6,\n  rangeBudget: 1e4,\n  callBudget: 1e8,\n  recurBudget: 1e4,\n};\n\nasync function exe(name: string, args: Val[]): Promise<ValAndErr> {\n  const nullVal: Val = { v: undefined, t: \"null\" };\n  switch (name) {\n    case \"print\":\n    case \"print-str\":\n      process.stdout.write(`\\x1b[32m${args[0].v}\\x1b[0m`);\n      if (name === \"print\") {\n        process.stdout.write(\"\\n\");\n      }\n      break;\n    case \"read\": {\n      const path = args[0].v as string;\n      if (!fs.existsSync(path)) {\n        return { value: nullVal };\n      }\n      return {\n        value: { t: \"str\", v: fs.readFileSync(path).toString() },\n      };\n    }\n    default:\n      if (args.length) {\n        const a = args[0];\n        if (a.t === \"str\" && a.v.startsWith(\"$\")) {\n          if (args.length === 1) {\n            return await get(`${a.v.substring(1)}.${name}`);\n          } else {\n            await set(`${a.v.substring(1)}.${name}`, args[1]);\n            return { value: args[1] };\n          }\n        }\n      }\n      return { value: nullVal, err: `operation ${name} does not exist` };\n  }\n  return { value: nullVal };\n}\n\nfunction completer(line: string) {\n  const input = line.split(parensRx).pop();\n  const completions = symbols(ctx);\n  if (!input) {\n    return [completions, \"\"];\n  }\n  const hits = completions.filter(c => c.startsWith(input));\n  return [hits.length ? hits : completions, input];\n}\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: \"> \",\n  completer,\n  history: fs.existsSync(\".repl-history\")\n    ? fs.readFileSync(\".repl-history\").toString().split(\"\\n\").reverse()\n    : [],\n});\n\nlet lines: string[] = [];\n\nfunction isFinished(code: string): boolean {\n  const { tokens } = tokenise(code, \"\");\n  const numL = tokens.filter(t => t.typ == \"(\").length;\n  const numR = tokens.filter(t => t.typ == \")\").length;\n  return numL <= numR;\n}\n\nrl.on(\"line\", async line => {\n  lines.push(line);\n  const input = lines.join(\"\\n\");\n  if (isFinished(input)) {\n    if (lines.length === 1) {\n      fs.appendFileSync(\".repl-history\", `\\n${input}`);\n    }\n    lines = [];\n    if (input === \"quit\") {\n      rl.close();\n      return;\n    }\n    if (input.trim()) {\n      printErrorOutput(await invoker(ctx, input));\n    }\n    rl.setPrompt(\"> \");\n  } else {\n    rl.setPrompt(\". \");\n  }\n  rl.prompt();\n});\nrl.on(\"close\", () => {\n  console.log();\n});\n\nconsole.log(`Insitux ${insituxVersion} REPL.`);\nrl.prompt();\n\nfunction printErrorOutput(lines: ErrorOutput) {\n  const colours = { error: 31, message: 35 };\n  lines.forEach(({ type, text }) => {\n    process.stdout.write(`\\x1b[${colours[type]}m${text}\\x1b[0m`);\n  });\n}\n"],"names":[],"sourceRoot":""}