{"version":3,"file":"repl.js","mappings":";;;;;;;;AAAa;;AAEb;AACA;AACA;AACA,EAAE;;AAEF;AACA,4BAA4B,4BAA4B;AACxD,aAAa,IAAI,IAAI,IAAI,IAAI;AAC7B;;AAEA;AACA;;;;;;;;ACbY;;AAEZ,SAAS,mBAAO,CAAC,GAAI;AACrB,gBAAgB,mBAAO,CAAC,CAAY;AACpC,eAAe;;AAEf;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB,oBAAoB,aAAa,UAAU,OAAO;AAClD,eAAe,QAAQ;AACvB;AACA,aAAa,UAAU;AACvB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,+BAA+B;AAC/B,iCAAiC,oBAAoB,SAAS;;AAE9D;;;AAGA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,gBAAgB,QAAQ;AACxB;AACA,eAAe,QAAQ;AACvB,aAAa,QAAQ;AACrB,sBAAsB,aAAa,UAAU,OAAO;AACpD;AACA;AACA,eAAe,QAAQ;AACvB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB;;AAEnB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA,UAAU;AACV;AACA;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","sources":["webpack://insitux/./node_modules/ansi-regex/index.js","webpack://insitux/./node_modules/prompt-sync/index.js","webpack://insitux/./node_modules/strip-ansi/index.js","webpack://insitux/external node-commonjs \"fs\"","webpack://insitux/external node-commonjs \"readline\"","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/external node-commonjs \"process\"","webpack://insitux/./src/repl.ts"],"sourcesContent":["'use strict';\n\nmodule.exports = options => {\n\toptions = Object.assign({\n\t\tonlyFirst: false\n\t}, options);\n\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, options.onlyFirst ? undefined : 'g');\n};\n","'use strict'\n\nvar fs = require('fs');\nvar stripAnsi = require('strip-ansi');\nvar term = 13; // carriage return\n\n/**\n * create -- sync function for reading user input from stdin\n * @param   {Object} config {\n *   sigint: {Boolean} exit on ^C\n *   autocomplete: {StringArray} function({String})\n *   history: {String} a history control object (see `prompt-sync-history`)\n * }\n * @returns {Function} prompt function\n */\n\n // for ANSI escape codes reference see https://en.wikipedia.org/wiki/ANSI_escape_code\n\nfunction create(config) {\n\n  config = config || {};\n  var sigint = config.sigint;\n  var eot = config.eot;\n  var autocomplete = config.autocomplete =\n    config.autocomplete || function(){return []};\n  var history = config.history;\n  prompt.history = history || {save: function(){}};\n  prompt.hide = function (ask) { return prompt(ask, {echo: ''}) };\n\n  return prompt;\n\n\n  /**\n   * prompt -- sync function for reading user input from stdin\n   *  @param {String} ask opening question/statement to prompt for\n   *  @param {String} value initial value for the prompt\n   *  @param   {Object} opts {\n   *   echo: set to a character to be echoed, default is '*'. Use '' for no echo\n   *   value: {String} initial value for the prompt\n   *   ask: {String} opening question/statement to prompt for, does not override ask param\n   *   autocomplete: {StringArray} function({String})\n   * }\n   *\n   * @returns {string} Returns the string input or (if sigint === false)\n   *                   null if user terminates with a ^C\n   */\n\n\n  function prompt(ask, value, opts) {\n    var insert = 0, savedinsert = 0, res, i, savedstr;\n    opts = opts || {};\n\n    if (Object(ask) === ask) {\n      opts = ask;\n      ask = opts.ask;\n    } else if (Object(value) === value) {\n      opts = value;\n      value = opts.value;\n    }\n    ask = ask || '';\n    var echo = opts.echo;\n    var masked = 'echo' in opts;\n    autocomplete = opts.autocomplete || autocomplete;\n\n    var fd = (process.platform === 'win32') ?\n      process.stdin.fd :\n      fs.openSync('/dev/tty', 'rs');\n\n    var wasRaw = process.stdin.isRaw;\n    if (!wasRaw) { process.stdin.setRawMode && process.stdin.setRawMode(true); }\n\n    var buf = Buffer.alloc(3);\n    var str = '', character, read;\n\n    savedstr = '';\n\n    if (ask) {\n      process.stdout.write(ask);\n    }\n\n    var cycle = 0;\n    var prevComplete;\n\n    while (true) {\n      read = fs.readSync(fd, buf, 0, 3);\n      if (read > 1) { // received a control sequence\n        switch(buf.toString()) {\n          case '\\u001b[A':  //up arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.atStart()) break;\n\n            if (history.atEnd()) {\n              savedstr = str;\n              savedinsert = insert;\n            }\n            str = history.prev();\n            insert = str.length;\n            process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str);\n            break;\n          case '\\u001b[B':  //down arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.pastEnd()) break;\n\n            if (history.atPenultimate()) {\n              str = savedstr;\n              insert = savedinsert;\n              history.next();\n            } else {\n              str = history.next();\n              insert = str.length;\n            }\n            process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str + '\\u001b['+(insert+ask.length+1)+'G');\n            break;\n          case '\\u001b[D': //left arrow\n            if (masked) break;\n            var before = insert;\n            insert = (--insert < 0) ? 0 : insert;\n            if (before - insert)\n              process.stdout.write('\\u001b[1D');\n            break;\n          case '\\u001b[C': //right arrow\n            if (masked) break;\n            insert = (++insert > str.length) ? str.length : insert;\n            process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n            break;\n          default:\n            if (buf.toString()) {\n              str = str + buf.toString();\n              str = str.replace(/\\0/g, '');\n              insert = str.length;\n              promptPrint(masked, ask, echo, str, insert);\n              process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n              buf = Buffer.alloc(3);\n            }\n        }\n        continue; // any other 3 character sequence is ignored\n      }\n\n      // if it is not a control character seq, assume only one character is read\n      character = buf[read-1];\n\n      // catch a ^C and return null\n      if (character == 3){\n        process.stdout.write('^C\\n');\n        fs.closeSync(fd);\n\n        if (sigint) process.exit(130);\n\n        process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n        return null;\n      }\n\n      // catch a ^D and exit\n      if (character == 4) {\n        if (str.length == 0 && eot) {\n          process.stdout.write('exit\\n');\n          process.exit(0);\n        }\n      }\n\n      // catch the terminating character\n      if (character == term) {\n        fs.closeSync(fd);\n        if (!history) break;\n        if (!masked && str.length) history.push(str);\n        history.reset();\n        break;\n      }\n\n      // catch a TAB and implement autocomplete\n      if (character == 9) { // TAB\n        res = autocomplete(str);\n\n        if (str == res[0]) {\n          res = autocomplete('');\n        } else {\n          prevComplete = res.length;\n        }\n\n        if (res.length == 0) {\n          process.stdout.write('\\t');\n          continue;\n        }\n\n        var item = res[cycle++] || res[cycle = 0, cycle++];\n\n        if (item) {\n          process.stdout.write('\\r\\u001b[K' + ask + item);\n          str = item;\n          insert = item.length;\n        }\n      }\n\n      if (character == 127 || (process.platform == 'win32' && character == 8)) { //backspace\n        if (!insert) continue;\n        str = str.slice(0, insert-1) + str.slice(insert);\n        insert--;\n        process.stdout.write('\\u001b[2D');\n      } else {\n        if ((character < 32 ) || (character > 126))\n            continue;\n        str = str.slice(0, insert) + String.fromCharCode(character) + str.slice(insert);\n        insert++;\n      };\n\n      promptPrint(masked, ask, echo, str, insert);\n\n    }\n\n    process.stdout.write('\\n')\n\n    process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n    return str || value || '';\n  };\n\n\n  function promptPrint(masked, ask, echo, str, insert) {\n    if (masked) {\n        process.stdout.write('\\u001b[2K\\u001b[0G' + ask + Array(str.length+1).join(echo));\n    } else {\n      process.stdout.write('\\u001b[s');\n      if (insert == str.length) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n      } else {\n        if (ask) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n        } else {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ str + '\\u001b[' + (str.length - insert) + 'D');\n        }\n      }\n\n      // Reposition the cursor to the right of the insertion point\n      var askLength = stripAnsi(ask).length;\n      process.stdout.write(`\\u001b[${askLength+1+(echo==''? 0:insert)}G`);\n    }\n  }\n};\n\nmodule.exports = create;\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nconst stripAnsi = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n\nmodule.exports = stripAnsi;\nmodule.exports.default = stripAnsi;\n","module.exports = require(\"fs\");","module.exports = require(\"readline\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = <T>(arr: T[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const charCode = (str: string): number => str.charCodeAt(0);\nexport const codeChar = (num: number): string => String.fromCharCode(num);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;\n","export type Val =\n  | { t: \"vec\"; v: Val[] }\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\n  | { t: \"null\"; v: undefined }\n  | { t: \"wild\"; v: undefined }\n  | { t: \"bool\"; v: boolean }\n  | { t: \"num\"; v: number }\n  | { t: \"clo\"; v: Func }\n  | { t: \"dict\"; v: Dict }\n  | { t: \"ext\"; v: unknown };\n\nexport type ErrCtx = { invokeId: string; line: number; col: number };\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\nexport type ValOrErr =\n  | { kind: \"val\"; value: Val }\n  | { kind: \"err\"; err: string };\n/**\n * @summary \"empty\" occurs when there was only function declaration;\n *          \"val\" occurs when there were no errors and there is a final value;\n *          \"errors\" occurs when there were any errors.\n */\nexport type InvokeResult =\n  | { kind: \"empty\" }\n  | { kind: \"val\"; value: Val }\n  | { kind: \"errors\"; errors: InvokeError[] };\n\nexport type Dict = {\n  keys: Val[];\n  vals: Val[];\n};\n\nexport type Func = {\n  name?: string;\n  ins: Ins[];\n};\nexport type Funcs = { [key: string]: Func };\nexport type Env = {\n  funcs: Funcs;\n  vars: { [key: string]: Val };\n};\n\n/** A context supplied with an Insitux invocation to provide its environment. */\nexport type Ctx = {\n  /** Called to set an external variable, returning nothing or an error. */\n  set: (key: string, val: Val) => undefined | string;\n  /** Called to retrieve an external variable,\n   * returning the value or an error. */\n  get: (key: string) => ValOrErr;\n  /** Called to print data out of Insitux. */\n  print: (str: string, withNewline: boolean) => void;\n  /** Extra function definitions to make available within this invocation */\n  functions: ExternalFunction[];\n  /** Called when Insitux cannot find a function definition otherwise.\n   * You should return an error if unknown externally too. */\n  exe: (name: string, args: Val[]) => ValOrErr;\n  /** Function and variable definitions, retained by you for each invocation. */\n  env: Env;\n  /** The number of loops an invocation is permitted. */\n  loopBudget: number;\n  /** The total length of all `range` calls permitted. */\n  rangeBudget: number;\n  /** The total number of function calls permitted. */\n  callBudget: number;\n  /** The total number of explicit recursions permitted.\n   * Explicit recursions are unlikely to cause a stack-overflow. */\n  recurBudget: number;\n};\n\nexport const defaultCtx = {\n  env: { funcs: {}, vars: {} },\n  loopBudget: 1e7,\n  rangeBudget: 1e6,\n  callBudget: 1e8,\n  recurBudget: 1e4,\n};\n\nexport type ParamsShape = { name: string; position: number[] }[];\nexport type Closure = {\n  name: string;\n  closureIns: Ins[];\n  captured: boolean[];\n  captureIns: Ins[];\n};\n\nexport type Ins = { errCtx: ErrCtx } & (\n  | { typ: \"val\"; value: Val }\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\n  | { typ: \"ret\"; value: boolean } //Return, with value?\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\n  | { typ: \"clo\" | \"par\"; value: Closure } //Closure and partial, text representation and instructions\n);\n\n/** Definition of an operation in Insitux,\n * with guarantees made for arity (number of parameters) and parameter types.\n * Return type is specified to inform the parse-time type-checker. */\nexport type Operation = {\n  minArity?: number;\n  maxArity?: number;\n  exactArity?: number;\n  numeric?: true | \"in only\";\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\n  returns?: Val[\"t\"][];\n};\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\nexport type ExternalFunction = {\n  name: string;\n  definition: Operation;\n  handler: ExternalHandler;\n};\n\nexport const ops: {\n  [name: string]: Operation & { external?: boolean };\n} = {\n  print: { returns: [\"null\"] },\n  \"print-str\": { returns: [\"null\"] },\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\n  \"=\": { minArity: 2 },\n  \"!=\": { minArity: 2 },\n  \"+\": { minArity: 2, numeric: true },\n  \"-\": { minArity: 1, numeric: true },\n  \"*\": { minArity: 2, numeric: true },\n  \"/\": { minArity: 2, numeric: true },\n  \"//\": { minArity: 2, numeric: true },\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\n  \"<\": { minArity: 2, numeric: true },\n  \">\": { minArity: 2, numeric: true },\n  \"<=\": { minArity: 2, numeric: true },\n  \">=\": { minArity: 2, numeric: true },\n  \"fast=\": { exactArity: 2 },\n  \"fast!=\": { exactArity: 2 },\n  \"fast+\": { exactArity: 2, numeric: true },\n  \"fast-\": { exactArity: 2, numeric: true },\n  \"fast*\": { exactArity: 2, numeric: true },\n  \"fast/\": { exactArity: 2, numeric: true },\n  \"fast//\": { exactArity: 2, numeric: true },\n  \"fast<\": { exactArity: 2, numeric: true },\n  \"fast>\": { exactArity: 2, numeric: true },\n  \"fast<=\": { exactArity: 2, numeric: true },\n  \"fast>=\": { exactArity: 2, numeric: true },\n  inc: { exactArity: 1, numeric: true },\n  dec: { exactArity: 1, numeric: true },\n  min: { minArity: 2, numeric: true },\n  max: { minArity: 2, numeric: true },\n  abs: { exactArity: 1, numeric: true },\n  sqrt: { exactArity: 1, numeric: true },\n  round: { minArity: 1, maxArity: 2, numeric: true },\n  floor: { exactArity: 1, numeric: true },\n  ceil: { exactArity: 1, numeric: true },\n  logn: { exactArity: 1, numeric: true },\n  log2: { exactArity: 1, numeric: true },\n  log10: { exactArity: 1, numeric: true },\n  and: { minArity: 1 },\n  or: { minArity: 1 },\n  xor: { exactArity: 2 },\n  \"&\": { exactArity: 2, numeric: true },\n  \"|\": { exactArity: 2, numeric: true },\n  \"^\": { exactArity: 2, numeric: true },\n  \"~\": { exactArity: 1, numeric: true },\n  \"<<\": { exactArity: 2, numeric: true },\n  \">>\": { exactArity: 2, numeric: true },\n  \">>>\": { exactArity: 2, numeric: true },\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\n  rem: { minArity: 2, numeric: true },\n  sin: { exactArity: 1, numeric: true },\n  cos: { exactArity: 1, numeric: true },\n  tan: { exactArity: 1, numeric: true },\n  vec: { returns: [\"vec\"] },\n  dict: { returns: [\"dict\"] },\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\n  \"to-num\": {\n    exactArity: 1,\n    params: [[\"str\", \"num\"]],\n    returns: [\"num\", \"null\"],\n  },\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  idx: { minArity: 2, maxArity: 3, params: [[\"str\", \"vec\"]], returns: [\"num\"] },\n  map: { minArity: 2, returns: [\"vec\"] },\n  for: { minArity: 2, returns: [\"vec\"] },\n  reduce: { minArity: 2, maxArity: 3 },\n  filter: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\", \"str\", \"dict\"],\n  },\n  remove: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\", \"str\", \"dict\"],\n  },\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\n  count: {\n    minArity: 2,\n    params: [[], [\"vec\", \"dict\", \"str\"]],\n    returns: [\"num\"],\n  },\n  repeat: { minArity: 2, params: [[], \"num\"] },\n  \"->\": { minArity: 2 },\n  str: { returns: [\"str\"] },\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\n  \".\": { minArity: 1 },\n  \"..\": { minArity: 2 },\n  \"...\": { minArity: 2 },\n  into: {\n    exactArity: 2,\n    params: [\n      [\"vec\", \"dict\"],\n      [\"vec\", \"dict\"],\n    ],\n    returns: [\"vec\", \"dict\"],\n  },\n  push: {\n    minArity: 2,\n    maxArity: 3,\n    params: [[\"vec\", \"dict\"]],\n    returns: [\"vec\", \"dict\"],\n  },\n  sect: {\n    minArity: 1,\n    maxArity: 3,\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\n    returns: [\"vec\", \"str\"],\n  },\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\n  sort: {\n    minArity: 1,\n    maxArity: 2,\n    params: [[\"vec\", \"dict\", \"str\"]],\n    returns: [\"vec\"],\n  },\n  keys: { exactArity: 1, params: [\"dict\"] },\n  vals: { exactArity: 1, params: [\"dict\"] },\n  do: { minArity: 1 },\n  val: { minArity: 1 },\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\n  \"empty?\": {\n    exactArity: 1,\n    params: [[\"str\", \"vec\", \"dict\"]],\n    returns: [\"bool\"],\n  },\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\n  join: {\n    exactArity: 2,\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\n    returns: [\"str\"],\n  },\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\n  \"char-code\": {\n    minArity: 1,\n    maxArity: 2,\n    params: [[\"str\", \"num\"], \"num\"],\n    returns: [\"str\", \"num\", \"null\"],\n  },\n  time: { exactArity: 0, returns: [\"num\"] },\n  version: { exactArity: 0, returns: [\"num\"] },\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\n  symbols: { exactArity: 0, returns: [\"vec\"] },\n  eval: { exactArity: 1, params: [\"str\"] },\n  reset: { exactArity: 0 },\n  recur: {},\n};\n\nexport const typeNames = {\n  null: \"null\",\n  str: \"string\",\n  num: \"number\",\n  bool: \"boolean\",\n  key: \"keyword\",\n  ref: \"reference\",\n  vec: \"vector\",\n  dict: \"dictionary\",\n  func: \"function\",\n  clo: \"closure\",\n  wild: \"wildcard\",\n  ext: \"external\",\n};\n\nexport const assertUnreachable = (_x: never): never => <never>0;\n","import { has, isArray, len } from \"./poly-fills\";\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\n\nexport const asBoo = (val: Val) =>\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\n\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\n  const { exactArity, maxArity, minArity } = ops[op];\n  const aErr = (msg: string, amount: number) => [\n    <InvokeError>{\n      e: \"Arity\",\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\n      errCtx,\n    },\n  ];\n  if (exactArity !== undefined) {\n    if (nArg !== exactArity) {\n      return aErr(`exactly ${exactArity}`, exactArity);\n    }\n  } else {\n    if (minArity && !maxArity && nArg < minArity) {\n      return aErr(`at least ${minArity}`, minArity);\n    } else if (!minArity && maxArity && nArg > maxArity) {\n      return aErr(`at most ${maxArity}`, maxArity);\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\n    }\n  }\n}\n\nexport function typeCheck(\n  op: string,\n  args: Val[\"t\"][][],\n  errCtx: ErrCtx,\n  optimistic = false,\n): InvokeError[] | undefined {\n  const { params: types, numeric: onlyNum } = ops[op];\n  const nArg = len(args);\n  if (onlyNum) {\n    const nonNumArgIdx = args.findIndex(\n      a =>\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\n    );\n    if (nonNumArgIdx === -1) {\n      return;\n    }\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\n    return [\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\n    ];\n  }\n  if (!types) {\n    return;\n  }\n  const typeViolations = types\n    .map((need, i) => {\n      if (i >= nArg || !args[i]) {\n        return false;\n      }\n      const argTypes = args[i]!;\n      if (isArray(need)) {\n        if (\n          !len(need) ||\n          (optimistic\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\n            : len(argTypes) === 1 && has(need, argTypes[0]))\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        const needs = need.map(t => typeNames[t]).join(\", \");\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\n      } else {\n        if (\n          optimistic\n            ? !len(argTypes) || has(argTypes, need)\n            : len(argTypes) === 1 && need === argTypes[0]\n        ) {\n          return false;\n        }\n        const names = argTypes.map(t => typeNames[t]);\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\n      }\n    })\n    .filter(r => !!r);\n  return len(typeViolations)\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\n    : undefined;\n}\n\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\n  e: \"Type\",\n  m,\n  errCtx,\n});\n\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\n  const names = types.map(t => typeNames[t]).join(\", \");\n  return [\n    typeErr(\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\n      errCtx,\n    ),\n  ];\n}\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\nimport * as pf from \"./poly-fills\";\nconst { has, flat, push, slice, splice } = pf;\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\nconst { isNum, len, toNum } = pf;\nimport { ParamsShape, ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\nimport { assertUnreachable, InvokeError } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype Node = Token | Node[];\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\nconst nullVal: Val = { t: \"null\", v: undefined };\nconst falseVal = <Val>{ t: \"bool\", v: false };\ntype NamedNodes = {\n  name: string;\n  nodes: Node[];\n};\nconst isToken = (node: Node | undefined): node is Token =>\n  !!node && \"errCtx\" in node;\nconst symAt = (node: Node, pos = 0) => {\n  if (isToken(node)) {\n    return \"\";\n  }\n  const arg = node[pos];\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\n};\nconst node2str = (nodes: Node[]): string =>\n  nodes.map(n => (isToken(n) ? n.text : `(${node2str(n)})`)).join(\" \");\n\nexport function tokenise(\n  code: string,\n  invokeId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\n  let [inSymbol, inNumber, inHex] = [false, false, false];\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (c === \"\\\\\" && inString) {\n      tokens[len(tokens) - 1].text +=\n        { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\n        (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`);\n      ++col;\n      ++i;\n      continue;\n    }\n    const errCtx: ErrCtx = { invokeId, line, col };\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      const nl = subIdx(substr(code, ++i), \"\\n\");\n      const text = substr(code, i, nl > 0 ? nl : l - i);\n      i += slen(text);\n      ++line;\n      col = 0;\n      if (emitComments) {\n        tokens.push({ typ: \"rem\", text, errCtx });\n      }\n      continue;\n    }\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or hex, or binary, else convert into symbol\n    if (inNumber && !isDigit(c)) {\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\n      inHex = inHex || hexStart;\n      inNumber =\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps && (c === \"[\" || c === \"{\")) {\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inHex = inSymbol = !inNumber;\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\n/** Parses tokens into a tree where each node is a token or token list. */\nfunction treeise(tokens: Token[]): Node[] {\n  const nodes: Node[] = [];\n  const _treeise = (tokens: Token[]): Node => {\n    let prefix: Token | undefined;\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\n      prefix = tokens.shift()!;\n    }\n    const token = tokens.shift()!;\n    if (token.typ !== \"(\" && token.typ !== \")\") {\n      return token;\n    }\n    const nodes: Node[] = prefix ? [prefix] : [];\n    while (tokens[0].typ !== \")\") {\n      nodes.push(_treeise(tokens));\n    }\n    tokens.shift();\n    return nodes;\n  };\n  while (len(tokens)) {\n    nodes.push(_treeise(tokens));\n  }\n  return nodes;\n}\n\n/** Separates function nodes and non-function nodes,\n * with non-function nodes collected into (function entry ...)\n * if there are any.*/\nfunction collectFuncs(\n  nodes: Node[],\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\n  const funcs: ReturnType<typeof collectFuncs> = [];\n  const entries: Node[] = [];\n  nodes.forEach(node => {\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\n      const name = symAt(node, 1);\n      if (!name) {\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\n      } else if (len(node) < 3) {\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\n      }\n      funcs.push({ name, nodes: slice(node, 2) });\n    } else {\n      entries.push(node);\n    }\n  });\n  if (len(entries)) {\n    funcs.push({ name: \"entry\", nodes: entries });\n  }\n  return funcs;\n}\n\nconst parseNode = (node: Node, params: ParamsShape) =>\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\n\nfunction parseForm(\n  nodes: Node[],\n  params: ParamsShape,\n  doArityCheck = true,\n): ParserIns[] {\n  if (!len(nodes)) {\n    return [];\n  }\n  const nodeParser = (node: Node) => parseNode(node, params);\n  let firstNode = nodes.shift()!;\n  let head = nodeParser(firstNode);\n  const { errCtx } = head[0];\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\n    //1-off arity deficiency rewritten as closure\n    if (firstNode.text in ops) {\n      const { exactArity, minArity } = ops[firstNode.text];\n      const a = exactArity ?? minArity;\n      if (a && a !== 1 && len(nodes) + 1 === a) {\n        nodes.unshift(firstNode);\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\n      }\n    }\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\n      nodes.unshift(firstNode);\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\n    }\n    const { text: op, errCtx } = firstNode;\n    const err = (m: string, eCtx = errCtx) => [\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\n    ];\n\n    if (has([\"if\", \"if!\", \"when\", \"match\"], op) && !len(nodes)) {\n      return err(\"provide a condition\");\n    } else if (has([\"if\", \"if!\"], op)) {\n      if (len(nodes) === 1) {\n        return err(\"provide at least one branch\");\n      } else if (len(nodes) > 3) {\n        return err(\"provide fewer than two branches\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [cond, branch1] = parsed;\n      let branch2 = parsed[2];\n      const ifN = op === \"if!\" && [\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\n      ];\n      if (!branch2) {\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\n      }\n      return [\n        ...cond,\n        ...(ifN || []),\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\n        ...branch1,\n        { typ: \"jmp\", value: len(branch2), errCtx },\n        ...branch2,\n      ];\n    } else if (op === \"when\") {\n      if (len(nodes) === 1) {\n        return err(\"provide a body\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\n      const bodyIns = flat(body);\n      return [\n        ...cond,\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\n        ...bodyIns,\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: nullVal, errCtx },\n      ];\n    } else if (op === \"match\") {\n      const parsed = nodes.map(nodeParser);\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\n      if (!len(args)) {\n        return err(\"provide at least one case\");\n      }\n      const elseLen = len(otherwise);\n      let insCount =\n        args.reduce((acc, a) => acc + len(a), 0) +\n        (elseLen ? elseLen : 2) +\n        len(args);\n      const ins: ParserIns[] = cond;\n      while (len(args) > 1) {\n        const [a, when] = [args.shift()!, args.shift()!];\n        push(ins, a);\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\n        push(ins, when);\n        insCount -= len(a) + len(when) + 2;\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\n      }\n      if (len(otherwise)) {\n        push(ins, otherwise);\n      } else {\n        ins.push({ typ: \"pop\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\n      }\n      return ins;\n    } else if (op === \"catch\") {\n      if (len(nodes) < 2) {\n        return err(\"provide at least 2 arguments\");\n      } else if (isToken(nodes[0])) {\n        return err(\"argument 1 must be expression\");\n      }\n      const body = nodeParser(nodes[0]);\n      const when = flat(slice(nodes, 1).map(nodeParser));\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\n      const args = nodes.map(nodeParser);\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\n      if (len(args) < 2) {\n        return err(\"provide at least 2 arguments\");\n      }\n      const ins: ParserIns[] = [];\n      if (op === \"while\") {\n        ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n        insCount += 2; //+1 for the if ins, +1 for the pop ins\n        const [head, body] = [args[0], slice(args, 1)];\n        push(ins, head);\n        ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n        ins.push({ typ: \"pop\", value: len(body), errCtx });\n        push(ins, flat(body));\n        ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n        return ins;\n      }\n      insCount += len(args); //+1 for each if/or ins\n      insCount += toNum(op === \"and\");\n      const typ = op === \"and\" ? \"if\" : \"or\";\n      for (let a = 0; a < len(args); ++a) {\n        push(ins, args[a]);\n        insCount -= len(args[a]);\n        ins.push({ typ, value: insCount, errCtx });\n        --insCount;\n      }\n      if (op === \"and\") {\n        push(ins, [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n          { typ: \"jmp\", value: 1, errCtx },\n        ]);\n      }\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\n      return ins;\n    } else if (op === \"var\" || op === \"let\") {\n      const defs = nodes.filter((n, i) => !(i % 2));\n      const vals = nodes.filter((n, i) => !!(i % 2));\n      if (!len(defs)) {\n        return err(\"provide at least 1 declaration name and value\");\n      } else if (len(defs) > len(vals)) {\n        return err(\"provide a value after each declaration name\");\n      }\n      const ins: ParserIns[] = [];\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\n        push(ins, nodeParser(vals[d]));\n        const def = defs[d];\n        if (isToken(def)) {\n          const defIns = parseNode(defs[d], params);\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\n            return err(\"declaration name must be symbol\", defIns[0].errCtx);\n          }\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\n        } else {\n          const { shape, errors } = parseParams([def], true);\n          if (len(errors)) {\n            return errors;\n          }\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\n          ins.push({ typ, value: shape, errCtx });\n        }\n      }\n      return ins;\n    } else if (op === \"var!\" || op === \"let!\") {\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\n      if (len(nodes) < 2) {\n        return err(\"provide 1 declaration name and 1 function\");\n      }\n      const parsed = nodes.map(nodeParser);\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\n      if (def.typ !== \"ref\") {\n        return err(\"declaration name must be symbol\", def.errCtx);\n      }\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\n      push(ins, [...flat(args), ...func]);\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\n      const typ = op === \"var!\" ? \"var\" : \"let\";\n      ins.push({ typ, value: def.value, errCtx });\n      return ins;\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\n      const pins: ParserIns[] = [];\n      let asStr = node2str(nodes);\n      asStr = op === \"fn\" ? `(fn ${asStr})` : `${op}(${asStr})`;\n      if (op === \"fn\") {\n        const parsedParams = parseParams(nodes, false);\n        params = parsedParams.shape;\n        push(pins, parsedParams.errors);\n        if (!len(nodes)) {\n          return err(\"provide a body\");\n        }\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\n      }\n      //Rewrite partial closure to #(... [body] args)\n      if (op === \"@\") {\n        nodes = [\n          { typ: \"sym\", text: \"...\", errCtx },\n          ...nodes,\n          { typ: \"sym\", text: \"args\", errCtx },\n        ];\n      }\n      push(pins, parseForm(nodes, params, op !== \"@\"));\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\n      const errors = pins.filter(i => i.typ === \"err\");\n      if (len(errors)) {\n        return errors;\n      }\n      if (op === \"fn\") {\n        cins.forEach(i => {\n          if (i.typ === \"npa\") {\n            i.typ = \"upa\";\n          }\n        });\n      }\n      //Calculate captures\n      const captureIns: Ins[] = [];\n      const captured: boolean[] = [];\n      for (let i = 0; i < len(cins); ++i) {\n        const ci = cins[i];\n        const isExe =\n          ci.typ === \"val\" &&\n          i + 1 < len(cins) &&\n          cins[i + 1].typ === \"exe\" &&\n          ((ci.value.t === \"func\" && !ops[ci.value.v]) || ci.value.t === \"str\");\n        captured[i] =\n          (ci.typ === \"ref\" &&\n            !cins.find(i => i.typ === \"let\" && i.value === ci.value)) ||\n          ci.typ === \"npa\" ||\n          isExe;\n        if (captured[i]) {\n          captureIns.push(ci);\n        }\n      }\n      const value = { name: asStr, closureIns: cins, captureIns, captured };\n      return [{ typ: op === \"@\" ? \"par\" : \"clo\", value, errCtx }];\n    }\n\n    //Operation arity check, optionally disabled for partial closures\n    if (ops[op] && doArityCheck) {\n      const errors = arityCheck(op, len(nodes), errCtx);\n      const err = (value: string, eCtx = errCtx) => [\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\n      ];\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\n      if (!errors) {\n        //Upgrade some math and logic functions to their faster counterparts\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\n        }\n      }\n    }\n  }\n\n  const args = nodes.map(nodeParser);\n  const ins: ParserIns[] = flat(args);\n  if (symAt([firstNode]) === \"return\") {\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\n  } else if (head[0].typ === \"ref\") {\n    const { value: v, errCtx } = head[0];\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\n  }\n  push(ins, head);\n  const typ = len(head) > 1 ? \"exa\" : \"exe\";\n  return [...ins, { typ, value: len(args), errCtx }];\n}\n\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\n  if (isToken(node)) {\n    const { errCtx } = node;\n    if (node.typ === \"str\") {\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\n    } else if (node.typ === \"num\") {\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\n    } else if (node.typ === \"sym\") {\n      const { text } = node;\n      const paramNames = params.map(({ name }) => name);\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (text === \"_\") {\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(paramNames, text)) {\n        const param = params.find(({ name }) => name === text)!;\n        if (len(param.position) === 1) {\n          return [{ typ: \"npa\", value: param.position[0], errCtx }];\n        }\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (text === \"PI\" || text === \"E\") {\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    }\n    return [];\n  } else if (!len(node)) {\n    return [];\n  }\n  return parseForm(node, params);\n}\n\n/** Consumes some tokens and returns ParamsShape.\n * Example inputs:\n * \"(fn \"   a [b [c]] d [d c b a]\n * \"(var \" [a] [1 2] b [1 2]\n * \"(function \" [x] (print x) x\n * \"(function \" x [x]\n * \"(fn \"\n * \"(function \"\n * */\nfunction parseParams(\n  nodes: Node[],\n  consumeLast: boolean,\n  position: number[] = [],\n): { shape: ParamsShape; errors: ParserIns[] } {\n  const shape: ParamsShape = [],\n    errs: ParserIns[] = [];\n  let n = 0;\n  while (\n    len(nodes) > (consumeLast ? 0 : 1) &&\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\n  ) {\n    const param = nodes.shift()!;\n    if (!isToken(param)) {\n      param.shift();\n      const parsed = parseParams(param, true, [...position, n]);\n      push(shape, parsed.shape);\n      push(errs, parsed.errors);\n    } else {\n      const { typ, errCtx } = param;\n      if (typ === \"sym\") {\n        shape.push({ name: param.text, position: [...position, n] });\n      } else {\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\n      }\n    }\n    ++n;\n  }\n  return { shape, errors: errs };\n}\n\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\n  const { shape: params, errors } = parseParams(nodes, false);\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\n  for (let i = 0, lim = len(ins); i < lim; i++) {\n    const { typ, value, errCtx } = ins[i];\n    if (typ === \"err\") {\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\n    }\n  }\n  return { name, ins: <Ins[]>ins };\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\n    return errors;\n  }\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\n    }\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\n//TODO: investigate Node implementation replacement\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\n  type TypeInfo = {\n    types?: Val[\"t\"][];\n    val?: Val;\n  };\n  const stack: TypeInfo[] = [];\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\n    const ins = fins[i];\n    switch (ins.typ) {\n      case \"val\":\n        stack.push({ types: [ins.value.t], val: ins.value });\n        break;\n      case \"exa\":\n      case \"exe\": {\n        const head = stack.pop()!;\n        const args = splice(stack, len(stack) - ins.value, ins.value);\n        const badMatch = (okTypes: Val[\"t\"][]) =>\n          args.findIndex(\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\n          );\n        const headIs = (t: Val[\"t\"]) =>\n          head.val\n            ? head.val.t === t\n            : head.types && len(head.types) === 1 && head.types[0] === t;\n        if (head.val && head.val.t === \"func\") {\n          if (head.val.v === \"recur\") {\n            splice(stack, len(stack) - ins.value, ins.value);\n            break;\n          }\n          const errors = typeCheck(\n            head.val.v,\n            args.map(a => a.types ?? []),\n            ins.errCtx,\n            true,\n          );\n          if (errors) {\n            return errors;\n          }\n          const { returns, numeric: onlyNum } = ops[head.val.v];\n          stack.push(\n            onlyNum && onlyNum !== \"in only\"\n              ? { types: [\"num\"] }\n              : { types: returns },\n          );\n        } else if (headIs(\"num\")) {\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return numOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"key\")) {\n          const badArg = badMatch([\"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return keyOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\n          stack.push({});\n        } else if (!head.types && !head.val) {\n          stack.push({});\n        }\n        break;\n      }\n      case \"or\":\n        stack.pop();\n        stack.push({});\n        i += ins.value;\n        break;\n      case \"cat\":\n      case \"var\":\n      case \"let\":\n      case \"dva\":\n      case \"dle\":\n      case \"loo\":\n      case \"jmp\":\n        break;\n      case \"clo\":\n      case \"par\": {\n        const errors = insErrorDetect(ins.value.closureIns);\n        if (errors) {\n          return errors;\n        }\n      }\n      case \"ref\":\n      case \"npa\":\n      case \"upa\":\n      case \"dpa\":\n        stack.push({});\n        break;\n      case \"if\": {\n        stack.pop();\n        stack.push({});\n        const ifIns = slice(fins, i + 1, ins.value + 1);\n        const errors = insErrorDetect(ifIns);\n        if (errors) {\n          return errors;\n        }\n        i += ins.value - 1;\n        break;\n      }\n      case \"mat\": {\n        stack.pop(); //first match\n        stack.pop(); //cond\n        i += ins.value;\n        i += fins[i].value as number; //The first jmp\n        stack.push({});\n        break;\n      }\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          stack.pop();\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n}\n\nexport function parse(\n  code: string,\n  invokeId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, invokeId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const okFuncs: Func[] = [],\n    errors: InvokeError[] = [];\n  const tree = treeise(slice(tokens));\n  const collected = collectFuncs(tree);\n  const namedNodes: NamedNodes[] = [];\n  collected.forEach(nodeOrErr => {\n    if (\"err\" in nodeOrErr) {\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\n    } else {\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\n    }\n  });\n  namedNodes.map(compileFunc).forEach(fae => {\n    if (\"e\" in fae) {\n      errors.push(fae);\n    } else {\n      okFuncs.push(fae);\n    }\n  });\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\n  return { errors, funcs };\n}\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\n\ntype State = { dict: Map<string, Val>; output: string };\n\nfunction get(state: State, key: string): ValOrErr {\n  if (!state.dict.has(key)) {\n    return { kind: \"err\", err: `\"${key}\" not found.` };\n  }\n  return { kind: \"val\", value: state.dict.get(key)! };\n}\n\nfunction set(state: State, key: string, val: Val): string | undefined {\n  state.dict.set(key, val);\n  return undefined;\n}\n\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\n  const nullVal: Val = { t: \"null\", v: undefined };\n  switch (name) {\n    case \"test.function\":\n      state.output += args[0].v + \"\\n\";\n      break;\n    default:\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\n  }\n  return { kind: \"val\", value: nullVal };\n}\n\nconst tests: {\n  name: string;\n  code: string;\n  err?: string[];\n  out?: string;\n}[] = [\n  //Basic snippets\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\n  {\n    name: \"Say Hello, world!\",\n    code: `(print \"Hello, world!\")`,\n    out: `Hello, world!\\nnull`,\n  },\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\n  {\n    name: \"Whens\",\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\n    out: `hi\\n[234 null]`,\n  },\n  {\n    name: \"match and wildcard\",\n    code: `(match [1 2]\n             [0 0] (print \"hello\")\n             [0 2] (print \"bye\")\n             [1 _] \"hey\")`,\n    out: `hey`,\n  },\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\n  {\n    name: \"and & short-circuit\",\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\n    out: `[false true]`,\n  },\n  {\n    name: \"or & short-circuit\",\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\n    out: `-> [true 1]`,\n  },\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\n  {\n    name: \"Key as operation\",\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\n    out: `[24 :abc]`,\n  },\n  {\n    name: \"Dictionary as op 1\",\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\n    out: `24`,\n  },\n  {\n    name: \"Dictionary as op 2\",\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\n  },\n  {\n    name: \"Equalities\",\n    code: `[(= 1 2 1)\n            (!= 1 2 1)\n            (= \"Hello\" \"hello\")\n            (!= \"world\" \"world\")\n            (= [0 [1]] [0 [1]])]`,\n    out: `[false 1 false false [0 [1]]]`,\n  },\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\n  {\n    name: \"Define num and call\",\n    code: `(var f 1) (f [:a :b :c])`,\n    out: `:b`,\n  },\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\n  {\n    name: \"Apply op to let\",\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\n    out: `20`,\n  },\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\n  {\n    name: \"Sum vector of numbers\",\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\n    out: `[6 9]`,\n  },\n  {\n    name: \"Sum vectors of numbers\",\n    code: `(map + [1 2 3] [1 2 3 4])`,\n    out: `[2 4 6]`,\n  },\n  {\n    name: \"Filter by integer\",\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\n    out: `[[:a :b :c] \"hello\"]`,\n  },\n  {\n    name: \"Comments, short decimal\",\n    code: `;((print \"Hello\")\n           .456`,\n    out: `0.456`,\n  },\n  {\n    name: \"Dictionary into vector\",\n    code: `(into [1 2] {3 4 5 6})`,\n    out: `[1 2 [3 4] [5 6]]`,\n  },\n  {\n    name: \"Vector into dictionary\",\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\n    out: `{[0] 2, [2] 3}`,\n  },\n  {\n    name: \"While loop\",\n    code: `(var n 5)\n           (while (< 0 n)\n             (print-str n)\n             (var n (dec n)))`,\n    out: `543210`,\n  },\n  {\n    name: \"Catch error\",\n    code: `(catch\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\n             (print \"hi\"))`,\n    out: `Type`,\n  },\n  //Basic functions and closures\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\n  {\n    name: \"Call greet func\",\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\n    out: `Hello!\\nnull`,\n  },\n  {\n    name: \"Call const value func\",\n    code: `(function const 123) (const)`,\n    out: `123`,\n  },\n  {\n    name: \"Call identity funcs\",\n    code: `(function id1 %)\n           (function id2 x x)\n           [(id1 123) (id2 456)]`,\n    out: `[123 456]`,\n  },\n  {\n    name: \"Call greet with name\",\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\n           (greeting \"Patrick\")`,\n    out: `Hello, Patrick!\\nnull`,\n  },\n  {\n    name: \"Call with too few args\",\n    code: `(function func a b c [a b c]) (func 1 2)`,\n    out: `[1 2 null]`,\n  },\n  {\n    name: \"Define func and call\",\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Anonymous parameters\",\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\n           (avg<n? [0 10 20 30 40] 5)`,\n    out: `false`,\n  },\n  {\n    name: \"Call parameter\",\n    code: `(function f x (x \"hello\")) (f print)`,\n    out: `hello\\nnull`,\n  },\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\n  {\n    name: \"Let num op and call\",\n    code: `(function f (let n 0) (n [1])) (f)`,\n    out: `1`,\n  },\n  {\n    name: \"Explicit return\",\n    code: `(function f (return 123) (print 456)) (f)`,\n    out: `123`,\n  },\n  {\n    name: \"Closure 1\",\n    code: `(let x 10)\n           (let closure #(+ x x))\n           (let x 11)\n           (closure)`,\n    out: `20`,\n  },\n  {\n    name: \"Closure 2\",\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\n    out: `[0 2 4 5 6 8]`,\n  },\n  {\n    name: \"Closure 3\",\n    code: `(function f #(+ x x))\n           (var x 10) (let c20 (f))\n           (var x 20) (let c40 (f))\n           [(c20) (c40)]`,\n    out: `[20 40]`,\n  },\n  {\n    name: \"Func returns closure\",\n    code: `(function f x #(x 2 2))\n           (let closure (f +))\n           (closure)`,\n    out: `4`,\n  },\n  {\n    name: \"Dictionary closure\",\n    code: `(function f x #{x 2})\n           (let closure (f :a))\n           (closure)`,\n    out: `{:a 2}`,\n  },\n  {\n    name: \"Vector closure\",\n    code: `(function f x #[1 x %])\n           (let closure (f 2))\n           (closure 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Closure as head\",\n    code: `(#[% %1 %2] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 1\",\n    code: `(@[] 1 2 3)`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"Partial closure 2\",\n    code: `(@((do +) 2) 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Parameterised closure 1\",\n    code: `((fn a b (+ a b)) 2 2)`,\n    out: `4`,\n  },\n  {\n    name: \"Parameterised closure 2\",\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\n    out: `224`,\n  },\n  {\n    name: \"Closure with mixed lets\",\n    code: `(let a + c 5 d 10)\n           (let closure (fn b (let d 1) (a b c d)))\n           (let a - c 4 d 11)\n           (closure 1)`,\n    out: `7`,\n  },\n  {\n    name: \"Destructure var\",\n    code: `(var [x [y]] [1 [2]]) [y x]`,\n    out: `[2 1]`,\n  },\n  {\n    name: \"Destructure string\",\n    code: `(let [a b c] \"hello\") [a b c]`,\n    out: `[\"h\" \"e\" \"l\"]`,\n  },\n  {\n    name: \"Destructure function\",\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\n    out: `[4 3 2 1 0]`,\n  },\n  {\n    name: \"Destructuring closure\",\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\n    out: `[3 2 1 0]`,\n  },\n  {\n    name: \"Destructuring fn decoy\",\n    code: `(let f (fn a [a [a]])) (f 0)`,\n    out: `[0 [0]]`,\n  },\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\n  //Runtime errors\n  {\n    name: \"String instead of number\",\n    code: `(function sum (.. + args))\n           (print (sum 2 2))\n           (sum 2 \"hi\")`,\n    out: `4`,\n    err: [\"Type\"],\n  },\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\n  {\n    name: \"Expired let retrieve\",\n    code: `(function f (let a 1) a) (f) a`,\n    err: [\"Reference\"],\n  },\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\n  {\n    name: \"Loop budget\",\n    code: `(var n 10000)\n           (while (< 0 n)\n             (var n (dec n)))`,\n    err: [\"Budget\"],\n  },\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\n  {\n    name: \"Head exe arity check\",\n    code: `(((fn +)) 1)`,\n    err: [\"Arity\"],\n  },\n  //Complex functions\n  {\n    name: \"Fibonacci 13\",\n    code: `(function fib n\n             (if (< n 2) n\n               (+ (fib (dec n))\n                  (fib (- n 2)))))\n           (fib 13)`,\n    out: `233`,\n  },\n  {\n    name: \"dedupe (recur)\",\n    code: `(function dedupe list -out\n             (let out (or -out []))\n             (let next (if (out (0 list)) [] [(0 list)]))\n             (if (empty? list) out\n                 (recur (sect list) (into out next))))\n           (dedupe [1 1 2 3 3 3])`,\n    out: `[1 2 3]`,\n  },\n  {\n    name: \"frequencies\",\n    code: `(function frequencies list\n             (reduce #(push % %1 (inc (or (% %1) 0))) {} list))\n           (frequencies \"12121212\")`,\n    out: `{\"1\" 4, \"2\" 4}`,\n  },\n  //Test environment functions\n  {\n    name: \"set get\",\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\n    out: `[5.5 5.5]`,\n  },\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\n  //Syntax errors\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\n  {\n    name: \"Imbalanced quotes\",\n    code: `(print \"Hello)`,\n    err: [\"Parse\"],\n  },\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\n  //Parser type and arity errors\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\n  {\n    name: \"Parser type error 2\",\n    code: `(function f (+ 1 (into {} {})))`,\n    err: [\"Type\"],\n  },\n  {\n    name: \"Parser type error 3\",\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\n    err: [\"Type\"],\n  },\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\n];\n\nexport function doTests(\n  invoke: (\n    ctx: Ctx,\n    code: string,\n    invokeId: string,\n    print: boolean,\n  ) => InvokeResult,\n  terse = true,\n): string[] {\n  const results: {\n    okErr: boolean;\n    okOut: boolean;\n    elapsedMs: number;\n    display: string;\n  }[] = [];\n  for (let t = 0; t < len(tests); ++t) {\n    const { name, code, err, out } = tests[t];\n    const state: State = {\n      dict: new Map<string, Val>(),\n      output: \"\",\n    };\n    const env: Env = { funcs: {}, vars: {} };\n    const startTime = getTimeMs();\n    const valOrErrs = invoke(\n      {\n        get: (key: string) => get(state, key),\n        set: (key: string, val: Val) => set(state, key, val),\n        print: (str, withNewLine) => {\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\n        },\n        exe: (name: string, args: Val[]) => exe(state, name, args),\n        functions: [],\n        env,\n        loopBudget: 10000,\n        rangeBudget: 1000,\n        callBudget: 1000,\n        recurBudget: 10000,\n      },\n      code,\n      code,\n      true,\n    );\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\n    const okOut = !out || trim(state.output) === out;\n    const elapsedMs = getTimeMs() - startTime;\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\n      padEnd(`${t + 1}`, 3),\n      padEnd(name, 24),\n      padEnd(`${elapsedMs}ms`, 6),\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\n      okErr ||\n        errors.map(\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\n        ),\n    ];\n    results.push({\n      okErr,\n      okOut,\n      elapsedMs,\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\n    });\n  }\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\n  return concat(\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\n  );\n}\n","import { len, slice, splice } from \"./poly-fills\";\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\n\nexport const num = ({ v }: Val) => v as number;\nexport const str = ({ v }: Val) => v as string;\nexport const vec = ({ v }: Val) => v as Val[];\nexport const dic = ({ v }: Val) => v as Dict;\n\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\n\nexport const isEqual = (a: Val, b: Val) => {\n  if (a.t === \"wild\" || b.t === \"wild\") {\n    return true;\n  }\n  if (a.t !== b.t) {\n    return false;\n  }\n  switch (a.t) {\n    case \"null\":\n      return true;\n    case \"bool\":\n      return a.v === b.v;\n    case \"num\":\n      return a.v === b.v;\n    case \"vec\":\n      return isVecEqual(a.v, vec(b));\n    case \"dict\": {\n      const bd = dic(b);\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\n    }\n    case \"str\":\n    case \"ref\":\n    case \"key\":\n    case \"func\":\n      return str(a) === str(b);\n    case \"clo\":\n      return (<Func>a.v).name === (<Func>b.v).name;\n    case \"ext\":\n      return a.v === b.v;\n  }\n  return assertUnreachable(a);\n};\n\nexport const stringify = (vals: Val[]) =>\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\n\nexport const val2str = (val: Val): string => {\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\n  if (val.t === \"clo\") {\n    return val.v.name ?? \"\";\n  } else if (val.t === \"vec\") {\n    return `[${val.v.map(quoted).join(\" \")}]`;\n  } else if (val.t === \"dict\") {\n    const { keys, vals } = val.v;\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\n    return `{${entries.join(\", \")}}`;\n  } else if (val.t === \"null\") {\n    return \"null\";\n  } else if (val.t === \"wild\") {\n    return \"_\";\n  }\n  return `${val.v}`;\n};\n\nexport const asArray = (val: Val): Val[] =>\n  val.t === \"vec\"\n    ? slice(val.v)\n    : val.t === \"str\"\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\n    : val.t === \"dict\"\n    ? val.v.keys.map((k, i) => ({\n        t: \"vec\",\n        v: [k, val.v.vals[i]],\n      }))\n    : [];\n\nexport const toDict = (args: Val[]): Val => {\n  if (len(args) % 2 === 1) {\n    args.pop();\n  }\n  const keys = args.filter((_, i) => i % 2 === 0);\n  const vals = args.filter((_, i) => i % 2 === 1);\n  const ddKeys: Val[] = [],\n    ddVals: Val[] = [];\n  keys.forEach((key, i) => {\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\n    if (existingIdx === -1) {\n      ddKeys.push(key);\n      ddVals.push(vals[i]);\n    } else {\n      ddVals[existingIdx] = vals[i];\n    }\n  });\n  return {\n    t: \"dict\",\n    v: { keys: ddKeys, vals: ddVals },\n  };\n};\n\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\n  const idx = keys.findIndex(k => isEqual(k, key));\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\n};\n\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    nVals[idx] = val;\n  } else {\n    nKeys.push(key);\n    nVals.push(val);\n  }\n  return <Dict>{ keys: nKeys, vals: nVals };\n};\n\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\n  const idx = keys.findIndex(k => isEqual(k, key));\n  if (idx !== -1) {\n    splice(nKeys, idx, 1);\n    splice(nVals, idx, 1);\n  }\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\n};\n\nexport function errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n","export const insituxVersion = 20220103;\nimport { asBoo } from \"./checks\";\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\nimport { parse } from \"./parse\";\nimport * as pf from \"./poly-fills\";\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\nconst { logn, log2, log10 } = pf;\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\nconst { getTimeMs, randInt, randNum } = pf;\nconst { isNum, len, objKeys, range, toNum } = pf;\nimport { doTests } from \"./test\";\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\nimport { ExternalFunction, ExternalHandler } from \"./types\";\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\n\nconst externalOps: { [name: string]: ExternalHandler } = {};\nlet stack: Val[] = [];\nlet lets: { [key: string]: Val }[] = [];\nlet recurArgs: undefined | Val[];\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\nconst _num = (v: number) => stack.push({ t: \"num\", v });\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\n\nfunction exeOp(\n  op: string,\n  args: Val[],\n  ctx: Ctx,\n  errCtx: ErrCtx,\n  checkArity: boolean,\n): InvokeError[] | undefined {\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\n  //Optional arity check\n  if (checkArity) {\n    const violations = arityCheck(op, len(args), errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n  //Argument type check\n  {\n    const types = args.map(a => [a.t]);\n    const violations = typeCheck(op, types, errCtx);\n    if (violations) {\n      return violations;\n    }\n  }\n\n  switch (op) {\n    case \"str\":\n      stack.push({ t: \"str\", v: stringify(args) });\n      return;\n    case \"print\":\n    case \"print-str\":\n      ctx.print(stringify(args), op === \"print\");\n      _nul();\n      return;\n    case \"vec\":\n      _vec(args);\n      return;\n    case \"dict\":\n      stack.push(toDict(args));\n      return;\n    case \"len\":\n      _num(\n        args[0].t === \"str\"\n          ? slen(args[0].v)\n          : args[0].t === \"vec\"\n          ? len(args[0].v)\n          : len(dic(args[0]).keys),\n      );\n      return;\n    case \"to-num\":\n      if (isNum(args[0].v)) {\n        _num(toNum(args[0].v));\n      } else {\n        _nul();\n      }\n      return;\n    case \"to-key\":\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\n      return;\n    case \"!\":\n      _boo(!asBoo(args[0]));\n      return;\n    case \"=\":\n    case \"!=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\n          _boo(false);\n          return;\n        }\n      }\n      stack.push(args[0]);\n      return;\n    case \"-\":\n      _num(\n        len(args) === 1\n          ? -num(args[0])\n          : args.map(num).reduce((sum, n) => sum - n),\n      );\n      return;\n    case \"**\":\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\n      return;\n    case \"+\":\n      _num(args.map(num).reduce((sum, n) => sum + n));\n      return;\n    case \"*\":\n      _num(args.map(num).reduce((sum, n) => sum * n));\n      return;\n    case \"/\":\n      _num(args.map(num).reduce((sum, n) => sum / n));\n      return;\n    case \"//\":\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\n      return;\n    case \"fast=\":\n    case \"fast!=\":\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\n        _boo(false);\n        return;\n      }\n      stack.push(args[0]);\n      return;\n    case \"fast-\":\n      _num(<number>args[0].v - <number>args[1].v);\n      return;\n    case \"fast+\":\n      _num(<number>args[0].v + <number>args[1].v);\n      return;\n    case \"fast*\":\n      _num(<number>args[0].v * <number>args[1].v);\n      return;\n    case \"fast/\":\n      _num(<number>args[0].v / <number>args[1].v);\n      return;\n    case \"fast//\":\n      _num(floor(<number>args[0].v / <number>args[1].v));\n      return;\n    case \"fast<\":\n      _boo(<number>args[0].v < <number>args[1].v);\n      return;\n    case \"fast>\":\n      _boo(<number>args[0].v > <number>args[1].v);\n      return;\n    case \"fast<=\":\n      _boo(<number>args[0].v <= <number>args[1].v);\n      return;\n    case \"fast>=\":\n      _boo(<number>args[0].v >= <number>args[1].v);\n      return;\n    case \"rem\":\n      _num(args.map(num).reduce((sum, n) => sum % n));\n      return;\n    case \"min\":\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\n      return;\n    case \"max\":\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\n      return;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\":\n      for (let i = 1, lim = len(args); i < lim; ++i) {\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\n        if (\n          (op === \"<\" && a >= b) ||\n          (op === \">\" && a <= b) ||\n          (op === \"<=\" && a > b) ||\n          (op === \">=\" && a < b)\n        ) {\n          _boo(false);\n          return;\n        }\n      }\n      _boo(true);\n      return;\n    case \"inc\":\n      _num(<number>args[0].v + 1);\n      return;\n    case \"dec\":\n      _num(<number>args[0].v - 1);\n      return;\n    case \"abs\":\n      _num(abs(<number>args[0].v));\n      return;\n    case \"round\":\n      if (len(args) === 2) {\n        const x = 10 ** <number>args[0].v;\n        _num(round(<number>args[1].v * x) / x);\n      } else {\n        _num(round(<number>args[0].v));\n      }\n      return;\n    case \"sin\":\n    case \"cos\":\n    case \"tan\":\n    case \"sqrt\":\n    case \"floor\":\n    case \"ceil\":\n    case \"logn\":\n    case \"log2\":\n    case \"log10\": {\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\n      _num(f(num(args[0])));\n      return;\n    }\n    case \"and\":\n      _boo(args.every(asBoo));\n      return;\n    case \"or\":\n      _boo(args.some(asBoo));\n      return;\n    case \"xor\":\n      if (asBoo(args[0]) !== asBoo(args[1])) {\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\n      } else {\n        _boo(false);\n      }\n      return;\n    case \"&\":\n    case \"|\":\n    case \"^\":\n    case \"<<\":\n    case \">>\":\n    case \">>>\":\n      const [a, b] = [num(args[0]), num(args[1])];\n      _num(\n        op === \"&\"\n          ? a & b\n          : op === \"|\"\n          ? a | b\n          : op === \"^\"\n          ? a ^ b\n          : op === \"<<\"\n          ? a << b\n          : op === \">>\"\n          ? a >> b\n          : a >>> b,\n      );\n      return;\n    case \"~\":\n      _num(~num(args[0]));\n      return;\n    case \"odd?\":\n    case \"even?\":\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\n      return;\n    case \"pos?\":\n    case \"neg?\":\n    case \"zero?\": {\n      const n = num(args[0]);\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\n      return;\n    }\n    case \"null?\":\n    case \"num?\":\n    case \"bool?\":\n    case \"str?\":\n    case \"dict?\":\n    case \"vec?\":\n    case \"key?\":\n    case \"func?\":\n    case \"wild?\":\n    case \"ext?\": {\n      const { t } = args[0];\n      _boo(\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\n          substr(op, 0, slen(op) - 1) === t,\n      );\n      return;\n    }\n    case \"has?\":\n      _boo(sub(str(args[0]), str(args[1])));\n      return;\n    case \"idx\": {\n      let i = -1;\n      if (args[0].t === \"str\") {\n        if (args[1].t !== \"str\") {\n          return tErr(\"strings can only contain strings\");\n        }\n        if (len(args) < 3) {\n          i = subIdx(args[0].v, args[1].v);\n        } else {\n          const arr = args[0].v.split(\"\");\n          arr[num(args[2])] = args[1].v;\n          _str(arr.join(\"\"));\n          return;\n        }\n      } else if (args[0].t === \"vec\") {\n        if (len(args) < 3) {\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\n        } else {\n          const v = slice(args[0].v);\n          v[num(args[2])] = args[1];\n          _vec(v);\n          return;\n        }\n      }\n      if (i === -1) {\n        _nul();\n      } else {\n        _num(i);\n      }\n      return;\n    }\n    case \"map\":\n    case \"for\":\n    case \"reduce\":\n    case \"filter\":\n    case \"remove\":\n    case \"find\":\n    case \"count\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      if (op === \"map\" || op === \"for\") {\n        const badArg = args.findIndex(\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\n        );\n        if (badArg !== -1) {\n          const badType = typeNames[args[badArg].t];\n          return tErr(\n            `argument ${\n              badArg + 2\n            } must be either: string, vector, dictionary, not ${badType}`,\n          );\n        }\n      }\n\n      if (op === \"for\") {\n        const arrays = args.map(asArray);\n        const lims = arrays.map(len);\n        const divisors = lims.map((_, i) =>\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\n        );\n        divisors.unshift(1);\n        const lim = divisors.pop()!;\n        if (lim > ctx.loopBudget) {\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\n        }\n        const array: Val[] = [];\n        for (let t = 0; t < lim; ++t) {\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      if (op === \"map\") {\n        const arrays = args.map(asArray);\n        const shortest = min(...arrays.map(len));\n        const array: Val[] = [];\n        for (let i = 0; i < shortest; ++i) {\n          const errors = closure(arrays.map(a => a[i]));\n          if (errors) {\n            return errors;\n          }\n          array.push(stack.pop()!);\n        }\n        _vec(array);\n        return;\n      }\n\n      if (op !== \"reduce\") {\n        const arrArg = args.shift()!;\n        const array = asArray(arrArg);\n        const isRemove = op === \"remove\",\n          isFind = op === \"find\",\n          isCount = op === \"count\";\n        const filtered: Val[] = [];\n        let count = 0;\n        for (let i = 0, lim = len(array); i < lim; ++i) {\n          const errors = closure([array[i], ...args]);\n          if (errors) {\n            return errors;\n          }\n          const b = asBoo(stack.pop()!);\n          if (isCount) {\n            count += b ? 1 : 0;\n          } else if (isFind) {\n            if (b) {\n              stack.push(array[i]);\n              return;\n            }\n          } else if (b !== isRemove) {\n            filtered.push(array[i]);\n          }\n        }\n        switch (op) {\n          case \"count\":\n            _num(count);\n            return;\n          case \"find\":\n            _nul();\n            return;\n        }\n        if (arrArg.t === \"str\") {\n          _str(filtered.map(v => val2str(v)).join(\"\"));\n        } else if (arrArg.t === \"dict\") {\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\n        } else {\n          _vec(filtered);\n        }\n        return;\n      }\n      const arrayVal = args.pop()!;\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\n        return tErr(\n          `must reduce either: string, vector, dictionary, not ${\n            typeNames[arrayVal.t]\n          }`,\n        );\n      }\n      const array = asArray(arrayVal);\n\n      if (!len(array)) {\n        if (len(args)) {\n          stack.push(args[0]);\n        } else {\n          _vec();\n        }\n        return;\n      }\n      if (len(array) < 2 && !len(args)) {\n        push(stack, array);\n        return;\n      }\n\n      let reduction: Val = (len(args) ? args : array).shift()!;\n      for (let i = 0, lim = len(array); i < lim; ++i) {\n        const errors = closure([reduction, array[i]]);\n        if (errors) {\n          return errors;\n        }\n        reduction = stack.pop()!;\n      }\n      stack.push(reduction);\n      return;\n    }\n    case \"repeat\": {\n      const toRepeat = args.shift()!;\n      const result: Val[] = [];\n      const count = num(args[0]);\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\n        const closure = getExe(ctx, toRepeat, errCtx);\n        for (let i = 0; i < count; ++i) {\n          const errors = closure([{ t: \"num\", v: i }]);\n          if (errors) {\n            return errors;\n          }\n          result.push(stack.pop()!);\n        }\n      } else {\n        for (let i = 0; i < count; ++i) {\n          result.push(toRepeat);\n        }\n      }\n      _vec(result);\n      return;\n    }\n    case \"->\": {\n      stack.push(args.shift()!);\n      for (let i = 0, lim = len(args); i < lim; ++i) {\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\n        if (errors) {\n          return errors;\n        }\n      }\n      return;\n    }\n    case \"rand-int\":\n    case \"rand\":\n      {\n        const nArgs = len(args);\n        const [a, b] = [\n          nArgs < 2 ? 0 : num(args[0]),\n          nArgs === 0\n            ? 1 + toNum(op === \"rand-int\")\n            : nArgs === 1\n            ? num(args[0])\n            : num(args[1]),\n        ];\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\n      }\n      return;\n    case \"do\":\n    case \"val\":\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\n      return;\n    case \".\":\n    case \"..\":\n    case \"...\": {\n      const closure = getExe(ctx, args.shift()!, errCtx);\n      if (op === \".\") {\n        return closure(args);\n      }\n      let flatArgs: Val[] = args;\n      if (op === \"..\") {\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\n      } else {\n        const a = flatArgs.pop()!;\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\n      }\n      return closure(flatArgs);\n    }\n    case \"into\": {\n      if (args[0].t === \"vec\") {\n        _vec(concat(args[0].v, asArray(args[1])));\n      } else {\n        if (args[1].t === \"vec\") {\n          stack.push(\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\n          );\n        } else {\n          const { keys, vals } = dic(args[0]);\n          const d1 = dic(args[1]);\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\n        }\n      }\n      return;\n    }\n    case \"push\": {\n      if (args[0].t === \"vec\") {\n        const v = args[0].v;\n        if (len(args) < 3) {\n          _vec(concat(v, [args[1]]));\n        } else {\n          const n = num(args[2]);\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\n        }\n      } else {\n        if (len(args) < 3) {\n          stack.push(dictDrop(dic(args[0]), args[1]));\n        } else {\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\n        }\n      }\n      return;\n    }\n    case \"sect\": {\n      const v = args[0];\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\n      let a = 0,\n        b = vlen;\n      switch (len(args)) {\n        case 1:\n          a = 1;\n          break;\n        case 2: {\n          const del = num(args[1]);\n          if (del < 0) {\n            b += del;\n          } else {\n            a += del;\n          }\n          break;\n        }\n        case 3: {\n          const skip = num(args[1]);\n          const take = num(args[2]);\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\n          b = (take < 0 ? b : a) + take;\n          break;\n        }\n      }\n      a = max(a, 0);\n      b = min(b, vlen);\n      if (a > b) {\n        (v.t === \"vec\" ? _vec : _str)();\n        return;\n      }\n      if (v.t === \"vec\") {\n        _vec(slice(v.v, a, b));\n      } else {\n        _str(substr(str(args[0]), a, b - a));\n      }\n      return;\n    }\n    case \"reverse\":\n      if (args[0].t === \"str\") {\n        _str(stringify(reverse(asArray(args[0]))));\n      } else {\n        _vec(reverse(asArray(args[0])));\n      }\n      return;\n    case \"sort\": {\n      const src = asArray(args[0]);\n      if (!len(src)) {\n        _vec();\n        return;\n      }\n      const mapped: Val[][] = [];\n      if (len(args) === 1) {\n        push(\n          mapped,\n          src.map(v => [v, v]),\n        );\n      } else {\n        const closure = getExe(ctx, args.pop()!, errCtx);\n        for (let i = 0, lim = len(src); i < lim; ++i) {\n          const errors = closure([src[i]]);\n          if (errors) {\n            return errors;\n          }\n          mapped.push([src[i], stack.pop()!]);\n        }\n      }\n      const okT = mapped[0][1].t;\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\n        return tErr(\"can only sort by all number or all string\");\n      }\n      if (mapped[0][1].t === \"num\") {\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\n      } else {\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\n      }\n      _vec(mapped.map(([v]) => v));\n      return;\n    }\n    case \"range\": {\n      const [a, b, s] = args.map(num);\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\n      const [x, y] =\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\n      const step = sign((y - x) * (s || 1)) * (s || 1);\n      const count = ceil(abs((y - x) / step));\n      if (!count) {\n        _vec([]);\n        return;\n      }\n      if (count > ctx.rangeBudget) {\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\n      }\n      ctx.rangeBudget -= count;\n      const nums = range(count).map(n => n * step + x);\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\n      return;\n    }\n    case \"empty?\":\n      _boo(!len(asArray(args[0])));\n      return;\n    case \"keys\":\n    case \"vals\":\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\n      return;\n    case \"split\":\n      _vec(\n        str(args[len(args) - 1])\n          .split(len(args) - 1 ? str(args[0]) : \" \")\n          .map(v => <Val>{ t: \"str\", v }),\n      );\n      return;\n    case \"join\":\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\n      return;\n    case \"starts?\":\n    case \"ends?\":\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\n      return;\n    case \"upper-case\":\n    case \"lower-case\":\n    case \"trim\":\n    case \"trim-start\":\n    case \"trim-end\":\n      _str(\n        (op === \"upper-case\"\n          ? upperCase\n          : op === \"lower-case\"\n          ? lowerCase\n          : op === \"trim\"\n          ? trim\n          : op === \"trim-start\"\n          ? trimStart\n          : trimEnd)(str(args[0])),\n      );\n      return;\n    case \"str*\": {\n      const text = str(args[0]);\n      _str(\n        range(max(ceil(num(args[1])), 0))\n          .map(n => text)\n          .join(\"\"),\n      );\n      return;\n    }\n    case \"char-code\": {\n      if (args[0].t === \"str\") {\n        const n = len(args) > 1 ? num(args[1]) : 0;\n        const s = str(args[0]);\n        if (slen(s) <= n || n < 0) {\n          _nul();\n        } else {\n          _num(charCode(strIdx(s, n)));\n        }\n      } else {\n        _str(codeChar(num(args[0])));\n      }\n      return;\n    }\n    case \"time\":\n      _num(getTimeMs());\n      return;\n    case \"version\":\n      _num(insituxVersion);\n      return;\n    case \"tests\":\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\n      return;\n    case \"symbols\":\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\n      return;\n    case \"eval\": {\n      delete ctx.env.funcs[\"entry\"];\n      const sLen = len(stack);\n      const invokeId = `${errCtx.invokeId} eval`;\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\n      if (errors) {\n        return [\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\n          ...errors,\n        ];\n      }\n      if (sLen === len(stack)) {\n        _nul();\n      }\n      return;\n    }\n    case \"recur\":\n      recurArgs = args;\n      return;\n    case \"reset\":\n      ctx.env.vars = {};\n      ctx.env.funcs = {};\n      lets = [];\n      _nul();\n      return;\n  }\n\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\n}\n\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\n  {\n    e: \"Arity\",\n    m: `${typeNames[t]} as op requires one sole argument`,\n    errCtx,\n  },\n];\nfunction getExe(\n  ctx: Ctx,\n  op: Val,\n  errCtx: ErrCtx,\n  checkArity = true,\n): (params: Val[]) => InvokeError[] | undefined {\n  if (op.t === \"str\" || op.t === \"func\") {\n    const name = op.v;\n    if (ops[name]) {\n      if (ops[name].external) {\n        return (params: Val[]) => {\n          const valOrErr = externalOps[name](params);\n          if (valOrErr.kind === \"err\") {\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\n          }\n          stack.push(valOrErr.value);\n        };\n      }\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\n    }\n    if (name in ctx.env.funcs) {\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\n    }\n    if (name in ctx.env.vars) {\n      return getExe(ctx, ctx.env.vars[name], errCtx);\n    }\n    if (name in lets[len(lets) - 1]) {\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\n    }\n    if (starts(name, \"$\")) {\n      return (params: Val[]) => {\n        if (!len(params)) {\n          return monoArityError(op.t, errCtx);\n        }\n        const err = ctx.set(substr(name, 1), params[0]);\n        stack.push(params[0]);\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\n      };\n    }\n    return (params: Val[]) => {\n      const valAndErr = ctx.exe(name, params);\n      if (valAndErr.kind === \"val\") {\n        stack.push(valAndErr.value);\n        return;\n      }\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\n    };\n  } else if (op.t === \"clo\") {\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\n  } else if (op.t === \"key\") {\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      if (params[0].t === \"dict\") {\n        stack.push(dictGet(dic(params[0]), op));\n      } else if (params[0].t === \"vec\") {\n        const found = vec(params[0]).find(v => isEqual(v, op));\n        stack.push(found ?? { t: \"null\", v: undefined });\n      } else {\n        return keyOpErr(errCtx, [params[0].t]);\n      }\n      return;\n    };\n  } else if (op.t === \"num\") {\n    const n = floor(op.v);\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      const a = params[0];\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\n        return numOpErr(errCtx, [a.t]);\n      }\n      const arr = asArray(a),\n        alen = len(arr);\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\n        _nul();\n      } else if (n < 0) {\n        stack.push(arr[alen + n]);\n      } else {\n        stack.push(arr[n]);\n      }\n      return;\n    };\n  } else if (op.t === \"vec\") {\n    const { v } = op;\n    return (params: Val[]) => {\n      if (!len(params)) {\n        return monoArityError(op.t, errCtx);\n      }\n      const found = v.find(val => isEqual(val, params[0]));\n      if (found) {\n        stack.push(found);\n      } else {\n        _nul();\n      }\n      return;\n    };\n  } else if (op.t === \"dict\") {\n    const dict = op.v;\n    return (params: Val[]) => {\n      if (len(params) === 1) {\n        stack.push(dictGet(dict, params[0]));\n      } else if (len(params) === 2) {\n        _dic(dictSet(dict, params[0], params[1]));\n      } else {\n        return [\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\n        ];\n      }\n      return;\n    };\n  } else if (op.t === \"bool\") {\n    const cond = op.v;\n    return (params: Val[]) => {\n      if (!len(params) || len(params) > 2) {\n        return [\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\n        ];\n      }\n      stack.push(\n        cond\n          ? params[0]\n          : len(params) > 1\n          ? params[1]\n          : { t: \"null\", v: undefined },\n      );\n      return;\n    };\n  }\n  return _ => [\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\n  ];\n}\n\nfunction errorsToDict(errors: InvokeError[]) {\n  const newKey = (d: Dict, k: string, v: Val) =>\n    dictSet(d, { t: \"key\", v: k }, v);\n  return errors.map(({ e, m, errCtx }) => {\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\n    return <Val>{ t: \"dict\", v: dict };\n  });\n}\n\nfunction destruct(args: Val[], shape: number[]): Val {\n  let arr: Val[] = args;\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\n    const val = arr[shape[a]];\n    if (val.t === \"vec\") {\n      arr = val.v;\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\n    } else {\n      return { t: \"null\", v: undefined };\n    }\n  }\n  const pos = shape[len(shape) - 1];\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\n}\n\nfunction exeFunc(\n  ctx: Ctx,\n  func: Func,\n  args: Val[],\n  inClosure = false,\n): InvokeError[] | undefined {\n  --ctx.callBudget;\n  if (!inClosure) {\n    lets.push({});\n  }\n  const stackLen = len(stack);\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\n    const ins = func.ins[i];\n    const { errCtx } = func.ins[i];\n\n    const tooManyLoops = ctx.loopBudget < 1;\n    if (tooManyLoops || ctx.callBudget < 1) {\n      return [\n        {\n          e: \"Budget\",\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\n          errCtx,\n        },\n      ];\n    }\n\n    switch (ins.typ) {\n      case \"val\":\n        stack.push(ins.value);\n        break;\n      case \"var\":\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\n        break;\n      case \"let\":\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\n        break;\n      case \"dle\":\n      case \"dva\": {\n        const val = stack.pop()!;\n        let last: Val | undefined;\n        ins.value.forEach(({ name, position }) => {\n          if (ins.typ === \"dva\") {\n            last = ctx.env.vars[name] = destruct([val], position);\n          } else {\n            last = lets[len(lets) - 1][name] = destruct([val], position);\n          }\n        });\n        stack.push(last!);\n        break;\n      }\n      case \"npa\":\n      case \"upa\": {\n        const paramIdx = ins.value;\n        if (paramIdx === -1) {\n          _vec(args);\n        } else if (len(args) <= paramIdx) {\n          _nul();\n        } else {\n          stack.push(args[paramIdx]);\n        }\n        break;\n      }\n      case \"dpa\":\n        stack.push(destruct(args, ins.value));\n        break;\n      case \"ref\": {\n        const name = ins.value;\n        if (ops[name]) {\n          _fun(name);\n        } else if (starts(name, \"$\")) {\n          const valAndErr = ctx.get(substr(name, 1));\n          if (valAndErr.kind === \"err\") {\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\n          }\n          stack.push(valAndErr.value);\n        } else if (name in ctx.env.vars) {\n          stack.push(ctx.env.vars[name]);\n        } else if (name in lets[len(lets) - 1]) {\n          stack.push(lets[len(lets) - 1][name]);\n        } else if (name in ctx.env.funcs) {\n          _fun(name);\n        } else {\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\n        }\n        break;\n      }\n      case \"exa\":\n      case \"exe\": {\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\n        const nArgs = ins.value;\n        const params = splice(stack, len(stack) - nArgs, nArgs);\n        const errors = closure(params);\n        if (errors) {\n          //Find next catch statement\n          const nextCat = slice(func.ins, i).findIndex(\n            ins => ins.typ === \"cat\",\n          );\n          if (nextCat !== -1) {\n            i += nextCat;\n            lets[len(lets) - 1][\"errors\"] = {\n              t: \"vec\",\n              v: errorsToDict(errors),\n            };\n            break;\n          }\n          return errors;\n        }\n        if (recurArgs) {\n          lets[len(lets) - 1] = {};\n          i = -1;\n          const nArgs = ins.value;\n          args = recurArgs;\n          recurArgs = undefined;\n          --ctx.recurBudget;\n          if (!ctx.recurBudget) {\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\n          }\n          break;\n        }\n        break;\n      }\n      case \"or\":\n        if (asBoo(stack[len(stack) - 1])) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      case \"mat\": {\n        const a = stack[len(stack) - 2];\n        if (!isEqual(a, stack.pop()!)) {\n          i += ins.value;\n        } else {\n          stack.pop();\n        }\n        break;\n      }\n      case \"if\":\n        if (!asBoo(stack.pop()!)) {\n          i += ins.value;\n        }\n        break;\n      case \"jmp\":\n      case \"cat\":\n        i += ins.value;\n        break;\n      case \"loo\":\n        i += ins.value;\n        --ctx.loopBudget;\n        break;\n      case \"pop\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          splice(stack, stackLen, len(stack) - stackLen - 1);\n        } else {\n          _nul();\n        }\n        i = lim;\n        break;\n      case \"clo\":\n      case \"par\": {\n        const { name, captured, captureIns } = ins.value;\n        let { closureIns: cins } = ins.value;\n        const newCins: Ins[] = [];\n        if (!len(captureIns)) {\n          push(newCins, cins);\n        } else {\n          cins = cins.map((ins, i) => {\n            const decl =\n              ins.typ === \"val\" &&\n              ins.value.t === \"str\" &&\n              (lets[len(lets) - 1][ins.value.v] ?? ctx.env.vars[ins.value.v]);\n            captured[i] = decl ? false : captured[i];\n            return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\n          });\n          const errors = exeFunc(ctx, { ins: captureIns }, args, true);\n          if (errors) {\n            return errors;\n          }\n          const numIns = len(captureIns);\n          const captures = splice(stack, len(stack) - numIns, numIns);\n          const cap = (value: Val) => <Ins>{ typ: \"val\", value, errCtx };\n          for (let i = 0, c = 0; i < len(captured); ++i) {\n            newCins.push(captured[i] ? cap(captures[c++]) : cins[i]);\n          }\n        }\n        stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: newCins } });\n        break;\n      }\n      default:\n        assertUnreachable(ins);\n    }\n  }\n  if (!inClosure) {\n    lets.pop();\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\n  }\n  return;\n}\n\nfunction parseAndExe(\n  ctx: Ctx,\n  code: string,\n  invokeId: string,\n): InvokeError[] | undefined {\n  const parsed = parse(code, invokeId);\n  if (len(parsed.errors)) {\n    return parsed.errors;\n  }\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\n  if (!(\"entry\" in ctx.env.funcs)) {\n    return;\n  }\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\n}\n\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\n  functions.forEach(({ name, definition, handler }) => {\n    if (ops[name] && !externalOps[name]) {\n      throw \"Redefining internal operations is disallowed.\";\n    }\n    ops[name] = { ...definition, external: true };\n    externalOps[name] = handler;\n  });\n}\n\nfunction removeExternalOperations(functions: ExternalFunction[]) {\n  functions.forEach(({ name }) => {\n    delete ops[name];\n    delete externalOps[name];\n  });\n}\n\nfunction innerInvoke(\n  ctx: Ctx,\n  closure: () => InvokeError[] | undefined,\n): InvokeResult {\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\n  ingestExternalOperations(ctx.functions);\n  const errors = closure();\n  removeExternalOperations(ctx.functions);\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\n  delete ctx.env.funcs[\"entry\"];\n  const value = stack.pop();\n  [stack, lets] = [[], []];\n  return errors\n    ? { kind: \"errors\", errors }\n    : value\n    ? { kind: \"val\", value }\n    : { kind: \"empty\" };\n}\n\n/**\n * Parses and executes the given code.\n * @param ctx An environment context you retain.\n * @param code The code to parse and execute.\n * @param invokeId A unique ID referenced in invocation errors.\n * @param printResult Automatically print the final value of this invocation?\n * @returns Invocation errors caused during execution of the code,\n * or the final value of the invocation.\n */\nexport function invoke(\n  ctx: Ctx,\n  code: string,\n  invokeId: string,\n  printResult = false,\n): InvokeResult {\n  const result = innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId));\n  if (printResult && result.kind === \"val\") {\n    ctx.print(val2str(result.value), true);\n  }\n  return result;\n}\n\n/**\n * Executes a user-defined Insitux function by name.\n * @param ctx An environment context you retain.\n * @param funcName The function to execute.\n * @param params The parameters to pass to the function.\n * @returns Invocation errors caused during execution of the function,\n * or the final value of the invocation,\n * or undefined if the function was not found.\n */\nexport function invokeFunction(\n  ctx: Ctx,\n  funcName: string,\n  params: Val[],\n): InvokeResult | undefined {\n  if (!(funcName in ctx.env.funcs)) {\n    return;\n  }\n  return innerInvoke(ctx, () => exeFunc(ctx, ctx.env.funcs[funcName], params));\n}\n\n/**\n * @param ctx An environment context you retain.\n * @param alsoSyntax To optionally include syntax symbols.\n * @returns List of symbols defined in Insitux, including built-in operations,\n * (optionally) syntax, constants, and user-defined functions.\n */\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\n  let syms = alsoSyntax\n    ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"when\", \"while\", \"match\", \"catch\"]\n    : [];\n  push(syms, [\"args\", \"PI\", \"E\"]);\n  syms = concat(syms, objKeys(ops));\n  syms = concat(syms, objKeys(ctx.env.funcs));\n  syms = concat(syms, objKeys(ctx.env.vars));\n  const hidden = [\"entry\"];\n  syms = syms.filter(o => !has(hidden, o));\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\n}\n","import { invoke } from \".\";\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\nimport { getTimeMs } from \"./poly-fills\";\nimport { Ctx } from \"./types\";\n\nexport type InvokeOutput = {\n  type: \"message\" | \"error\";\n  text: string;\n}[];\n\nconst invocations = new Map<string, string>();\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\n\nexport function invoker(ctx: Ctx, code: string, id?: string): InvokeOutput {\n  id = id ? `-${id}` : `${getTimeMs()}`;\n  invocations.set(id, code);\n  const valOrErrs = invoke(ctx, code, id, true);\n  if (valOrErrs.kind !== \"errors\") {\n    return [];\n  }\n  let out: InvokeOutput = [];\n  const msg = (text: string) => out.push({ type: \"message\", text });\n  const err = (text: string) => out.push({ type: \"error\", text });\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\n    const invocation = invocations.get(invokeId);\n    if (!invocation) {\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\n      return;\n    }\n    const lineText = invocation.split(\"\\n\")[line - 1];\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\n    const half1 = trimStart(substr(lineText, 0, col - 1));\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\n    if (!sym) {\n      const half2 = substr(lineText, col);\n      err(lineText[col - 1]);\n      msg(`${half2}\\n`);\n    } else {\n      const half2 = substr(lineText, col - 1 + slen(sym));\n      err(sym);\n      msg(`${half2}\\n`);\n    }\n    msg(`${e} Error: ${m}.\\n`);\n  });\n  return out;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"process\");","import readline = require(\"readline\");\nimport { appendFileSync, existsSync, readFileSync, writeFileSync } from \"fs\";\nimport { symbols } from \".\";\nimport { Ctx, defaultCtx, Val, ValOrErr } from \"./types\";\nimport { ExternalFunction, Operation } from \"./types\";\nimport { InvokeOutput, invoker, parensRx } from \"./invoker\";\nimport { tokenise } from \"./parse\";\nimport prompt = require(\"prompt-sync\");\nimport { exit } from \"process\";\n\nconst nullVal: ValOrErr = { kind: \"val\", value: { t: \"null\", v: undefined } };\n\n//#region External operations\nfunction read(path: string, asLines: boolean) {\n  if (!existsSync(path)) {\n    return nullVal;\n  }\n  const content = readFileSync(path).toString();\n  const str = (v: string) => <Val>{ t: \"str\", v };\n  return <ValOrErr>{\n    kind: \"val\",\n    value: asLines\n      ? { t: \"vec\", v: content.split(/\\r?\\n/).map(str) }\n      : str(content),\n  };\n}\n\nfunction writeOrAppend(path: string, content: string, isAppend = false) {\n  (isAppend ? appendFileSync : writeFileSync)(path, content);\n  return nullVal;\n}\n\nconst writingOpDef: Operation = {\n  exactArity: 2,\n  params: [\"str\", \"str\"],\n  returns: [\"str\"],\n};\n\nconst functions: ExternalFunction[] = [\n  {\n    name: \"read\",\n    definition: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\n    handler: (params: Val[]) => read(<string>params[0].v, false),\n  },\n  {\n    name: \"read-lines\",\n    definition: { exactArity: 1, params: [\"str\"], returns: [\"vec\"] },\n    handler: (params: Val[]) => read(<string>params[0].v, true),\n  },\n  {\n    name: \"write\",\n    definition: writingOpDef,\n    handler: (params: Val[]) =>\n      writeOrAppend(<string>params[0].v, <string>params[1].v),\n  },\n  {\n    name: \"append\",\n    definition: writingOpDef,\n    handler: (params: Val[]) =>\n      writeOrAppend(<string>params[0].v, <string>params[1].v, true),\n  },\n  {\n    name: \"prompt\",\n    definition: {\n      exactArity: 1,\n      params: [\"str\"],\n      returns: [\"str\"],\n    },\n    handler: (params: Val[]) => ({\n      kind: \"val\",\n      value: { t: \"str\", v: prompt()(<string>params[0].v) },\n    }),\n  },\n];\n//#endregion\n\n//#region Context\nconst env = new Map<string, Val>();\n\nfunction get(key: string): ValOrErr {\n  return env.has(key)\n    ? { kind: \"val\", value: env.get(key)! }\n    : { kind: \"err\", err: `key ${key} not found` };\n}\n\nfunction set(key: string, val: Val) {\n  env.set(key, val);\n  return undefined;\n}\n\nconst ctx: Ctx = {\n  ...defaultCtx,\n  get,\n  set,\n  functions,\n  print(str, withNewLine) {\n    process.stdout.write(`\\x1b[32m${str}\\x1b[0m${withNewLine ? \"\\n\" : \"\"}`);\n  },\n  exe,\n};\n\nfunction exe(name: string, args: Val[]): ValOrErr {\n  if (args.length) {\n    const a = args[0];\n    if (a.t === \"str\" && a.v.startsWith(\"$\")) {\n      if (args.length === 1) {\n        return get(`${a.v.substring(1)}.${name}`);\n      } else {\n        set(`${a.v.substring(1)}.${name}`, args[1]);\n        return { kind: \"val\", value: args[1] };\n      }\n    }\n  }\n  return { kind: \"err\", err: `operation \"${name}\" does not exist` };\n}\n//#endregion\n\n//#region REPL IO\nif (process.argv.length > 2) {\n  let [x, y, ...args] = process.argv;\n  const paths = args.filter(a => !a.startsWith(\"-\"));\n  const switches = args.filter(a => a.startsWith(\"-\"));\n  paths.filter(existsSync).forEach(path => {\n    const code = readFileSync(path).toString();\n    printErrorOutput(invoker(ctx, code, path));\n  });\n  if (!switches.includes(\"-r\")) {\n    exit();\n  }\n}\nprintErrorOutput(invoker(ctx, `(str \"Insitux \" (version) \" REPL\")`));\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: \"❯ \",\n  completer,\n  history: existsSync(\".repl-history\")\n    ? readFileSync(\".repl-history\").toString().split(\"\\n\").reverse()\n    : [],\n});\n\nrl.on(\"line\", line => {\n  lines.push(line);\n  const input = lines.join(\"\\n\");\n  if (isFinished(input)) {\n    if (lines.length === 1) {\n      appendFileSync(\".repl-history\", `\\n${input}`);\n    }\n    lines = [];\n    if (input === \"quit\") {\n      rl.close();\n      return;\n    }\n    if (input.trim()) {\n      printErrorOutput(invoker(ctx, input));\n    }\n    rl.setPrompt(\"❯ \");\n  } else {\n    rl.setPrompt(\"• \");\n  }\n  rl.prompt();\n});\n\nrl.on(\"close\", () => {\n  console.log();\n});\n\nrl.prompt();\n\nfunction completer(line: string) {\n  const input = line.split(parensRx).pop();\n  const completions = symbols(ctx);\n  if (!input) {\n    return [completions, \"\"];\n  }\n  const hits = completions.filter(c => c.startsWith(input));\n  return [hits.length ? hits : completions, input];\n}\n\nlet lines: string[] = [];\n\nfunction isFinished(code: string): boolean {\n  const { tokens } = tokenise(code, \"\");\n  const numL = tokens.filter(t => t.typ === \"(\").length;\n  const numR = tokens.filter(t => t.typ === \")\").length;\n  return numL <= numR;\n}\n\nfunction printErrorOutput(lines: InvokeOutput) {\n  const colours = { error: 31, message: 35 };\n  lines.forEach(({ type, text }) => {\n    process.stdout.write(`\\x1b[${colours[type]}m${text}\\x1b[0m`);\n  });\n}\n//#endregion\n"],"names":[],"sourceRoot":""}