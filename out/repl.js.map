{"version":3,"file":"repl.js","mappings":"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","sources":["webpack://insitux/external node-commonjs \"fs\"","webpack://insitux/external node-commonjs \"readline\"","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/./src/repl.ts"],"sourcesContent":["module.exports = require(\"fs\");","module.exports = require(\"readline\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict };\r\n\r\nexport type ErrCtx = { sourceId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\nexport type Ctx = {\r\n  set: (key: string, val: Val) => Promise<string | undefined>;\r\n  get: (key: string) => Promise<ValOrErr>;\r\n  exe: (name: string, args: Val[]) => Promise<ValOrErr>;\r\n  env: Env;\r\n  loopBudget: number;\r\n  rangeBudget: number;\r\n  callBudget: number;\r\n  recurBudget: number;\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exp\"; value: number } //Marks the start of an expression as head for potential partial closures\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\"; value: number } //number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"rec\"; value: number } //Recur, number of args\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\r\n);\r\n\r\nexport const ops: {\r\n  [name: string]: {\r\n    minArity?: number;\r\n    maxArity?: number;\r\n    exactArity?: number;\r\n    numeric?: true | \"in only\";\r\n    types?: (Val[\"t\"] | Val[\"t\"][])[];\r\n    returns?: Val[\"t\"][];\r\n  };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, types: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    types: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, types: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: { minArity: 2, maxArity: 3, types: [[\"str\", \"vec\"]], returns: [\"num\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3, types: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  filter: {\r\n    minArity: 2,\r\n    types: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    types: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  find: { minArity: 2, types: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: { minArity: 2, types: [[], [\"vec\", \"dict\", \"str\"]], returns: [\"num\"] },\r\n  repeat: { minArity: 2, types: [[], \"num\"] },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    types: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    types: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    types: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, types: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: { minArity: 1, maxArity: 2, types: [\"vec\"], returns: [\"vec\"] },\r\n  keys: { exactArity: 1, types: [\"dict\"] },\r\n  vals: { exactArity: 1, types: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    types: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, types: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: { minArity: 1, maxArity: 2, types: [\"vec\", \"str\"], returns: [\"str\"] },\r\n  \"starts-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends-with?\": { exactArity: 2, types: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, types: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, types: [\"str\", \"num\"], returns: [\"str\"] },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, types: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, types: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\r\nimport { assertUnreachable, InvokeError } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  sourceId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      } else if (emitComments) {\r\n        tokens[len(tokens) - 1].text += c;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      if (emitComments) {\r\n        tokens.push({\r\n          typ: \"rem\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps) {\r\n          if (c === \"[\") {\r\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n          } else if (c === \"{\") {\r\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseAllArgs(tokens: Token[], params: string[]) {\r\n  const body: ParserIns[] = [];\r\n  let nArgs = 0;\r\n  while (len(tokens)) {\r\n    const exp = parseArg(tokens, params);\r\n    if (!len(exp)) {\r\n      break;\r\n    }\r\n    push(body, exp);\r\n    ++nArgs;\r\n  }\r\n  return { body, nArgs };\r\n}\r\n\r\nfunction parseForm(\r\n  tokens: Token[],\r\n  params: string[],\r\n  inPartial = true,\r\n): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\r\n  if (op === \"catch\") {\r\n    if (tokens[0].typ !== \"(\") {\r\n      return err(\"argument 1 must be expression\");\r\n    }\r\n    const body = parseArg(tokens, params);\r\n    const when = parseAllArgs(tokens, params).body;\r\n    if (!len(body) || !len(when)) {\r\n      return err(\"must provide at least 2 arguments\");\r\n    }\r\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const ins: Ins[] = [];\r\n    while (true) {\r\n      const defIns = parseArg(tokens, params);\r\n      if (len(ins) && !len(defIns)) {\r\n        return ins;\r\n      }\r\n      const val = parseArg(tokens, params);\r\n      if (!len(ins) && (!len(defIns) || !len(val))) {\r\n        return err(`must provide at least one declaration name and value`);\r\n      } else if (!len(val)) {\r\n        return err(`must provide a value after each declaration name`);\r\n      }\r\n      const def = defIns[0];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\");\r\n      }\r\n      push(ins, val);\r\n      ins.push({ typ: op, value: def.value, errCtx });\r\n    }\r\n  } else if (op === \"var!\" || op === \"let!\") {\r\n    const ins: Ins[] = [];\r\n    //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n    const defIns = parseArg(tokens, params);\r\n    if (!len(defIns)) {\r\n      return err(`must provide declaration name`);\r\n    }\r\n    const def = defIns[0];\r\n    if (def.typ !== \"ref\") {\r\n      return err(\"declaration name must be symbol\");\r\n    }\r\n    const func = parseArg(tokens, params);\r\n    if (!len(func)) {\r\n      return err(\"must provide an operation\");\r\n    }\r\n    const { body, nArgs } = parseAllArgs(tokens, params);\r\n    ins.push({ typ: \"ref\", value: def.value, errCtx });\r\n    push(ins, body);\r\n    push(ins, func);\r\n    ins.push({ typ: \"exe\", value: nArgs + 1, errCtx });\r\n    ins.push({ typ: op === \"var!\" ? \"var\" : \"let\", value: def.value, errCtx });\r\n    return ins;\r\n  } else if (op === \"if\" || op === \"if!\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if!\") {\r\n      ins.push({ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx });\r\n      ins.push({ typ: \"exe\", value: 1, errCtx });\r\n    }\r\n    if (op === \"if\" || op === \"if!\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        if (len(parseArg(tokens, params))) {\r\n          return err(\"too many branches\");\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n      }\r\n    } else {\r\n      const { body } = parseAllArgs(tokens, params);\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\r\n    const args: ParserIns[][] = [];\r\n    let insCount = 0;\r\n    while (true) {\r\n      const arg = parseArg(tokens, params);\r\n      if (!len(arg)) {\r\n        break;\r\n      }\r\n      args.push(arg);\r\n      insCount += len(arg);\r\n    }\r\n    if (op === \"recur\") {\r\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\r\n    }\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  //Head is a expression or parameter\r\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    if (inPartial) {\r\n      headIns.push({ typ: \"exp\", value: len(ins), errCtx });\r\n    }\r\n    push(headIns, ins);\r\n  }\r\n  const { body, nArgs } = parseAllArgs(tokens, params);\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n\r\n  //Operation arity check, optionally disabled for partial closures\r\n  if (ops[op] && !inPartial) {\r\n    const errors = arityCheck(op, nArgs, errCtx);\r\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\r\n    if (!errors) {\r\n      //Upgrade some math and logic functions to their fast counterparts\r\n      if (nArgs === 2 && ops[`fast${op}`]) {\r\n        op = `fast${op}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (len(headIns)) {\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  } else {\r\n    const value: Val =\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op };\r\n    headIns.push({ typ: \"val\", value, errCtx });\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  }\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction parseArg(\r\n  tokens: Token[],\r\n  params: string[],\r\n  inPartial = false,\r\n): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  //Upon closure\r\n  if (\r\n    typ === \"sym\" &&\r\n    sub(\"#@\", text) &&\r\n    len(tokens) &&\r\n    tokens[0].typ === \"(\"\r\n  ) {\r\n    const texts = tokens.map(t => t.text);\r\n    const body = parseArg(tokens, params, text === \"@\");\r\n    const err = body.find(t => t.typ === \"err\");\r\n    if (err) {\r\n      return [err];\r\n    }\r\n    const value: [string, Ins[]] = [\r\n      slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\r\n      <Ins[]>body,\r\n    ];\r\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\r\n  }\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(params, text)) {\r\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params, inPartial);\r\n    case \")\":\r\n    case \"rem\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): [\"func\", Func] | [\"err\", InvokeError] {\r\n  const err = (m: string, eCtx = errCtx) =>\r\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\r\n  const firstNonParam = tokens.findIndex(\r\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\r\n  );\r\n  const params = slice(tokens, 0, firstNonParam);\r\n  const body = slice(tokens, firstNonParam);\r\n  //In the case of e.g. (function (+))\r\n  if (name === \"(\") {\r\n    return err(\"nameless function\");\r\n  }\r\n  //In the case of e.g. (function)\r\n  if (!len(params) && !len(body)) {\r\n    return err(\"empty function body\");\r\n  }\r\n  if (len(body) && body[0].typ === \")\") {\r\n    if (len(params)) {\r\n      //In the case of e.g. (function f %) or (function x y z)\r\n      body.unshift(params.pop()!);\r\n    } else {\r\n      //In the case of e.g. (function name)\r\n      return err(\"empty function body\");\r\n    }\r\n  }\r\n  //In the case of e.g. (function entry x y z)\r\n  if (len(params) && !len(body)) {\r\n    body.push(params.pop()!);\r\n  }\r\n  const ins: ParserIns[] = [];\r\n  while (len(body)) {\r\n    push(\r\n      ins,\r\n      parseArg(\r\n        body,\r\n        params.map(p => p.text),\r\n      ),\r\n    );\r\n  }\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const x = ins[i];\r\n    if (x.typ === \"err\") {\r\n      return err(x.value, x.errCtx);\r\n    }\r\n  }\r\n  return [\"func\", { name, ins: <Ins[]>ins }];\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"exp\":\r\n      case \"cat\":\r\n      case \"or\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const errors = insErrorDetect(ins.value[1]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"pop\":\r\n      case \"rec\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  sourceId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, sourceId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      sourceId: sourceId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  funcsAndErrors.forEach(fae => {\r\n    if (fae[0] === \"err\") {\r\n      errors.push(fae[1]);\r\n    } else {\r\n      okFuncs.push(fae[1]);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nasync function get(state: State, key: string): Promise<ValOrErr> {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key} not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nasync function set(\r\n  state: State,\r\n  key: string,\r\n  val: Val,\r\n): Promise<string | undefined> {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nasync function exe(state: State, name: string, args: Val[]): Promise<ValOrErr> {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"print-str\":\r\n      state.output += args[0].v;\r\n      break;\r\n    case \"print\":\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation ${name} does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + [1 2 3] 3)]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes 1\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\", \"Parse\"],\r\n  },\r\n  { name: \"Imbalanced quotes 2\", code: `print \"Hello\")`, err: [\"Parse\"] },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type-errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n];\r\n\r\nexport async function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    sourceId: string,\r\n    print: boolean,\r\n  ) => Promise<InvokeResult>,\r\n  terse = true,\r\n): Promise<string[]> {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = await invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      \"testing\",\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okOut || out + \"\\t=/=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return `#${val.v.name}`;\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n","export const insituxVersion = 20211115;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\r\n\r\nlet stack: Val[] = [];\r\nlet lets: { [key: string]: Val }[] = [];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nasync function exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): Promise<InvokeError[] | undefined> {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(\r\n      op,\r\n      args.map(a => [a.t]),\r\n      errCtx,\r\n    );\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      {\r\n        ctx.exe(op, [{ t: \"str\", v: stringify(args) }]);\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return;\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[1].v;\r\n        _num(round(<number>args[0].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")),\r\n      );\r\n      return;\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        } else {\r\n          const arr = args[0].v.split(\"\");\r\n          arr[num(args[2])] = args[1].v;\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = slice(args[0].v);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = await closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = await closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      const array = asArray(args.shift()!);\r\n      if (op !== \"reduce\") {\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = await closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        _vec(filtered);\r\n        return;\r\n      }\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = await closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = await closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return await closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return await closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      if (!len(vec(args[0]))) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const src = asArray(args[0]);\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = await closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (mapped[0][1].t === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[0])\r\n          .split(len(args) > 1 ? str(args[1]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(\r\n        vec(args[0])\r\n          .map(val2str)\r\n          .join(len(args) > 1 ? str(args[1]) : \" \"),\r\n      );\r\n      return;\r\n    case \"starts-with?\":\r\n    case \"ends-with?\":\r\n      _boo((op === \"starts-with?\" ? starts : ends)(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(num(args[1]), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str((await doTests(invoke, !(len(args) && asBoo(args[0])))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const sourceId = `${errCtx.sourceId} eval`;\r\n      const errors = await parseAndExe(ctx, str(args[0]), sourceId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => Promise<InvokeError[] | undefined> {\r\n  const monoArityError = [\r\n    {\r\n      e: \"Arity\",\r\n      m: `${typeNames[op.t]} as op requires one sole argument`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets[len(lets) - 1]) {\r\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return async (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = await ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return async (params: Val[]) => {\r\n      const valAndErr = await ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return async (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return async (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dictionary as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return async (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return async _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nasync function exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): Promise<InvokeError[] | undefined> {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"npa\":\r\n      case \"upa\":\r\n        {\r\n          const paramIdx = ins.value;\r\n          if (paramIdx === -1) {\r\n            _vec(args);\r\n          } else if (len(args) <= paramIdx) {\r\n            _nul();\r\n          } else {\r\n            stack.push(args[paramIdx]);\r\n          }\r\n        }\r\n        break;\r\n      case \"ref\":\r\n        {\r\n          const name = ins.value;\r\n          if (ops[name]) {\r\n            _fun(name);\r\n          } else if (starts(name, \"$\")) {\r\n            const valAndErr = await ctx.get(substr(name, 1));\r\n            if (valAndErr.kind === \"err\") {\r\n              return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n            }\r\n            stack.push(valAndErr.value);\r\n          } else if (name in ctx.env.vars) {\r\n            stack.push(ctx.env.vars[name]);\r\n          } else if (name in lets[len(lets) - 1]) {\r\n            stack.push(lets[len(lets) - 1][name]);\r\n          } else if (name in ctx.env.funcs) {\r\n            _fun(name);\r\n          } else {\r\n            return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n          }\r\n        }\r\n        break;\r\n      case \"exe\":\r\n        {\r\n          const closure = getExe(ctx, stack.pop()!, errCtx, false);\r\n          const nArgs = ins.value;\r\n          const params = splice(stack, len(stack) - nArgs, nArgs);\r\n          const errors = await closure(params);\r\n          if (errors) {\r\n            //Find next catch statement\r\n            const nextCat = slice(func.ins, i).findIndex(\r\n              ins => ins.typ === \"cat\",\r\n            );\r\n            if (nextCat !== -1) {\r\n              i += nextCat;\r\n              lets[len(lets) - 1][\"errors\"] = {\r\n                t: \"vec\",\r\n                v: errorsToDict(errors),\r\n              };\r\n              break;\r\n            }\r\n            return errors;\r\n          }\r\n        }\r\n        break;\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen - 1, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"rec\":\r\n        {\r\n          lets[len(lets) - 1] = {};\r\n          i = -1;\r\n          const nArgs = ins.value;\r\n          args = splice(stack, len(stack) - nArgs, nArgs);\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n        }\r\n        continue;\r\n      case \"clo\":\r\n      case \"par\":\r\n        {\r\n          const name = ins.value[0];\r\n          let cins = ins.value[1];\r\n          const isCapture = ({ typ, value }: Ins, i: number) =>\r\n            (typ === \"ref\" &&\r\n              !cins.find(i => i.typ === \"let\" && i.value === value)) ||\r\n            typ === \"npa\" ||\r\n            (typ === \"val\" && i + 1 !== len(cins) && cins[i + 1].typ === \"exe\");\r\n          const derefFunc: Func = {\r\n            name: \"\",\r\n            ins: cins\r\n              .map((ins, i) => {\r\n                if (i + 1 === len(cins)) {\r\n                  return ins;\r\n                }\r\n                const possibleLet =\r\n                  ins.typ === \"val\" &&\r\n                  ins.value.t === \"str\" &&\r\n                  cins[i + 1].typ === \"exe\" &&\r\n                  lets[len(lets) - 1][ins.value.v];\r\n                return possibleLet\r\n                  ? <Ins>{ typ: \"val\", value: possibleLet }\r\n                  : ins;\r\n              })\r\n              .filter(isCapture),\r\n          };\r\n          const errors = await exeFunc(ctx, derefFunc, args, true);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const numIns = len(derefFunc.ins);\r\n          const captures = splice(stack, len(stack) - numIns, numIns);\r\n          cins = cins.map((ins, i) =>\r\n            isCapture(ins, i)\r\n              ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\r\n              : ins,\r\n          );\r\n          //Rewrite partial closure to #(... func [args] args)\r\n          if (ins.typ === \"par\") {\r\n            const { value: exeNumArgs, errCtx } = cins.pop()!;\r\n            //If has expression as head\r\n            if (len(cins) > 0 && cins[len(cins) - 1].typ === \"exe\") {\r\n              const headStartIdx = cins.findIndex(i => i.typ === \"exp\");\r\n              const head = splice(cins, headStartIdx, len(cins) - headStartIdx);\r\n              push(head, cins);\r\n              cins = head;\r\n            } else {\r\n              cins.unshift(cins.pop()!);\r\n            }\r\n            cins.push({ typ: \"upa\", value: -1, errCtx });\r\n            cins.push({\r\n              typ: \"val\",\r\n              value: <Val>{ t: \"str\", v: \"...\" },\r\n              errCtx,\r\n            });\r\n            cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\r\n          }\r\n          stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\r\n        }\r\n        break;\r\n      case \"exp\":\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nasync function parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n): Promise<InvokeError[] | undefined> {\r\n  const parsed = parse(code, sourceId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return await exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param sourceId A unique ID used in immediate or future invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n *          or the final value of the invocation.\r\n */\r\nexport async function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n  printResult = false,\r\n): Promise<InvokeResult> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  const errors = await parseAndExe(ctx, code, sourceId);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, lets] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    await ctx.exe(\"print\", [{ t: \"str\", v: val2str(value) }]);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param args The arguments to pass to the function.\r\n * @returns Invocation errors caused during execution of the function,\r\n *          or the final value of the invocation,\r\n *          or undefined if the function was not found.\r\n */\r\nexport async function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  args: Val[],\r\n): Promise<InvokeResult | undefined> {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  const errors = await exeFunc(ctx, ctx.env.funcs[funcName], args);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  const value = stack.pop()!;\r\n  [stack, lets] = [[], []];\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations, (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"while\"] : [];\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport async function invoker(ctx: Ctx, code: string): Promise<InvokeOutput> {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const valOrErrs = await invoke(ctx, code, uuid, true);\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, sourceId } }) => {\r\n    const invocation = invocations.get(sourceId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n","import readline = require(\"readline\");\r\nimport fs = require(\"fs\");\r\nimport { symbols, insituxVersion } from \".\";\r\nimport { Ctx, Val, ValOrErr } from \"./types\";\r\nimport { InvokeOutput, invoker, parensRx } from \"./invoker\";\r\nimport { tokenise } from \"./parse\";\r\nconst env = new Map<string, Val>();\r\n\r\nasync function get(key: string): Promise<ValOrErr> {\r\n  return env.has(key)\r\n    ? { kind: \"val\", value: env.get(key)! }\r\n    : {\r\n        kind: \"err\",\r\n        err: `key ${key} not found`,\r\n      };\r\n}\r\n\r\nasync function set(key: string, val: Val) {\r\n  env.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nconst ctx: Ctx = {\r\n  env: { funcs: {}, vars: {} },\r\n  get,\r\n  set,\r\n  exe,\r\n  loopBudget: 1e6,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nasync function exe(name: string, args: Val[]): Promise<ValOrErr> {\r\n  const nullVal: Val = { v: undefined, t: \"null\" };\r\n  switch (name) {\r\n    case \"print\":\r\n    case \"print-str\":\r\n      process.stdout.write(`\\x1b[32m${args[0].v}\\x1b[0m`);\r\n      if (name === \"print\") {\r\n        process.stdout.write(\"\\n\");\r\n      }\r\n      return { kind: \"val\", value: nullVal };\r\n    case \"read\": {\r\n      const path = args[0].v as string;\r\n      if (!fs.existsSync(path)) {\r\n        return { kind: \"val\", value: nullVal };\r\n      }\r\n      return {\r\n        kind: \"val\",\r\n        value: { t: \"str\", v: fs.readFileSync(path).toString() },\r\n      };\r\n    }\r\n  }\r\n  if (args.length) {\r\n    const a = args[0];\r\n    if (a.t === \"str\" && a.v.startsWith(\"$\")) {\r\n      if (args.length === 1) {\r\n        return await get(`${a.v.substring(1)}.${name}`);\r\n      } else {\r\n        await set(`${a.v.substring(1)}.${name}`, args[1]);\r\n        return { kind: \"val\", value: args[1] };\r\n      }\r\n    }\r\n  }\r\n  return { kind: \"err\", err: `operation ${name} does not exist` };\r\n}\r\n\r\nif (process.argv.length > 2) {\r\n  const [x, y, path] = process.argv;\r\n  if (fs.existsSync(path)) {\r\n    const code = fs.readFileSync(path).toString();\r\n    invoker(ctx, code).then(printErrorOutput);\r\n  }\r\n} else {\r\n  console.log(`Insitux ${insituxVersion} REPL.`);\r\n\r\n  const rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n    prompt: \"> \",\r\n    completer,\r\n    history: fs.existsSync(\".repl-history\")\r\n      ? fs.readFileSync(\".repl-history\").toString().split(\"\\n\").reverse()\r\n      : [],\r\n  });\r\n\r\n  rl.on(\"line\", async line => {\r\n    lines.push(line);\r\n    const input = lines.join(\"\\n\");\r\n    if (isFinished(input)) {\r\n      if (lines.length === 1) {\r\n        fs.appendFileSync(\".repl-history\", `\\n${input}`);\r\n      }\r\n      lines = [];\r\n      if (input === \"quit\") {\r\n        rl.close();\r\n        return;\r\n      }\r\n      if (input.trim()) {\r\n        printErrorOutput(await invoker(ctx, input));\r\n      }\r\n      rl.setPrompt(\"> \");\r\n    } else {\r\n      rl.setPrompt(\". \");\r\n    }\r\n    rl.prompt();\r\n  });\r\n\r\n  rl.on(\"close\", () => {\r\n    console.log();\r\n  });\r\n\r\n  rl.prompt();\r\n}\r\n\r\nfunction completer(line: string) {\r\n  const input = line.split(parensRx).pop();\r\n  const completions = symbols(ctx);\r\n  if (!input) {\r\n    return [completions, \"\"];\r\n  }\r\n  const hits = completions.filter(c => c.startsWith(input));\r\n  return [hits.length ? hits : completions, input];\r\n}\r\n\r\nlet lines: string[] = [];\r\n\r\nfunction isFinished(code: string): boolean {\r\n  const { tokens } = tokenise(code, \"\");\r\n  const numL = tokens.filter(t => t.typ === \"(\").length;\r\n  const numR = tokens.filter(t => t.typ === \")\").length;\r\n  return numL <= numR;\r\n}\r\n\r\nfunction printErrorOutput(lines: InvokeOutput) {\r\n  const colours = { error: 31, message: 35 };\r\n  lines.forEach(({ type, text }) => {\r\n    process.stdout.write(`\\x1b[${colours[type]}m${text}\\x1b[0m`);\r\n  });\r\n}\r\n"],"names":[],"sourceRoot":""}