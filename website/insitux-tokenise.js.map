{"version":3,"file":"insitux-tokenise.js","mappings":"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","sources":["webpack://insituxTokenise/webpack/bootstrap","webpack://insituxTokenise/webpack/runtime/define property getters","webpack://insituxTokenise/webpack/runtime/hasOwnProperty shorthand","webpack://insituxTokenise/webpack/runtime/make namespace object","webpack://insituxTokenise/./src/poly-fills.ts","webpack://insituxTokenise/./src/parse.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x);\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\n  arr.slice(start, end);\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\n  arr.splice(start, numDel);\nexport const len = (arr: unknown[]): number => arr.length;\nexport const slen = (str: string): number => str.length;\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\nexport const substr = (str: string, start: number, length?: number): string =>\n  str.substring(start, start + (length ?? str.length));\nexport const strIdx = (str: string, idx: number): string => str[idx];\nexport const sub = (x: string, s: string): boolean => x.includes(s);\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\nexport const reverse = <T>(arr: T[]) => arr.reverse();\nexport const lowerCase = (str: string) => str.toLowerCase();\nexport const upperCase = (str: string) => str.toUpperCase();\nexport const trim = (str: string) => str.trim();\nexport const trimStart = (str: string) => str.trimStart();\nexport const trimEnd = (str: string) => str.trimEnd();\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\nexport const range = (len: number) => [...Array(len).keys()];\nexport const objKeys = (x: object) => Object.keys(x);\nexport const getTimeMs = () => new Date().getTime();\nexport const abs = Math.abs;\nexport const min = Math.min;\nexport const max = Math.max;\nexport const sin = Math.sin;\nexport const cos = Math.cos;\nexport const tan = Math.tan;\nexport const sqrt = Math.sqrt;\nexport const round = Math.round;\nexport const floor = Math.floor;\nexport const ceil = Math.ceil;\nexport const sign = Math.sign;\nexport const logn = Math.log;\nexport const log2 = Math.log2;\nexport const log10 = Math.log10;","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\nimport * as pf from \"./poly-fills\";\nconst { concat, has, flat, push, slice, splice } = pf;\nconst { slen, starts, sub, substr, strIdx } = pf;\nconst { isNum, len, toNum } = pf;\nimport { ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\nimport { assertUnreachable, InvokeError } from \"./types\";\n\ntype Token = {\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\n  text: string;\n  errCtx: ErrCtx;\n};\ntype NamedTokens = {\n  name: string;\n  tokens: Token[];\n  errCtx: ErrCtx;\n};\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\nconst nullVal: Val = { t: \"null\", v: undefined };\n\nexport function tokenise(\n  code: string,\n  sourceId: string,\n  makeCollsOps = true,\n  emitComments = false,\n) {\n  const tokens: Token[] = [];\n  const digits = \"0123456789\";\n  let inString = false,\n    isEscaped = false,\n    inStringAt = [0, 0],\n    inSymbol = false,\n    inNumber = false,\n    inComment = false,\n    line = 1,\n    col = 0;\n  for (let i = 0, l = slen(code); i < l; ++i) {\n    const c = strIdx(code, i),\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\n    ++col;\n    if (inComment) {\n      if (c === \"\\n\") {\n        inComment = false;\n        ++line;\n        col = 0;\n      } else if (emitComments) {\n        tokens[len(tokens) - 1].text += c;\n      }\n      continue;\n    }\n    if (isEscaped) {\n      isEscaped = false;\n      if (inString) {\n        tokens[len(tokens) - 1].text +=\n          { n: \"\\n\", t: \"\\t\", '\"': '\"' }[c] || `\\\\${c}`;\n      }\n      continue;\n    }\n    if (c === \"\\\\\") {\n      isEscaped = true;\n      continue;\n    }\n    if (c === '\"') {\n      if ((inString = !inString)) {\n        inStringAt = [line, col];\n        tokens.push({\n          typ: \"str\",\n          text: \"\",\n          errCtx: { sourceId: sourceId, line, col },\n        });\n      }\n      inNumber = inSymbol = false;\n      continue;\n    }\n    const isWhite = sub(\" \\t\\n\\r,\", c);\n    if (!inString && isWhite) {\n      inNumber = inSymbol = false;\n      if (c === \"\\n\") {\n        ++line;\n        col = 0;\n      }\n      continue;\n    }\n    if (!inString && c === \";\") {\n      inComment = true;\n      if (emitComments) {\n        tokens.push({\n          typ: \"rem\",\n          text: \"\",\n          errCtx: { sourceId: sourceId, line, col },\n        });\n      }\n      continue;\n    }\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\n    const isDigit = (ch: string) => sub(digits, ch);\n    const isParen = sub(\"()[]{}\", c);\n    //Allow one . per number, or convert into symbol\n    if (inNumber && !isDigit(c)) {\n      inNumber = c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\");\n      if (!inNumber && !isParen && !isWhite) {\n        inSymbol = true;\n        tokens[len(tokens) - 1].typ = \"sym\";\n      }\n    }\n    //Stop scanning symbol if a paren\n    if (inSymbol && isParen) {\n      inSymbol = false;\n    }\n    //If we just finished concatenating a token\n    if (!inString && !inSymbol && !inNumber) {\n      if (isParen) {\n        const parens: { [ch: string]: Token[\"typ\"] } = {\n          \"[\": \"(\",\n          \"{\": \"(\",\n          \"(\": \"(\",\n          \")\": \")\",\n          \"}\": \")\",\n          \"]\": \")\",\n        };\n        const text = parens[c]!;\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\n        if (makeCollsOps) {\n          if (c === \"[\") {\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\n          } else if (c === \"{\") {\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\n          }\n        }\n        continue;\n      }\n      inNumber =\n        isDigit(c) ||\n        (c === \".\" && isDigit(nextCh)) ||\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\n      inSymbol = !inNumber;\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\n      tokens.push({ typ, text: \"\", errCtx });\n    }\n    tokens[len(tokens) - 1].text += c;\n  }\n  return { tokens, stringError: inString ? inStringAt : undefined };\n}\n\nfunction segment(tokens: Token[]): Token[][] {\n  const segments: Token[][] = [[]];\n  let depth = 0;\n  tokens.forEach(token => {\n    segments[len(segments) - 1].push(token);\n    depth += toNum(token.typ === \"(\") - toNum(token.typ === \")\");\n    if (depth === 0) {\n      segments.push([]);\n    }\n  });\n  return segments;\n}\n\nfunction funcise(segments: Token[][]): NamedTokens[] {\n  const isFunc = (segment: Token[]) =>\n    len(segment) > 1 &&\n    segment[1].typ === \"sym\" &&\n    segment[1].text === \"function\";\n  const funcs = segments.filter(t => isFunc(t));\n  const entries = flat(segments.filter(t => !isFunc(t)));\n  const described = funcs.map(tokens => ({\n    name: tokens[2].text,\n    tokens: slice(tokens, 3),\n    errCtx: tokens[2].errCtx,\n  }));\n  return len(entries)\n    ? concat(described, [\n        {\n          name: \"entry\",\n          tokens: entries,\n          errCtx: entries[0].errCtx,\n        },\n      ])\n    : described;\n}\n\nfunction parseAllArgs(tokens: Token[], params: string[]) {\n  const body: ParserIns[] = [];\n  while (true) {\n    const exp = parseArg(tokens, params);\n    if (!len(exp)) {\n      break;\n    }\n    push(body, exp);\n  }\n  return body;\n}\n\nfunction parseForm(\n  tokens: Token[],\n  params: string[],\n  inPartial = true,\n): ParserIns[] {\n  const head = tokens.shift();\n  if (!head) {\n    return [];\n  }\n  const { typ, text, errCtx } = head;\n  let op = text;\n  const err = (value: string) => [<ParserIns>{ typ: \"err\", value, errCtx }];\n  if (op === \"catch\") {\n    if (tokens[0].typ !== \"(\") {\n      return err(\"argument 1 must be expression\");\n    }\n    const body = parseArg(tokens, params);\n    const when = parseAllArgs(tokens, params);\n    if (!len(body) || !len(when)) {\n      return err(\"must provide at least 2 arguments\");\n    }\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\n  } else if (op === \"var\" || op === \"let\") {\n    const ins: Ins[] = [];\n    while (true) {\n      const defIns = parseArg(tokens, params);\n      if (len(ins) && !len(defIns)) {\n        return ins;\n      }\n      const val = parseArg(tokens, params);\n      if (!len(ins) && (!len(defIns) || !len(val))) {\n        return err(`must provide at least one declaration name and value`);\n      } else if (!len(val)) {\n        return err(`must provide a value after each declaration name`);\n      }\n      const def = defIns[0];\n      if (def.typ !== \"ref\") {\n        return err(\"declaration name must be symbol\");\n      }\n      push(ins, val);\n      ins.push({ typ: op, value: def.value, errCtx });\n    }\n  } else if (op === \"if\" || op === \"if!\" || op === \"when\") {\n    const cond = parseArg(tokens, params);\n    if (!len(cond)) {\n      return err(\"must provide condition\");\n    }\n    const ins: ParserIns[] = cond;\n    if (op === \"if!\") {\n      ins.push({ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx });\n      ins.push({ typ: \"exe\", value: 1, errCtx });\n    }\n    if (op === \"if\" || op === \"if!\") {\n      const ifT = parseArg(tokens, params);\n      if (!len(ifT)) {\n        return err(\"must provide a branch\");\n      }\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\n      push(ins, ifT);\n      const ifF = parseArg(tokens, params);\n      if (len(ifF)) {\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\n        push(ins, ifF);\n        if (len(parseArg(tokens, params))) {\n          return err(\"too many branches\");\n        }\n      } else {\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\n      }\n    } else {\n      const body = parseAllArgs(tokens, params);\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\n      push(ins, body);\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\n    }\n    return ins;\n  } else if (op === \"and\" || op === \"or\" || op === \"while\" || op === \"recur\") {\n    const args: ParserIns[][] = [];\n    let insCount = 0;\n    while (true) {\n      const arg = parseArg(tokens, params);\n      if (!len(arg)) {\n        break;\n      }\n      args.push(arg);\n      insCount += len(arg);\n    }\n    if (op === \"recur\") {\n      return [...flat(args), { typ: \"rec\", value: len(args), errCtx }];\n    }\n    if (len(args) < 2) {\n      return err(\"requires at least two arguments\");\n    }\n    const ins: Ins[] = [];\n    if (op === \"while\") {\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\n      const head = args.shift()!;\n      push(ins, head);\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\n      args.forEach(as => push(ins, as));\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\n      return ins;\n    }\n    insCount += len(args); //+1 for each if/or ins\n    insCount += toNum(op === \"and\");\n    const typ = op === \"and\" ? \"if\" : \"or\";\n    for (let a = 0; a < len(args); ++a) {\n      push(ins, args[a]);\n      insCount -= len(args[a]);\n      ins.push({ typ, value: insCount, errCtx });\n      --insCount;\n    }\n    if (op === \"and\") {\n      push(ins, [\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\n        { typ: \"jmp\", value: 1, errCtx },\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx },\n      ]);\n    } else {\n      ins.push({ typ: \"val\", value: <Val>{ t: \"bool\", v: false }, errCtx });\n    }\n    return ins;\n  }\n  const headIns: Ins[] = [];\n  let nArgs = 0;\n  //Head is a expression or parameter\n  if (typ === \"(\" || has(params, text) || sub(\"%#@\", strIdx(text, 0))) {\n    tokens.unshift(head);\n    const ins = parseArg(tokens, params);\n    if (inPartial) {\n      headIns.push({ typ: \"exp\", value: len(ins), errCtx });\n    }\n    push(headIns, ins);\n  }\n  const body: Ins[] = [];\n  while (len(tokens)) {\n    const parsed = parseArg(tokens, params);\n    if (!len(parsed)) {\n      break;\n    }\n    ++nArgs;\n    push(body, parsed);\n  }\n  if (op === \"return\") {\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\n  }\n\n  //Operation arity check, optionally disabled for partial closures\n  if (ops[op] && !inPartial) {\n    const errors = arityCheck(op, nArgs, errCtx);\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\n    if (!errors) {\n      //Upgrade some math and logic functions to their fast counterparts\n      if (nArgs === 2 && ops[`fast${op}`]) {\n        op = `fast${op}`;\n      }\n    }\n  }\n\n  if (len(headIns)) {\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  } else {\n    const value: Val =\n      typ === \"num\"\n        ? { t: \"num\", v: toNum(op) }\n        : starts(op, \":\")\n        ? { t: \"key\", v: op }\n        : ops[op]\n        ? { t: \"func\", v: op }\n        : op === \"true\" || op === \"false\"\n        ? { t: \"bool\", v: op === \"true\" }\n        : { t: \"str\", v: op };\n    headIns.push({ typ: \"val\", value, errCtx });\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\n  }\n  return [...body, ...headIns];\n}\n\nfunction parseArg(\n  tokens: Token[],\n  params: string[],\n  inPartial = false,\n): ParserIns[] {\n  if (!len(tokens)) {\n    return [];\n  }\n  const { typ, text, errCtx } = tokens.shift() as Token;\n  //Upon closure\n  if (\n    typ === \"sym\" &&\n    sub(\"#@\", text) &&\n    len(tokens) &&\n    tokens[0].typ === \"(\"\n  ) {\n    const texts = tokens.map(t => t.text);\n    const body = parseArg(tokens, params, text === \"@\");\n    const err = body.find(t => t.typ === \"err\");\n    if (err) {\n      return [err];\n    }\n    const value: [string, Ins[]] = [\n      slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\n      <Ins[]>body,\n    ];\n    return [{ typ: text === \"#\" ? \"clo\" : \"par\", value, errCtx }];\n  }\n  switch (typ) {\n    case \"str\":\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\n    case \"num\":\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\n    case \"sym\":\n      if (text === \"true\" || text === \"false\") {\n        return [\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\n        ];\n      } else if (text === \"null\") {\n        return [{ typ: \"val\", value: nullVal, errCtx }];\n      } else if (starts(text, \":\")) {\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\n        const value = toNum(substr(text, 1));\n        if (value < 0) {\n          return [{ typ: \"val\", value: nullVal, errCtx }];\n        }\n        return [{ typ: \"upa\", value, errCtx }];\n      } else if (has(params, text)) {\n        return [{ typ: \"npa\", value: params.indexOf(text), errCtx }];\n      } else if (text === \"args\") {\n        return [{ typ: \"upa\", value: -1, errCtx }];\n      } else if (text === \"PI\" || text === \"E\") {\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\n      } else if (ops[text]) {\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\n      }\n      return [{ typ: \"ref\", value: text, errCtx }];\n    case \"(\":\n      return parseForm(tokens, params, inPartial);\n    case \")\":\n    case \"rem\":\n      return [];\n    default:\n      return assertUnreachable(typ);\n  }\n}\n\nfunction syntaxise(\n  { name, tokens }: NamedTokens,\n  errCtx: ErrCtx,\n): [\"func\", Func] | [\"err\", InvokeError] {\n  const err = (m: string, eCtx = errCtx) =>\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\n  const firstNonParam = tokens.findIndex(\n    t => t.typ !== \"sym\" || sub(\"%#@\", t.text),\n  );\n  const params = slice(tokens, 0, firstNonParam);\n  const body = slice(tokens, firstNonParam);\n  //In the case of e.g. (function (+))\n  if (name === \"(\") {\n    return err(\"nameless function\");\n  }\n  //In the case of e.g. (function)\n  if (!len(params) && !len(body)) {\n    return err(\"empty function body\");\n  }\n  if (len(body) && body[0].typ === \")\") {\n    if (len(params)) {\n      //In the case of e.g. (function f %) or (function x y z)\n      body.unshift(params.pop()!);\n    } else {\n      //In the case of e.g. (function name)\n      return err(\"empty function body\");\n    }\n  }\n  //In the case of e.g. (function entry x y z)\n  if (len(params) && !len(body)) {\n    body.push(params.pop()!);\n  }\n  const ins: ParserIns[] = [];\n  while (len(body)) {\n    push(\n      ins,\n      parseArg(\n        body,\n        params.map(p => p.text),\n      ),\n    );\n  }\n  for (let i = 0, lim = len(ins); i < lim; i++) {\n    const x = ins[i];\n    if (x.typ === \"err\") {\n      return err(x.value, x.errCtx);\n    }\n  }\n  return [\"func\", { name, ins: <Ins[]>ins }];\n}\n\nfunction findParenImbalance(\n  tokens: Token[],\n  numL: number,\n  numR: number,\n): [number, number] {\n  //Scan for first instance of untimely closed\n  //  or last instance of unclosed open\n  const untimely = numR >= numL;\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\n  const direction = untimely ? 1 : -1;\n  for (\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\n    untimely ? t < lim : t >= 0;\n    t += direction\n  ) {\n    const {\n      typ,\n      errCtx: { line, col },\n    } = tokens[t];\n    depth += toNum(typ === l) - toNum(typ === r);\n    if (depth < 0) {\n      return [line, col];\n    }\n  }\n  return [0, 0];\n}\n\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\n  const errors: InvokeError[] = [];\n  const err = (m: string, errCtx: ErrCtx) =>\n    errors.push({ e: \"Parse\", m, errCtx });\n\n  //Check for paren imbalance\n  const countTyp = (t: Token[\"typ\"]) =>\n    len(tokens.filter(({ typ }) => typ === t));\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\n  {\n    const [line, col] = findParenImbalance(tokens, numL, numR);\n    if (line + col) {\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\n    }\n  }\n\n  //Check for double-quote imbalance\n  if (stringError) {\n    const [line, col] = stringError;\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\n  }\n\n  //Check for any empty expressions\n  let emptyHead: Token | undefined;\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\n    if (lastWasL && tokens[t].typ === \")\") {\n      emptyHead = tokens[t];\n      break;\n    }\n    lastWasL = tokens[t].typ === \"(\";\n  }\n  if (emptyHead) {\n    err(\"empty expression forbidden\", emptyHead.errCtx);\n  }\n\n  return errors;\n}\n\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\n  type TypeInfo = {\n    types?: Val[\"t\"][];\n    val?: Val;\n  };\n  const stack: TypeInfo[] = [];\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\n    const ins = fins[i];\n    switch (ins.typ) {\n      case \"val\":\n        stack.push({ types: [ins.value.t], val: ins.value });\n        break;\n      case \"exe\": {\n        const head = stack.pop()!;\n        const args = splice(stack, len(stack) - ins.value, ins.value);\n        const badMatch = (okTypes: Val[\"t\"][]) =>\n          args.findIndex(\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\n          );\n        const headIs = (t: Val[\"t\"]) =>\n          head.val\n            ? head.val.t === t\n            : head.types && len(head.types) === 1 && head.types[0] === t;\n        if (head.val && head.val.t === \"func\") {\n          const errors = typeCheck(\n            head.val.v,\n            args.map(a => a.types ?? []),\n            ins.errCtx,\n            true,\n          );\n          if (errors) {\n            return errors;\n          }\n          const { returns, numeric: onlyNum } = ops[head.val.v];\n          stack.push(\n            onlyNum && onlyNum !== \"in only\"\n              ? { types: [\"num\"] }\n              : { types: returns },\n          );\n        } else if (headIs(\"num\")) {\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return numOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"key\")) {\n          const badArg = badMatch([\"dict\", \"vec\"]);\n          if (badArg !== -1) {\n            return keyOpErr(ins.errCtx, args[badArg].types!);\n          }\n          stack.push({});\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\n          stack.push({});\n        }\n        break;\n      }\n      case \"exp\":\n      case \"cat\":\n      case \"or\":\n      case \"var\":\n      case \"let\":\n      case \"loo\":\n      case \"jmp\":\n        break;\n      case \"clo\":\n      case \"par\": {\n        const errors = insErrorDetect(ins.value[1]);\n        if (errors) {\n          return errors;\n        }\n      }\n      case \"ref\":\n      case \"npa\":\n      case \"upa\":\n        stack.push({});\n        break;\n      case \"if\": {\n        stack.pop();\n        stack.push({});\n        const ifIns = slice(fins, i + 1, ins.value + 1);\n        const errors = insErrorDetect(ifIns);\n        if (errors) {\n          return errors;\n        }\n        i += ins.value - 1;\n        break;\n      }\n      case \"pop\":\n      case \"rec\":\n        splice(stack, len(stack) - ins.value, ins.value);\n        break;\n      case \"ret\":\n        if (ins.value) {\n          stack.pop();\n        }\n        break;\n      default:\n        assertUnreachable(ins);\n    }\n  }\n}\n\nexport function parse(\n  code: string,\n  sourceId: string,\n): { funcs: Funcs; errors: InvokeError[] } {\n  const { tokens, stringError } = tokenise(code, sourceId);\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\n  if (len(tokenErrors)) {\n    return { errors: tokenErrors, funcs: {} };\n  }\n  const segments = segment(tokens);\n  const labelled = funcise(segments);\n  const funcsAndErrors = labelled.map(named =>\n    syntaxise(named, {\n      sourceId: sourceId,\n      line: named.errCtx.line,\n      col: named.errCtx.col,\n    }),\n  );\n  const okFuncs: Func[] = [],\n    errors: InvokeError[] = [];\n  funcsAndErrors.forEach(fae => {\n    if (fae[0] === \"err\") {\n      errors.push(fae[1]);\n    } else {\n      okFuncs.push(fae[1]);\n    }\n  });\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\n  const funcs: Funcs = {};\n  okFuncs.forEach(func => (funcs[func.name] = func));\n  return { errors, funcs };\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","length","slen","str","isNum","isNaN","Array","isArray","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","has","len","tokenise","code","sourceId","makeCollsOps","emitComments","tokens","inString","isEscaped","inStringAt","inSymbol","inNumber","inComment","line","col","i","l","c","nextCh","text","n","t","typ","errCtx","isWhite","isDigit","ch","isParen","stringError"],"sourceRoot":""}