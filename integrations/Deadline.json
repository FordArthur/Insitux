{
	"index.ts": {
		"description": ["internal insitux functions"],
		"list": [
			{
				"directory": "function",
				"description": ["(function sum a b (+ a b))", "syntax", "Defines a new function."]
			},
			{
				"directory": "fn",
				"description": ["(fn a b (+ a b))", "syntax", "Creates a parameterised closure."]
			},
			{
				"directory": "var",
				"description": [
					"(var a 1 b 2 c 3)",
					"syntax",
					"Defines one or more variables for later use anywhere in the program."
				]
			},
			{
				"directory": "let",
				"description": [
					"(let a 1 b 2 c 3)",
					"syntax",
					"Defines one or more variables for later use within the same function call."
				]
			},
			{
				"directory": "if",
				"description": [
					"(if true (print \"hi\") (print \"bye\"))",
					"syntax",
					"Tests a condition and executes either the second or third argument (or null)."
				]
			},
			{
				"directory": "if!",
				"description": [
					"(if! true (print \"hi\") (print \"bye\"))",
					"syntax",
					"Tests a condition and executes either the third or second argument (or null)."
				]
			},
			{
				"directory": "match",
				"description": [
					"(match something, [:a :b] 0, [_ :a] 1)",
					"syntax",
					"Matches a value with each case and executes and returns the corresponding value, else a default final value or false."
				]
			},
			{
				"directory": "satisfy",
				"description": [
					"(satisfy 0, pos? true, neg? false 0)",
					"syntax",
					"Matches a value with each case function and executes and returns the corresponding value, else a default final value or false."
				]
			},
			{
				"directory": "->",
				"description": [
					"(-> \"hello\" 1 upper-case)",
					"syntax",
					"\"Thread\" return values into the next function, seeded with first argument."
				]
			},
			{
				"directory": "and",
				"description": [
					"(and null (print \"hi\"))",
					"syntax and function",
					"Tests each argument and returns true or false if all arguments are truthy.",
					"Note: short-circuits evaluation after falsy argument."
				]
			},
			{
				"directory": "or",
				"description": [
					"(and null true (print \"hi\"))",
					"syntax and function",
					"Returns first truthy argument or false.",
					"Note: short-circuits evaluation after first truthy argument."
				]
			},
			{
				"directory": "when",
				"description": [
					"(when true (print \"hi\") (print \"bye\"))",
					"syntax",
					"Tests a condition is true and executes its body else returns null."
				]
			},
			{
				"directory": "unless",
				"description": [
					"(unless false (print \"hi\") (print \"bye\"))",
					"syntax",
					"Tests a condition is false and executes its body else returns null."
				]
			},
			{
				"directory": "while",
				"description": [
					"(while (pos? n) (print \"hi\") (var n (dec n)))",
					"syntax",
					"Loops all arguments so long as the first argument is true."
				]
			},
			{
				"directory": "return",
				"description": [
					"(function f (return 123) (print \"hello\"))",
					"syntax",
					"Returns its last argument early from a function."
				]
			},
			{
				"directory": "catch",
				"description": [
					"(catch (+) errors)",
					"syntax",
					"Evaluates the first argument and returns the value if no runtime errors, else populates the let `errors` and returns the evaluation of the second argument"
				]
			},
			{
				"directory": "print",
				"description": [
					"(print \"2 + 2 = \" (+ 2 2))",
					"function",
					"Prints a line of text, joining its arguments together."
				]
			},
			{
				"directory": "+",
				"description": ["(+ 1 2 3)", "function", "Sums together its arguments."]
			},
			{
				"directory": "-",
				"description": ["(- 3 2 1)", "function", "Subtracts each argument from the previous in turn."]
			},
			{
				"directory": "*",
				"description": ["(* 10 10 10)", "function", "Multiplies all its arguments together."]
			},
			{
				"directory": "/",
				"description": ["(/ 10 5 2)", "function", "Divides each argument by the next in turn."]
			},
			{
				"directory": "//",
				"description": [
					"(// 10 3)",
					"function",
					"Divides and retains the quotient each argument by the next in turn."
				]
			},
			{
				"directory": "**",
				"description": [
					"(** 10 2)",
					"function",
					"Returns its first argument to the power of its second argument."
				]
			},
			{
				"directory": "abs",
				"description": ["(abs -123)", "function", "Returns absolute of a number."]
			},
			{
				"directory": "sin",
				"description": ["(sin (pi))", "function", "Returns sine of a radian angle."]
			},
			{
				"directory": "cos",
				"description": ["(cos (pi))", "function", "Returns cosine of a radian angle."]
			},
			{
				"directory": "tan",
				"description": ["(tan (* 45 (/ (pi) 180)))", "function", "Returns tangent of a radian angle."]
			},
			{
				"directory": "sqrt",
				"description": ["(sqrt 25)", "function", "Returns the square root of a number."]
			},
			{
				"directory": "rem",
				"description": ["(rem 10 2)", "function", "Returns the remainder of a division."]
			},
			{
				"directory": "round",
				"description": [
					"(round 2 3.5)",
					"function",
					"Rounds a number to the nearest integer or decimal provided."
				]
			},
			{
				"directory": "floor",
				"description": ["(floor 3.9)", "function", "Rounds a number down to the nearest integer."]
			},
			{
				"directory": "ceil",
				"description": ["(ceil 3.1)", "function", "Rounds a number up to the nearest integer."]
			},
			{
				"directory": "logn",
				"description": ["(logn 1)", "function", "Returns the natural logarithm of a number."]
			},
			{
				"directory": "log2",
				"description": ["(log2 8)", "function", "Returns the logarithm base 2 of a number."]
			},
			{
				"directory": "log2",
				"description": ["(log2 1000)", "function", "Returns the logarithm base 10 of a number."]
			},
			{
				"directory": "min",
				"description": ["(min 1 2 3)", "function", "Returns the smallest number of its arguments."]
			},
			{
				"directory": "max",
				"description": ["(max 1 2 3)", "function", "Returns the largest number of its arguments."]
			},
			{
				"directory": "pi",
				"description": ["(pi)", "function", "Returns the mathematical Pi."]
			},
			{
				"directory": "inc",
				"description": ["(inc 123)", "function", "Returns its argument +1 (incremented)."]
			},
			{
				"directory": "dec",
				"description": ["(dec 123)", "function", "Returns its argument -1 (decremented)."]
			},
			{
				"directory": "=",
				"description": ["(= 123 my-variable)", "function", "Tests if all arguments are equal to one another."]
			},
			{
				"directory": "!=",
				"description": ["(!= 123 456)", "function", "Tests if each argument is different from the previous."]
			},
			{
				"directory": "<",
				"description": ["(< 1 2 3)", "function", "Tests if arguments are increasing in value."]
			},
			{
				"directory": ">",
				"description": ["(> 3 2 1)", "function", "Tests if arguments are decreasing in value."]
			},
			{
				"directory": "<=",
				"description": ["(<= 3 3 4 5)", "function", "Tests if arguments are not decreasing in value."]
			},
			{
				"directory": ">=",
				"description": ["(>= 4 4 3 2 2 1)", "function", "Tests if arguments are not increasing in value."]
			},
			{
				"directory": "vec",
				"description": [
					"(vec 1 \"hello\" :c)",
					"function",
					"Returns a vector of its arguments, exactly as using […]."
				]
			},
			{
				"directory": "dict",
				"description": [
					"(dict 1 \"hello\" :c \"world\")",
					"function",
					"Returns a dictionary of its arguments, exactly as using {…}."
				]
			},
			{
				"directory": "len",
				"description": [
					"(len \"hello\")",
					"function",
					"Returns the length of a string, vector, or number of dictionary entries."
				]
			},
			{
				"directory": "rand-int",
				"description": [
					"(rand-int 10 20)",
					"function",
					"Returns a random whole number between its two arguments;",
					"or, provided no arguments a random 0 or 1;",
					"or, provided one argument a random whole number between 0 and that."
				]
			},
			{
				"directory": "rand",
				"description": [
					"(rand)",
					"function",
					"Returns a random number between 0 and 1;",
					"or, provided one argument a random number between 0 and that;",
					"or, provided two arguments a random number between those two."
				]
			},
			{
				"directory": "map",
				"description": [
					"(map str [0 1 2] \"abc\")",
					"function",
					"Returns a vector of calling a function with each of all the items or characters of one or more vectors or strings as arguments."
				]
			},
			{
				"directory": "xmap",
				"description": [
					"(xmap str [:a :b :c])",
					"function",
					"Same as map, but only (f i item), where i is an increasing index from 0."
				]
			},
			{
				"directory": "for",
				"description": [
					"(for str [0 1 2] \"abc\")",
					"function",
					"Returns a vector of calling a function with every combination of vector item or string characters as arguments."
				]
			},
			{
				"directory": "reduce",
				"description": [
					"(reduce + [1 2 3])",
					"function",
					"Calls a function repeatedly with each vector item or string character and the result from the previous function result."
				]
			},
			{
				"directory": "while",
				"description": [
					"(while (< n 5) (do-something) (var n (inc n)))",
					"function",
					"Runs expressions until its condition (first argument) is false."
				]
			},
			{
				"directory": "str",
				"description": [
					"(str \"Hello, \" \"world!\")",
					"function",
					"Concatenates its arguments into one string."
				]
			},
			{
				"directory": ".",
				"description": [
					"(. + 2 2)",
					"function",
					"Treats its arguments as an expression, first argument as the expression head."
				]
			},
			{
				"directory": "..",
				"description": [
					"(.. + [0 1] 2 [3 4])",
					"function",
					"Applies a vector's items and other arguments as the arguments to a function."
				]
			},
			{
				"directory": "...",
				"description": [
					"(... + 0 1 2 [3 4])",
					"function",
					"Applies a final vector's items and other arguments as the parameters to a function."
				]
			},
			{
				"directory": "into",
				"description": [
					"(into [0 1] {3 4 5 6})",
					"function",
					"Returns the concatenation of vectors and dictionaries."
				]
			},
			{
				"directory": "append",
				"description": ["(append 3 [0 1 2])", "function", "Append item to the end of a vector."]
			},
			{
				"directory": "prepend",
				"description": ["(prepend 3 [0 1 2])", "function", "Prepend item to the beginning of a vector."]
			},
			{
				"directory": "omit",
				"description": ["(omit :a {:a 1 :b 2})", "function", "Removes key from a dictionary."]
			},
			{
				"directory": "assoc",
				"description": ["(assoc :a 2 {:a 1 :b 2})", "function", "Associates a value to a key in a dictionary."]
			},
			{
				"directory": "insert",
				"description": ["(insert :a 1 [1 2])", "function", "Insert item at a specified index in a vector."]
			},
			{
				"directory": "sect",
				"description": ["(sect \"Hello, world!\" 1 3)", "function", "Returns a section of a vector or string."]
			},
			{
				"directory": "skip",
				"description": [
					"(skip 7 \"Hello, world!\")",
					"function",
					"Returns a section of a vector or string, skipping N elements."
				]
			},
			{
				"directory": "first",
				"description": [
					"(first 5 \"Hello, world!\")",
					"function",
					"Returns a section of a vector or string, up to N elements."
				]
			},
			{
				"directory": "last",
				"description": [
					"(last \"Hello, world!\")",
					"function",
					"Returns a section of a vector or string, of the last N elements."
				]
			},
			{
				"directory": "crop",
				"description": [
					"(crop 2 2 \"Hello, world!\")",
					"function",
					"Returns a section of a vector or string, after X elements, less Y elements."
				]
			},
			{
				"directory": "substr?",
				"description": ["(substr? \"ll\" \"Hello\")", "function", "Tests if a sub-string is in a string."]
			},
			{
				"directory": "to-num",
				"description": ["(to-num \"123\")", "function", "Converts a string to a number."]
			},
			{
				"directory": "to-key",
				"description": ["(to-key \"hello\")", "function", "Converts a string or number into a keyword."]
			},
			{
				"directory": "to-vec",
				"description": ["(to-vec \"hello\")", "function", "Returns string or dictionary as vector."]
			},
			{
				"directory": "type-of",
				"description": ["(type-of \"hello\")", "function", "Returns type string of argument."]
			},
			{
				"directory": "keys",
				"description": ["(keys {0 1 2 3})", "function", "Returns the keys of a dictionary."]
			},
			{
				"directory": "vals",
				"description": ["(vals {0 1 2 3})", "function", "Returns the vals of a dictionary."]
			},
			{
				"directory": "idx",
				"description": [
					"(idx [1 2 3] 2)",
					"function",
					"Returns index of an item or sub-string in a vector or string, or null."
				]
			},
			{
				"directory": "odd?",
				"description": ["(odd? 5)", "function", "Tests if number is odd."]
			},
			{
				"directory": "even?",
				"description": ["(even? 4)", "function", "Tests if number is even."]
			},
			{
				"directory": "filter",
				"description": [
					"(filter odd? [0 1 2 3])",
					"function",
					"Filters a vector or string by a function, optionally passing extra arguments. Returns the same type that is provided."
				]
			},
			{
				"directory": "remove",
				"description": [
					"(remove odd? [0 1 2 3])",
					"function",
					"Negatively filters a vector or string by a function, optionally passing extra arguments. Returns the same type that is provided."
				]
			},
			{
				"directory": "find",
				"description": [
					"(find odd? [0 1 2 3])",
					"function",
					"Returns the first item in the vector or string matching a predicate, optionally passing extra arguments."
				]
			},
			{
				"directory": "count",
				"description": [
					"(count odd? (range 10))",
					"function",
					"Returns the number of items or characters in a vector or string matching a predicate, optionally passing extra arguments."
				]
			},
			{
				"directory": "repeat",
				"description": [
					"(repeat 1 10)",
					"function",
					"Returns a vector of either a function called N times with the incrementation, or a value repeated N times."
				]
			},
			{
				"directory": "reverse",
				"description": ["(reverse [0 1 2 3])", "function", "Returns the reverse of a vector or string."]
			},
			{
				"directory": "flatten",
				"description": [
					"(flatten [8 [6 9] [0 [4]]])",
					"function",
					"\"Flattens\" its argument's immediate sub-vectors, and their immediate sub-vectors, etc."
				]
			},
			{
				"directory": "shuffle",
				"description": ["(shuffle (range 10))", "function", "Randomly rearranges a vector's items."]
			},
			{
				"directory": "sort",
				"description": [
					"(sort [8 6 9 0 4])",
					"function",
					"Returns a vector of vector items or string characters sorted."
				]
			},
			{
				"directory": "sort-by",
				"description": [
					"(sort-by sin [8 6 9 0 4])",
					"function",
					"Returns a vector of vector items, dictionary entries, or string characters sorted by the return of a function over each item."
				]
			},
			{
				"directory": "group-by",
				"description": [
					"(group-by odd? [0 1 2 3])",
					"function",
					"Groups by a function return into a dictionary of vectors, for vector items, string characters;",
					"or a dictionary of dictionaries for dictionary entries."
				]
			},
			{
				"directory": "part-by",
				"description": [
					"(part-by odd? [0 1 2 3 4])",
					"function",
					"Partitions by a function return into a vector of [when-true when-false] vectors for vector items or string characters;",
					"or a vector of two dictionaries for dictionary entries."
				]
			},
			{
				"directory": "partition",
				"description": [
					"(partition 2 (range 10))",
					"function",
					"Returns a vector partitioned into vectors or strings with N items/chars at most"
				]
			},
			{
				"directory": "freqs",
				"description": [
					"(freqs [0 0 1 2 3])",
					"function",
					"Returns dictionary with keys as distinct vector items, string characters, with values as number of occurrences."
				]
			},
			{
				"directory": "distinct",
				"description": [
					"(distinct 8 6 9 0 0 9)",
					"function",
					"Returns vector of distinct arguments, or if given one vector, a vector of distinct values."
				]
			},
			{
				"directory": "starts?",
				"description": [
					"(starts? \"He\" \"Hello\")",
					"function",
					"Tests if a string starts with another string."
				]
			},
			{
				"directory": "ends?",
				"description": ["(ends? \"lo\" \"hello\")", "function", "Tests if a string ends with another string."]
			},
			{
				"directory": "lower-case",
				"description": ["(lower-case \"HELLO\")", "function", "Returns a string made entirely lower-case."]
			},
			{
				"directory": "upper-case",
				"description": ["(lower-case \"hello\")", "function", "Returns a string made entirely upper-case."]
			},
			{
				"directory": "str*",
				"description": [
					"(str* \"hello \" 6)",
					"function",
					"Returns a string repeated a specified number of times."
				]
			},
			{
				"directory": "char-code",
				"description": [
					"(char-code \"hello \")",
					"function",
					"Returns the code associated with a string's first or Nth character, or null;",
					"Or returns a string with the associated supplied character code."
				]
			},
			{
				"directory": "split",
				"description": [
					"(split \"e\" \"hello\")",
					"function",
					"Splits a string into a vector by spaces or a provided string."
				]
			},
			{
				"directory": "join",
				"description": [
					"(join \", \" [0 1 2 3])",
					"function",
					"Joins a vector into a string by a provided string."
				]
			},
			{
				"directory": "replace",
				"description": [
					"(replace \"l\" \"x\" \"hello\")",
					"function",
					"Joins a vector into a string by a provided string."
				]
			},
			{
				"directory": "time",
				"description": ["(time)", "function", "Returns the time in milliseconds."]
			},
			{
				"directory": "pos?",
				"description": ["(pos? 5)", "function", "Tests if a number is positive."]
			},
			{
				"directory": "neg?",
				"description": ["(neg? -5)", "function", "Tests if a number is negative."]
			},
			{
				"directory": "zero?",
				"description": ["(zero? 0)", "function", "Tests if a value is 0."]
			},
			{
				"directory": "null?",
				"description": ["(null? null)", "function", "Tests if a value is null."]
			},
			{
				"directory": "num?",
				"description": ["(num? 123)", "function", "Tests if a value is number."]
			},
			{
				"directory": "bool?",
				"description": ["(bool? true)", "function", "Tests if a value is boolean."]
			},
			{
				"directory": "str?",
				"description": ["(str? \"hi\")", "function", "Tests if a value is string."]
			},
			{
				"directory": "dict?",
				"description": ["(dict? {})", "function", "Tests if a value is dictionary."]
			},
			{
				"directory": "vec?",
				"description": ["(vec? [])", "function", "Tests if a value is vector."]
			},
			{
				"directory": "key?",
				"description": ["(key? :abc)", "function", "Tests if a value is keyword."]
			},
			{
				"directory": "func?",
				"description": ["(func? +)", "function", "Tests if a value is function."]
			},
			{
				"directory": "do",
				"description": ["(do (print-str \"hello\") 1 2 3)", "function", "Returns its last argument."]
			},
			{
				"directory": "val",
				"description": ["(val 3 2 1 (print-str \"hello\"))", "function", "Returns its first argument."]
			},
			{
				"directory": "range",
				"description": ["(range 0 10 (print-str \"hello\"))", "function", "Returns its first argument."]
			},
			{
				"directory": "eval",
				"description": [
					"(eval \"(+ 2 2)\")",
					"function",
					"Evaluates a string as code, returning any values returned or null."
				]
			},
			{
				"directory": "symbols",
				"description": [
					"(symbols)",
					"function",
					"Returns symbol name strings vector by definition order in the Insitux session."
				]
			},
			{
				"directory": "tests",
				"description": [
					"(tests)",
					"function",
					"Returns report of built-in Insitux tests as a string, optionally verbose."
				]
			},
			{
				"directory": "about",
				"description": [
					"(about set-at)",
					"function",
					"Returns arity, type, and other information about specified function."
				]
			}
		]
	},
	"main.ts": {
		"description": [
			"basic shobfix environment definitions to interface with your console or provide basic functionality"
		],
		"list": [
			{
				"directory": "load",
				"description": ["(load \"link\")", "function", "loads the code provided by website from `link`"]
			},
			{
				"directory": "print",
				"description": ["(print ...)", "function", "prints supplied args to the console"]
			},
			{
				"directory": "time",
				"description": ["(print (time))", "function", "Luau `tick()`"]
			},
			{
				"directory": "ticked.connect",
				"description": [
					"(ticked.connect ...)",
					"(function hello xyz (print \"deltatime:\" xyz))",
					"(ticked.connect hello)",
					"function",
					"connects to a shobfix event that runs every 0.1s"
				]
			},
			{
				"directory": "ticked.kill",
				"description": ["(ticked.kill)", "function", "kills all ticked connections"]
			},
			{
				"directory": "clear",
				"description": ["(clear)", "function", "clears the console"]
			},
			{
				"directory": "typeof",
				"description": ["(typeof arg)", "function", "returns a string type of `arg`"]
			},
			{
				"directory": "wait",
				"description": ["(wait n)", "function", "waits for `n` seconds", "alias for Luau `wait()`"]
			}
		]
	},
	"dl.ts": {
		"description": ["deadline environment definitions to do things like set the time, change the map or gamemode"],
		"list": [
			{
				"directory": "$dl.players.${any}.name",
				"description": [
					"(print $dl.players.${any}.name)",
					"readonly string value",
					"name of \"${any}\", if a player named ${any} is ingame"
				]
			},
			{
				"directory": "$dl.players.${any}.get_loadout",
				"description": [
					"(dl.players.${any}.get_loadout weapon index)",
					"(dl.players.${any}.get_loadout \"AK74N\" 0)",
					"function",
					"gets the JSON loadout for weapon under index (0-39) of player \"${any}\""
				]
			},
			{
				"directory": "$dl.players.${any}.fill_ammo",
				"description": ["(dl.players.${any}.fill_ammo)", "function", "refills ammo of player \"${any}\""]
			},
			{
				"directory": "$dl.players.${any}.set_camera_mode",
				"description": [
					"(dl.players.${any}.set_camera_mode mode)",
					"(dl.players.${any}.set_camera_mode \"Freecam\")",
					"function",
					"sets local camera mode of player \"${any}\""
				]
			},
			{
				"directory": "$dl.players.${any}.health",
				"description": [
					"(print $dl.players.${any}.health)",
					"number value",
					"health of \"${any}\", if they are alive",
					"returns -1 if they are not"
				]
			},
			{
				"directory": "$dl.players.${any}.direction",
				"description": [
					"(print $dl.players.${any}.direction)",
					"readonly vector3 value",
					"facing direction of \"${any}\", if they are alive"
				]
			},
			{
				"directory": "$dl.players.${any}.velocity",
				"description": [
					"(print $dl.players.${any}.velocity)",
					"number value",
					"velocity of \"${any}\", if they are alive"
				]
			},
			{
				"directory": "$dl.players.${any}.kick",
				"description": ["(dl.players.${any}.kick)", "function", "kicks \"${any}\""]
			},
			{
				"directory": "$dl.players.${any}.serverban",
				"description": [
					"(dl.players.${any}.serverban)",
					"function",
					"serverbans \"${any}\", preventing them from joining the server they got kicked from"
				]
			},
			{
				"directory": "$dl.players.${any}.explode",
				"description": ["(dl.players.${any}.explode)", "function", "blows up ${any}"]
			},
			{
				"directory": "$dl.players.${any}.kill",
				"description": ["(dl.players.${any}.kill)", "function", "kills ${any}"]
			},
			{
				"directory": "$dl.players.${any}.team",
				"description": [
					"(print $dl.players.${any}.team)",
					"($dl.players.${any}.team team)",
					"string value",
					"team of \"${any}\", can be set to either security or insurgent"
				]
			},
			{
				"directory": "$dl.players.${any}.position",
				"description": [
					"(print $dl.players.${any}.position)",
					"($dl.players.${any}.position [x y z])",
					"vector3 value",
					"the position of \"${any}\", can be set with a vector as shown above"
				]
			},
			{
				"directory": "$dl.players.${any}.is_alive",
				"description": [
					"(print (dl.players.${any}.is_alive))",
					"function",
					"returns whether \"${any}\" is alive"
				]
			},

			{
				"directory": "$dl.globals.version",
				"description": ["(print $dl.globals.version)", "readonly string value", "game version"]
			},
			{
				"directory": "$dl.globals.revision",
				"description": ["(print $dl.globals.revision)", "readonly string value", "game revision"]
			},
			{
				"directory": "$dl.globals.channel",
				"description": ["(print $dl.globals.channel)", "readonly string value", "game channel"]
			},
			{
				"directory": "$dl.globals.builder_revision",
				"description": [
					"(print $dl.globals.builder_revision)",
					"readonly string value",
					"gun builder save revision"
				]
			},
			{
				"directory": "$dl.globals.release_channel_reset_delay",
				"description": [
					"(print $dl.globals.release_channel_reset_delay)",
					"number value",
					"delay between pressing reset and dying"
				]
			},
			{
				"directory": "$dl.globals.death_delay",
				"description": [
					"(print $dl.globals.death_delay)",
					"number value",
					"delay between entering the lobby and dying"
				]
			},
			{
				"directory": "$dl.globals.gravity",
				"description": ["(print $dl.globals.gravity)", "number value", "workspace gravity"]
			},
			{
				"directory": "$dl.globals.jump_frequency",
				"description": ["(print $dl.globals.jump_frequency)", "number value", "player jump frequency"]
			},
			{
				"directory": "$dl.globals.team_kill",
				"description": ["(print $dl.globals.team_kill)", "bool value", "teamkilling"]
			},
			{
				"directory": "$dl.globals.chat_tip_frequency",
				"description": ["(print $dl.globals.chat_tip_frequency)", "number value", "frequency of chat tips"]
			},
			{
				"directory": "$dl.globals.chat_tips_enabled",
				"description": ["(print $dl.globals.chat_tips_enabled)", "bool value", "sets whether chat tips appear"]
			},
			{
				"directory": "$dl.globals.disable_attachment_checks",
				"description": [
					"(print $dl.globals.disable_attachment_checks)",
					"bool value",
					"disables all weapon builder attachment validity checks"
				]
			},
			{
				"directory": "$dl.globals.editor_mount_any",
				"description": ["(print $dl.globals.editor_mount_any)", "bool value", "turns the editor into a meme"]
			},
			{
				"directory": "$dl.globals.pvp",
				"description": ["(print $dl.globals.pvp)", "bool value", "whether pvp is enabled"]
			},
			{
				"directory": "$dl.globals.enable_debug_info",
				"description": [
					"(print $dl.globals.enable_debug_info)",
					"bool value",
					"whether shobfix debug is enabled"
				]
			},
			{
				"directory": "$dl.globals.day_cycle_speed",
				"description": ["(print $dl.globals.day_cycle_speed)", "number value", "day cycle speed"]
			},
			{
				"directory": "$dl.globals.time_offset",
				"description": ["(print $dl.globals.time_offset)", "number value", "time offset in hours"]
			},
			{
				"directory": "$dl.globals.fall_damage_enabled",
				"description": ["(print $dl.globals.fall_damage_enabled)", "bool value", "disables fall damage"]
			},
			{
				"directory": "$dl.globals.disable_automatic_time",
				"description": [
					"(print $dl.globals.disable_automatic_time)",
					"bool value",
					"disables automatic time/map adjustment",
					"when a new round of push starts"
				]
			},
			{
				"directory": "$dl.globals.enable_projectile_debug",
				"description": ["(print $dl.globals.enable_projectile_debug)", "bool value", "enable_projectile_debug"]
			},
			{
				"directory": "$dl.globals.push_disable_spawning",
				"description": ["(print $dl.globals.push_disable_spawning)", "bool value", "disables spawning in push"]
			},
			{
				"directory": "$dl.globals.push_time_to_capture",
				"description": [
					"(print $dl.globals.push_time_to_capture)",
					"bool value",
					"the amount of time it takes to capture a point in push"
				]
			},

			{
				"directory": "dl.gunshot_emitter.new",
				"description": [
					"(dl.gunshot_emitter.new handle weapon)",
					"(dl.gunshot_emitter.new \"handle\" \"M4A1\")",
					"function",
					"creates a simulated a gunshot emitter"
				]
			},
			{
				"directory": "dl.gunshot_emitter.start_kind",
				"description": [
					"(dl.gunshot_emitter.new \"handle\" \"M4A1\")",
					"(dl.gunshot_emitter.start_kind handle kind)",
					"(dl.gunshot_emitter.start_kind \"handle\" \"semi\")",
					"function",
					"plays a kind of gunfire",
					"semi, auto, or tail"
				]
			},
			{
				"directory": "dl.gunshot_emitter.set_position",
				"description": [
					"(dl.gunshot_emitter.new \"handle\" \"M4A1\")",
					"(dl.gunshot_emitter.set_position handle position)",
					"(dl.gunshot_emitter.set_position \"handle\" [0 100 0])",
					"function",
					"sets gunshot_emitter current position"
				]
			},
			{
				"directory": "dl.gunshot_emitter.get_position",
				"description": [
					"(dl.gunshot_emitter.new \"handle\" \"M4A1\")",
					"(dl.gunshot_emitter.get_position handle)",
					"(print (dl.gunshot_emitter.get_position \"handle\"))",

					"function",
					"gets gunshot_emitter current position"
				]
			},
			{
				"directory": "dl.gunshot_emitter.start_kind",
				"description": [
					"(dl.gunshot_emitter.new \"handle\" \"M4A1\")",
					"(dl.gunshot_emitter.stop_kind handle kind)",
					"(dl.gunshot_emitter.stop_kind \"handle\" \"semi\")",
					"function",
					"stops a kind of gunfire",
					"semi, auto, or tail"
				]
			},

			{
				"directory": "dl.drone.new",
				"description": [
					"(dl.drone.new handle init_position)",
					"(dl.drone.new \"handle\" [0 200 0])",
					"function",
					"creates a new drone at init_position with ID handle"
				]
			},
			{
				"directory": "dl.drone.set_target_position",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(dl.drone.set_target_position handle position)",
					"(dl.drone.set_target_position \"handle\" [0 100 0])",
					"function",
					"sets drone target position"
				]
			},
			{
				"directory": "dl.drone.set_target_position",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(print (dl.drone.get_target_position handle))",
					"function",
					"gets drone target position"
				]
			},
			{
				"directory": "dl.drone.set_target_position",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(dl.drone.set_target_position handle position)",
					"(dl.drone.set_target_position \"handle\" [0 100 0])",
					"function",
					"sets drone target direction"
				]
			},
			{
				"directory": "dl.drone.get_target_direction",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(print (dl.drone.get_target_direction handle))",
					"function",
					"gets drone target direction"
				]
			},
			{
				"directory": "dl.drone.set_direction",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(dl.drone.set_direction handle position)",
					"(dl.drone.set_direction \"handle\" [0 100 0])",
					"function",
					"sets drone current direction"
				]
			},
			{
				"directory": "dl.drone.get_direction",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(print (dl.drone.get_direction handle))",
					"function",
					"gets drone current direction"
				]
			},
			{
				"directory": "dl.drone.set_position",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(dl.drone.set_position handle position)",
					"(dl.drone.set_position \"handle\" [0 100 0])",
					"function",
					"sets drone current position"
				]
			},
			{
				"directory": "dl.drone.get_position",
				"description": [
					"(dl.drone.new \"handle\" [0 200 0])",
					"(dl.drone.get_position handle)",
					"(print (dl.drone.get_position \"handle\"))",

					"function",
					"gets drone current position"
				]
			},

			{
				"directory": "dl.sound.new",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.new \"handle\")",

					"function",
					"creates a new sound under handle"
				]
			},
			{
				"directory": "dl.sound.play",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.new \"handle\")",
					"(dl.sound.set_id \"handle\" \"rbxassetid://0\")",
					"(dl.sound.play \"handle\")",

					"function",
					"creates a new sound under handle"
				]
			},
			{
				"directory": "dl.sound.stop",
				"description": [
					"(dl.sound.stop handle)",
					"(dl.sound.stop \"handle\")",

					"function",
					"creates a new sound under handle"
				]
			},
			{
				"directory": "dl.sound.set_id",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.set_id handle id)",
					"(dl.sound.set_id \"handle\" \"rbxassetid://0\")",
					"function",
					"sets sound ID"
				]
			},
			{
				"directory": "dl.sound.get_id",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.get_id handle)",
					"(print (dl.sound.get_id \"handle\"))",
					"function",
					"gets sound ID"
				]
			},
			{
				"directory": "dl.sound.set_volume",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.set_volume handle id)",
					"(dl.sound.set_volume \"handle\" 1)",
					"function",
					"sets sound volume"
				]
			},
			{
				"directory": "dl.sound.get_volume",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.get_volume handle)",
					"(print (dl.sound.get_volume \"handle\"))",
					"function",
					"gets sound volume"
				]
			},
			{
				"directory": "dl.sound.set_time_position",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.set_time_position handle id)",
					"(dl.sound.set_time_position \"handle\" 1)",
					"function",
					"sets sound time position"
				]
			},
			{
				"directory": "dl.sound.get_time_position",
				"description": [
					"(dl.sound.new handle)",
					"(dl.sound.get_time_position handle)",
					"(print (dl.sound.get_time_position \"handle\"))",
					"function",
					"gets sound time position"
				]
			},

			{
				"directory": "dl.events.on_chat_message",
				"description": [
					"(function sent sender channel contents (print sender \" \" channel \" \" contents))",
					"(dl.events.on_chat_message.connect sent)",
					"(wait 5)",
					"(dl.events.on_chat_message.kill sent)",
					"shobfix event",
					"fires whenever a player uses the chat"
				]
			},
			{
				"directory": "dl.events.on_player_spawned",
				"description": [
					"(function spawned player (print player))",
					"(dl.events.on_player_spawned.connect sent)",
					"(wait 5)",
					"(dl.events.on_player_spawned.kill sent)",
					"shobfix event",
					"fires whenever a player spawns in"
				]
			},
			{
				"directory": "dl.events.on_player_died",
				"description": [
					"(function spawned killer victim (print killer victim))",
					"(dl.events.on_player_died.connect sent)",
					"(wait 5)",
					"(dl.events.on_player_died.kill sent)",
					"shobfix event",
					"fires whenever a player dies"
				]
			},

			{
				"directory": "$dl.util.explosion",
				"description": [
					"(dl.util.explosion [x y z] grenade)",
					"(dl.util.explosion [0 0 0])",
					"(dl.util.explosion [0 0 0] \"F1\")",
					"function",
					"causes an explosion at position x y z with the specified grenade"
				]
			},
			{
				"directory": "$dl.util.fmessage",
				"description": [
					"(dl.util.fmessage message)",
					"admin-restricted function",
					"prints message to server chat"
				]
			},
			{
				"directory": "$dl.util.set_map",
				"description": ["(dl.util.set_map target_map)", "function", "sets current map to target_map"]
			},
			{
				"directory": "$dl.util.set_preset",
				"description": ["(dl.util.set_preset lighting)", "function", "sets map lighting to lighting"]
			},
			{
				"directory": "$dl.util.set_gamemode",
				"description": ["(dl.util.set_gamemode)", "function", "resets gamemode to push"]
			},
			{
				"directory": "$dl.util.fire",
				"description": [
					"(dl.util.fire position destination caliber projectile_velocity)",
					"(dl.util.fire [0 1000 0] [0 0 0] \"45acp_match_fmj\" 1500)",
					"function",
					"fires a projectile that does not deal damage using the specified caliber",
					"and projectile velocity"
				]
			},

			{
				"directory": "dl.list_players",
				"description": ["(print (dl.list_players))", "function", "lists all players in the game"]
			}
		]
	},
	"test.ts": {
		"description": ["test functions"],
		"list": [
			{
				"directory": "$test.lua_error_test",
				"description": ["function", "shobfix error"]
			},
			{
				"directory": "$test.shobfix_generic_error_test",
				"description": ["function", "shobfix error"]
			},
			{
				"directory": "$test.shobfix_perm_error_test",
				"description": ["function", "permission error"]
			}
		]
	}
}
